<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="3333" height="4150" onload="init(evt)" viewBox="0 0 3333 4150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="4150" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="4133.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="3323" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="3323" y="4133.00"> </text><svg id="frames" x="10" width="3313" total_samples="29792"><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="4085" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.0934%" y="4095.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="4069" width="0.0101%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.0934%" y="4079.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="4053" width="0.0101%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="3"/><text x="0.0934%" y="4063.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="4037" width="0.0101%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.0934%" y="4047.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="4021" width="0.0101%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="4031.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="4005" width="0.0101%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="0.0934%" y="4015.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3989" width="0.0101%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3999.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3973" width="0.0101%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3983.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3957" width="0.0101%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3941" width="0.0101%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3925" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3935.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3909" width="0.0101%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3893" width="0.0101%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3877" width="0.0101%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3861" width="0.0101%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3871.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3845" width="0.0101%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3829" width="0.0101%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3813" width="0.0101%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3797" width="0.0101%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3781" width="0.0101%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3765" width="0.0101%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3775.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3749" width="0.0101%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3733" width="0.0101%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3717" width="0.0101%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3701" width="0.0101%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3711.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3685" width="0.0101%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3695.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3669" width="0.0101%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3653" width="0.0101%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3663.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3637" width="0.0101%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3647.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3621" width="0.0101%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3631.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3605" width="0.0101%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3615.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3589" width="0.0101%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3599.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3573" width="0.0101%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3583.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3557" width="0.0101%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3567.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3541" width="0.0101%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3551.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3525" width="0.0101%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3535.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3509" width="0.0101%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3519.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3493" width="0.0101%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3503.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3477" width="0.0101%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3487.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3461" width="0.0101%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3471.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3445" width="0.0101%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3455.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3429" width="0.0101%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3439.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3413" width="0.0101%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3423.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3397" width="0.0101%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3407.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3381" width="0.0101%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3391.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3365" width="0.0101%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3375.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3349" width="0.0101%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3359.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3333" width="0.0101%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3343.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3317" width="0.0101%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3327.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3301" width="0.0101%" height="15" fill="rgb(206,27,48)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3311.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3285" width="0.0101%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3295.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3269" width="0.0101%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3279.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3253" width="0.0101%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3263.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3237" width="0.0101%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3247.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3221" width="0.0101%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3231.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3205" width="0.0101%" height="15" fill="rgb(251,118,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3215.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3189" width="0.0101%" height="15" fill="rgb(217,147,25)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3199.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3173" width="0.0101%" height="15" fill="rgb(247,81,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3183.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3157" width="0.0101%" height="15" fill="rgb(209,12,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3167.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3141" width="0.0101%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3151.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3125" width="0.0101%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3135.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3109" width="0.0101%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3119.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3093" width="0.0101%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3103.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3077" width="0.0101%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3087.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3061" width="0.0101%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3071.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3045" width="0.0101%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3055.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3029" width="0.0101%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3039.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="3013" width="0.0101%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3023.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2997" width="0.0101%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="3"/><text x="0.0934%" y="3007.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2981" width="0.0101%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2991.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2965" width="0.0101%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2975.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2949" width="0.0101%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2959.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2933" width="0.0101%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2943.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2917" width="0.0101%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2927.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2901" width="0.0101%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2911.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2885" width="0.0101%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2895.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2869" width="0.0101%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2879.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2853" width="0.0101%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2863.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2837" width="0.0101%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2847.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2821" width="0.0101%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2831.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2805" width="0.0101%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2815.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2789" width="0.0101%" height="15" fill="rgb(253,215,40)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2799.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2773" width="0.0101%" height="15" fill="rgb(211,81,21)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2783.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2757" width="0.0101%" height="15" fill="rgb(208,190,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2767.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2741" width="0.0101%" height="15" fill="rgb(235,213,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2751.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2725" width="0.0101%" height="15" fill="rgb(237,122,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2735.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2709" width="0.0101%" height="15" fill="rgb(244,218,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2719.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2693" width="0.0101%" height="15" fill="rgb(240,68,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2703.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2677" width="0.0101%" height="15" fill="rgb(210,16,53)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2687.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2661" width="0.0101%" height="15" fill="rgb(235,124,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2671.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2645" width="0.0101%" height="15" fill="rgb(224,169,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2655.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2629" width="0.0101%" height="15" fill="rgb(250,166,2)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2639.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2613" width="0.0101%" height="15" fill="rgb(242,216,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2623.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2597" width="0.0101%" height="15" fill="rgb(230,116,27)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2607.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2581" width="0.0101%" height="15" fill="rgb(228,99,48)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2591.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2565" width="0.0101%" height="15" fill="rgb(253,11,6)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2575.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2549" width="0.0101%" height="15" fill="rgb(247,143,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2559.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2533" width="0.0101%" height="15" fill="rgb(236,97,10)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2543.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2517" width="0.0101%" height="15" fill="rgb(233,208,19)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2527.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2501" width="0.0101%" height="15" fill="rgb(216,164,2)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2511.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2485" width="0.0101%" height="15" fill="rgb(220,129,5)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2495.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2469" width="0.0101%" height="15" fill="rgb(242,17,10)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2479.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2453" width="0.0101%" height="15" fill="rgb(242,107,0)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2463.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2437" width="0.0101%" height="15" fill="rgb(251,28,31)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2447.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2421" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2431.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2405" width="0.0101%" height="15" fill="rgb(215,21,27)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2415.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2389" width="0.0101%" height="15" fill="rgb(232,23,21)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2399.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2373" width="0.0101%" height="15" fill="rgb(244,5,23)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2383.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2357" width="0.0101%" height="15" fill="rgb(226,81,46)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2367.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2341" width="0.0101%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2351.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2325" width="0.0101%" height="15" fill="rgb(212,68,19)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2335.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2309" width="0.0101%" height="15" fill="rgb(240,187,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2319.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2293" width="0.0101%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2303.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2277" width="0.0101%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2287.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2261" width="0.0101%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2271.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2245" width="0.0101%" height="15" fill="rgb(247,173,49)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2255.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2229" width="0.0101%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2239.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2213" width="0.0101%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2223.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2197" width="0.0101%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2207.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2181" width="0.0101%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2191.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2165" width="0.0101%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2175.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2149" width="0.0101%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2159.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2133" width="0.0101%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2143.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2117" width="0.0101%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2127.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2101" width="0.0101%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2111.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2085" width="0.0101%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2095.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2069" width="0.0101%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2079.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2053" width="0.0101%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2063.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2037" width="0.0101%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2047.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2021" width="0.0101%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2031.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="2005" width="0.0101%" height="15" fill="rgb(242,14,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="2015.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1989" width="0.0101%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1999.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1973" width="0.0101%" height="15" fill="rgb(213,55,15)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1983.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1957" width="0.0101%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1967.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1941" width="0.0101%" height="15" fill="rgb(230,59,30)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1951.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1925" width="0.0101%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1909" width="0.0101%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1893" width="0.0101%" height="15" fill="rgb(232,18,1)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1903.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1877" width="0.0101%" height="15" fill="rgb(215,41,42)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1861" width="0.0101%" height="15" fill="rgb(224,123,36)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1845" width="0.0101%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1829" width="0.0101%" height="15" fill="rgb(205,98,50)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1813" width="0.0101%" height="15" fill="rgb(205,185,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1797" width="0.0101%" height="15" fill="rgb(238,207,15)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1781" width="0.0101%" height="15" fill="rgb(213,199,42)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1765" width="0.0101%" height="15" fill="rgb(235,201,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1749" width="0.0101%" height="15" fill="rgb(207,46,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1733" width="0.0101%" height="15" fill="rgb(241,35,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1717" width="0.0101%" height="15" fill="rgb(243,32,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1701" width="0.0101%" height="15" fill="rgb(247,202,23)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1685" width="0.0101%" height="15" fill="rgb(219,102,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1695.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1669" width="0.0101%" height="15" fill="rgb(243,110,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1653" width="0.0101%" height="15" fill="rgb(222,74,54)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1637" width="0.0101%" height="15" fill="rgb(216,99,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1621" width="0.0101%" height="15" fill="rgb(226,22,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1605" width="0.0101%" height="15" fill="rgb(217,163,10)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1589" width="0.0101%" height="15" fill="rgb(213,25,53)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1573" width="0.0101%" height="15" fill="rgb(252,105,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1557" width="0.0101%" height="15" fill="rgb(220,39,43)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1541" width="0.0101%" height="15" fill="rgb(229,68,48)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1525" width="0.0101%" height="15" fill="rgb(252,8,32)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1509" width="0.0101%" height="15" fill="rgb(223,20,43)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1493" width="0.0101%" height="15" fill="rgb(229,81,49)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1477" width="0.0101%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1461" width="0.0101%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1445" width="0.0101%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1429" width="0.0101%" height="15" fill="rgb(233,201,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1413" width="0.0101%" height="15" fill="rgb(221,78,26)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1397" width="0.0101%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1381" width="0.0101%" height="15" fill="rgb(230,49,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1365" width="0.0101%" height="15" fill="rgb(229,67,23)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1349" width="0.0101%" height="15" fill="rgb(249,83,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1333" width="0.0101%" height="15" fill="rgb(215,43,3)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1317" width="0.0101%" height="15" fill="rgb(238,154,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1301" width="0.0101%" height="15" fill="rgb(219,56,2)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1285" width="0.0101%" height="15" fill="rgb(233,0,4)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1269" width="0.0101%" height="15" fill="rgb(235,30,7)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1253" width="0.0101%" height="15" fill="rgb(250,79,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1237" width="0.0101%" height="15" fill="rgb(211,146,34)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1221" width="0.0101%" height="15" fill="rgb(228,22,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1205" width="0.0101%" height="15" fill="rgb(235,168,5)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1189" width="0.0101%" height="15" fill="rgb(221,155,16)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1173" width="0.0101%" height="15" fill="rgb(215,215,53)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1157" width="0.0101%" height="15" fill="rgb(223,4,10)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1141" width="0.0101%" height="15" fill="rgb(234,103,6)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1125" width="0.0101%" height="15" fill="rgb(227,97,0)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1109" width="0.0101%" height="15" fill="rgb(234,150,53)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1093" width="0.0101%" height="15" fill="rgb(228,201,54)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1077" width="0.0101%" height="15" fill="rgb(222,22,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1061" width="0.0101%" height="15" fill="rgb(237,53,32)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1045" width="0.0101%" height="15" fill="rgb(233,25,53)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1029" width="0.0101%" height="15" fill="rgb(210,40,34)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="1013" width="0.0101%" height="15" fill="rgb(241,220,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="997" width="0.0101%" height="15" fill="rgb(235,28,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="981" width="0.0101%" height="15" fill="rgb(210,56,17)" fg:x="1" fg:w="3"/><text x="0.0934%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="965" width="0.0101%" height="15" fill="rgb(224,130,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="949" width="0.0101%" height="15" fill="rgb(235,212,8)" fg:x="1" fg:w="3"/><text x="0.0934%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="933" width="0.0101%" height="15" fill="rgb(223,33,50)" fg:x="1" fg:w="3"/><text x="0.0934%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="917" width="0.0101%" height="15" fill="rgb(219,149,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="901" width="0.0101%" height="15" fill="rgb(250,156,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="885" width="0.0101%" height="15" fill="rgb(216,193,19)" fg:x="1" fg:w="3"/><text x="0.0934%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="869" width="0.0101%" height="15" fill="rgb(216,135,14)" fg:x="1" fg:w="3"/><text x="0.0934%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="853" width="0.0101%" height="15" fill="rgb(241,47,5)" fg:x="1" fg:w="3"/><text x="0.0934%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="837" width="0.0101%" height="15" fill="rgb(233,42,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="821" width="0.0101%" height="15" fill="rgb(231,13,6)" fg:x="1" fg:w="3"/><text x="0.0934%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="805" width="0.0101%" height="15" fill="rgb(207,181,40)" fg:x="1" fg:w="3"/><text x="0.0934%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="789" width="0.0101%" height="15" fill="rgb(254,173,49)" fg:x="1" fg:w="3"/><text x="0.0934%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="773" width="0.0101%" height="15" fill="rgb(221,1,38)" fg:x="1" fg:w="3"/><text x="0.0934%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="757" width="0.0101%" height="15" fill="rgb(206,124,46)" fg:x="1" fg:w="3"/><text x="0.0934%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="741" width="0.0101%" height="15" fill="rgb(249,21,11)" fg:x="1" fg:w="3"/><text x="0.0934%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="725" width="0.0101%" height="15" fill="rgb(222,201,40)" fg:x="1" fg:w="3"/><text x="0.0934%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="709" width="0.0101%" height="15" fill="rgb(235,61,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="693" width="0.0101%" height="15" fill="rgb(219,207,3)" fg:x="1" fg:w="3"/><text x="0.0934%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="677" width="0.0101%" height="15" fill="rgb(222,56,46)" fg:x="1" fg:w="3"/><text x="0.0934%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="661" width="0.0101%" height="15" fill="rgb(239,76,54)" fg:x="1" fg:w="3"/><text x="0.0934%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="645" width="0.0101%" height="15" fill="rgb(231,124,27)" fg:x="1" fg:w="3"/><text x="0.0934%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="629" width="0.0101%" height="15" fill="rgb(249,195,6)" fg:x="1" fg:w="3"/><text x="0.0934%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="613" width="0.0101%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="3"/><text x="0.0934%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="597" width="0.0101%" height="15" fill="rgb(206,201,31)" fg:x="1" fg:w="3"/><text x="0.0934%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="581" width="0.0101%" height="15" fill="rgb(231,57,52)" fg:x="1" fg:w="3"/><text x="0.0934%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="565" width="0.0101%" height="15" fill="rgb(248,177,22)" fg:x="1" fg:w="3"/><text x="0.0934%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="549" width="0.0101%" height="15" fill="rgb(215,211,37)" fg:x="1" fg:w="3"/><text x="0.0934%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="533" width="0.0101%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="3"/><text x="0.0934%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="517" width="0.0101%" height="15" fill="rgb(227,165,31)" fg:x="1" fg:w="3"/><text x="0.0934%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="501" width="0.0101%" height="15" fill="rgb(228,167,24)" fg:x="1" fg:w="3"/><text x="0.0934%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="485" width="0.0101%" height="15" fill="rgb(228,143,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="469" width="0.0101%" height="15" fill="rgb(249,149,8)" fg:x="1" fg:w="3"/><text x="0.0934%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="453" width="0.0101%" height="15" fill="rgb(243,35,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="437" width="0.0101%" height="15" fill="rgb(246,89,9)" fg:x="1" fg:w="3"/><text x="0.0934%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="421" width="0.0101%" height="15" fill="rgb(233,213,13)" fg:x="1" fg:w="3"/><text x="0.0934%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="405" width="0.0101%" height="15" fill="rgb(233,141,41)" fg:x="1" fg:w="3"/><text x="0.0934%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="389" width="0.0101%" height="15" fill="rgb(239,167,4)" fg:x="1" fg:w="3"/><text x="0.0934%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="373" width="0.0101%" height="15" fill="rgb(209,217,16)" fg:x="1" fg:w="3"/><text x="0.0934%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="357" width="0.0101%" height="15" fill="rgb(219,88,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="341" width="0.0101%" height="15" fill="rgb(220,193,23)" fg:x="1" fg:w="3"/><text x="0.0934%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="325" width="0.0101%" height="15" fill="rgb(230,90,52)" fg:x="1" fg:w="3"/><text x="0.0934%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="309" width="0.0101%" height="15" fill="rgb(252,106,19)" fg:x="1" fg:w="3"/><text x="0.0934%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="293" width="0.0101%" height="15" fill="rgb(206,74,20)" fg:x="1" fg:w="3"/><text x="0.0934%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="277" width="0.0101%" height="15" fill="rgb(230,138,44)" fg:x="1" fg:w="3"/><text x="0.0934%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="261" width="0.0101%" height="15" fill="rgb(235,182,43)" fg:x="1" fg:w="3"/><text x="0.0934%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="245" width="0.0101%" height="15" fill="rgb(242,16,51)" fg:x="1" fg:w="3"/><text x="0.0934%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="229" width="0.0101%" height="15" fill="rgb(248,9,4)" fg:x="1" fg:w="3"/><text x="0.0934%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="213" width="0.0101%" height="15" fill="rgb(210,31,22)" fg:x="1" fg:w="3"/><text x="0.0934%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="197" width="0.0101%" height="15" fill="rgb(239,54,39)" fg:x="1" fg:w="3"/><text x="0.0934%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="181" width="0.0101%" height="15" fill="rgb(230,99,41)" fg:x="1" fg:w="3"/><text x="0.0934%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="165" width="0.0101%" height="15" fill="rgb(253,106,12)" fg:x="1" fg:w="3"/><text x="0.0934%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="149" width="0.0101%" height="15" fill="rgb(213,46,41)" fg:x="1" fg:w="3"/><text x="0.0934%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="133" width="0.0101%" height="15" fill="rgb(215,133,35)" fg:x="1" fg:w="3"/><text x="0.0934%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="117" width="0.0101%" height="15" fill="rgb(213,28,5)" fg:x="1" fg:w="3"/><text x="0.0934%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="101" width="0.0101%" height="15" fill="rgb(215,77,49)" fg:x="1" fg:w="3"/><text x="0.0934%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="85" width="0.0101%" height="15" fill="rgb(248,100,22)" fg:x="1" fg:w="3"/><text x="0.0934%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="69" width="0.0101%" height="15" fill="rgb(208,67,9)" fg:x="1" fg:w="3"/><text x="0.0934%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="53" width="0.0101%" height="15" fill="rgb(219,133,21)" fg:x="1" fg:w="3"/><text x="0.0934%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="0.0034%" y="37" width="0.0101%" height="15" fill="rgb(246,46,29)" fg:x="1" fg:w="3"/><text x="0.0934%" y="47.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (3 samples, 0.01%)</title><rect x="0.0201%" y="4021" width="0.0101%" height="15" fill="rgb(246,185,52)" fg:x="6" fg:w="3"/><text x="0.1101%" y="4031.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (3 samples, 0.01%)</title><rect x="0.0201%" y="4005" width="0.0101%" height="15" fill="rgb(252,136,11)" fg:x="6" fg:w="3"/><text x="0.1101%" y="4015.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (3 samples, 0.01%)</title><rect x="0.0201%" y="3989" width="0.0101%" height="15" fill="rgb(219,138,53)" fg:x="6" fg:w="3"/><text x="0.1101%" y="3999.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (4 samples, 0.01%)</title><rect x="0.0201%" y="4037" width="0.0134%" height="15" fill="rgb(211,51,23)" fg:x="6" fg:w="4"/><text x="0.1101%" y="4047.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (7 samples, 0.02%)</title><rect x="0.0168%" y="4069" width="0.0235%" height="15" fill="rgb(247,221,28)" fg:x="5" fg:w="7"/><text x="0.1068%" y="4079.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (7 samples, 0.02%)</title><rect x="0.0168%" y="4053" width="0.0235%" height="15" fill="rgb(251,222,45)" fg:x="5" fg:w="7"/><text x="0.1068%" y="4063.50"></text></g><g><title>rocksdb::db::DBCommon&lt;T,rocksdb::db::DBWithThreadModeInner&gt;::open_cf_descriptors (4 samples, 0.01%)</title><rect x="0.0436%" y="3973" width="0.0134%" height="15" fill="rgb(217,162,53)" fg:x="13" fg:w="4"/><text x="0.1336%" y="3983.50"></text></g><g><title>rocksdb::db::DBCommon&lt;T,rocksdb::db::DBWithThreadModeInner&gt;::open_cf_raw (4 samples, 0.01%)</title><rect x="0.0436%" y="3957" width="0.0134%" height="15" fill="rgb(229,93,14)" fg:x="13" fg:w="4"/><text x="0.1336%" y="3967.50"></text></g><g><title>rocksdb_open_column_families (4 samples, 0.01%)</title><rect x="0.0436%" y="3941" width="0.0134%" height="15" fill="rgb(209,67,49)" fg:x="13" fg:w="4"/><text x="0.1336%" y="3951.50"></text></g><g><title>rocksdb::DBImpl::Open(rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator&lt;rocksdb::ColumnFamilyDescriptor&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyHandle*, std::__1::allocator&lt;rocksdb::ColumnFamilyHandle*&gt;&gt;*, rocksdb::DB**, bool, bool) (4 samples, 0.01%)</title><rect x="0.0436%" y="3925" width="0.0134%" height="15" fill="rgb(213,87,29)" fg:x="13" fg:w="4"/><text x="0.1336%" y="3935.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.01%)</title><rect x="0.0738%" y="3941" width="0.0134%" height="15" fill="rgb(205,151,52)" fg:x="22" fg:w="4"/><text x="0.1639%" y="3951.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="0.0940%" y="3861" width="0.0101%" height="15" fill="rgb(253,215,39)" fg:x="28" fg:w="3"/><text x="0.1840%" y="3871.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (7 samples, 0.02%)</title><rect x="0.0940%" y="3877" width="0.0235%" height="15" fill="rgb(221,220,41)" fg:x="28" fg:w="7"/><text x="0.1840%" y="3887.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="0.1208%" y="3845" width="0.0101%" height="15" fill="rgb(218,133,21)" fg:x="36" fg:w="3"/><text x="0.2108%" y="3855.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.01%)</title><rect x="0.1343%" y="3845" width="0.0134%" height="15" fill="rgb(221,193,43)" fg:x="40" fg:w="4"/><text x="0.2243%" y="3855.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="0.1343%" y="3829" width="0.0134%" height="15" fill="rgb(240,128,52)" fg:x="40" fg:w="4"/><text x="0.2243%" y="3839.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (11 samples, 0.04%)</title><rect x="0.1208%" y="3861" width="0.0369%" height="15" fill="rgb(253,114,12)" fg:x="36" fg:w="11"/><text x="0.2108%" y="3871.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.01%)</title><rect x="0.1611%" y="3845" width="0.0101%" height="15" fill="rgb(215,223,47)" fg:x="48" fg:w="3"/><text x="0.2511%" y="3855.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count::_{{closure}} (4 samples, 0.01%)</title><rect x="0.1712%" y="3845" width="0.0134%" height="15" fill="rgb(248,225,23)" fg:x="51" fg:w="4"/><text x="0.2612%" y="3855.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (24 samples, 0.08%)</title><rect x="0.1208%" y="3877" width="0.0806%" height="15" fill="rgb(250,108,0)" fg:x="36" fg:w="24"/><text x="0.2108%" y="3887.50"></text></g><g><title>primitive_types::serde::_&lt;impl serde::ser::Serialize for primitive_types::U256&gt;::serialize (12 samples, 0.04%)</title><rect x="0.1611%" y="3861" width="0.0403%" height="15" fill="rgb(228,208,7)" fg:x="48" fg:w="12"/><text x="0.2511%" y="3871.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9 samples, 0.03%)</title><rect x="0.2115%" y="3861" width="0.0302%" height="15" fill="rgb(244,45,10)" fg:x="63" fg:w="9"/><text x="0.3015%" y="3871.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7 samples, 0.02%)</title><rect x="0.2417%" y="3861" width="0.0235%" height="15" fill="rgb(207,125,25)" fg:x="72" fg:w="7"/><text x="0.3317%" y="3871.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3 samples, 0.01%)</title><rect x="0.2652%" y="3861" width="0.0101%" height="15" fill="rgb(210,195,18)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3871.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="0.2652%" y="3845" width="0.0101%" height="15" fill="rgb(249,80,12)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3855.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="0.2652%" y="3829" width="0.0101%" height="15" fill="rgb(221,65,9)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3839.50"></text></g><g><title>_realloc (3 samples, 0.01%)</title><rect x="0.2652%" y="3813" width="0.0101%" height="15" fill="rgb(235,49,36)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3823.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.01%)</title><rect x="0.2652%" y="3797" width="0.0101%" height="15" fill="rgb(225,32,20)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3807.50"></text></g><g><title>szone_realloc (3 samples, 0.01%)</title><rect x="0.2652%" y="3781" width="0.0101%" height="15" fill="rgb(215,141,46)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3791.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="0.2652%" y="3765" width="0.0101%" height="15" fill="rgb(250,160,47)" fg:x="79" fg:w="3"/><text x="0.3552%" y="3775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.02%)</title><rect x="0.2752%" y="3861" width="0.0235%" height="15" fill="rgb(216,222,40)" fg:x="82" fg:w="7"/><text x="0.3653%" y="3871.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="0.2987%" y="3845" width="0.0168%" height="15" fill="rgb(234,217,39)" fg:x="89" fg:w="5"/><text x="0.3887%" y="3855.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.07%)</title><rect x="0.2987%" y="3861" width="0.0738%" height="15" fill="rgb(207,178,40)" fg:x="89" fg:w="22"/><text x="0.3887%" y="3871.50"></text></g><g><title>_platform_memmove (17 samples, 0.06%)</title><rect x="0.3155%" y="3845" width="0.0571%" height="15" fill="rgb(221,136,13)" fg:x="94" fg:w="17"/><text x="0.4055%" y="3855.50"></text></g><g><title>serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (74 samples, 0.25%)</title><rect x="0.2081%" y="3877" width="0.2484%" height="15" fill="rgb(249,199,10)" fg:x="62" fg:w="74"/><text x="0.2981%" y="3887.50"></text></g><g><title>itoa::_&lt;impl itoa::private::Sealed for u8&gt;::write (25 samples, 0.08%)</title><rect x="0.3726%" y="3861" width="0.0839%" height="15" fill="rgb(249,222,13)" fg:x="111" fg:w="25"/><text x="0.4626%" y="3871.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (109 samples, 0.37%)</title><rect x="0.0940%" y="3893" width="0.3659%" height="15" fill="rgb(244,185,38)" fg:x="28" fg:w="109"/><text x="0.1840%" y="3903.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (6 samples, 0.02%)</title><rect x="0.4632%" y="3845" width="0.0201%" height="15" fill="rgb(236,202,9)" fg:x="138" fg:w="6"/><text x="0.5532%" y="3855.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (3 samples, 0.01%)</title><rect x="0.4733%" y="3829" width="0.0101%" height="15" fill="rgb(250,229,37)" fg:x="141" fg:w="3"/><text x="0.5633%" y="3839.50"></text></g><g><title>impl_serde::serialize::serialize_raw (3 samples, 0.01%)</title><rect x="0.4834%" y="3845" width="0.0101%" height="15" fill="rgb(206,174,23)" fg:x="144" fg:w="3"/><text x="0.5734%" y="3855.50"></text></g><g><title>impl_serde::serialize::to_hex_raw (3 samples, 0.01%)</title><rect x="0.4834%" y="3829" width="0.0101%" height="15" fill="rgb(211,33,43)" fg:x="144" fg:w="3"/><text x="0.5734%" y="3839.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9 samples, 0.03%)</title><rect x="0.5035%" y="3829" width="0.0302%" height="15" fill="rgb(245,58,50)" fg:x="150" fg:w="9"/><text x="0.5935%" y="3839.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4 samples, 0.01%)</title><rect x="0.5337%" y="3829" width="0.0134%" height="15" fill="rgb(244,68,36)" fg:x="159" fg:w="4"/><text x="0.6237%" y="3839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.02%)</title><rect x="0.5505%" y="3829" width="0.0235%" height="15" fill="rgb(232,229,15)" fg:x="164" fg:w="7"/><text x="0.6405%" y="3839.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="0.5740%" y="3813" width="0.0134%" height="15" fill="rgb(254,30,23)" fg:x="171" fg:w="4"/><text x="0.6640%" y="3823.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.11%)</title><rect x="0.5740%" y="3829" width="0.1108%" height="15" fill="rgb(235,160,14)" fg:x="171" fg:w="33"/><text x="0.6640%" y="3839.50"></text></g><g><title>_platform_memmove (29 samples, 0.10%)</title><rect x="0.5874%" y="3813" width="0.0973%" height="15" fill="rgb(212,155,44)" fg:x="175" fg:w="29"/><text x="0.6774%" y="3823.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (96 samples, 0.32%)</title><rect x="0.4632%" y="3861" width="0.3222%" height="15" fill="rgb(226,2,50)" fg:x="138" fg:w="96"/><text x="0.5532%" y="3871.50"></text></g><g><title>serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (86 samples, 0.29%)</title><rect x="0.4968%" y="3845" width="0.2887%" height="15" fill="rgb(234,177,6)" fg:x="148" fg:w="86"/><text x="0.5868%" y="3855.50"></text></g><g><title>itoa::_&lt;impl itoa::private::Sealed for u8&gt;::write (30 samples, 0.10%)</title><rect x="0.6847%" y="3829" width="0.1007%" height="15" fill="rgb(217,24,9)" fg:x="204" fg:w="30"/><text x="0.7748%" y="3839.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_some (97 samples, 0.33%)</title><rect x="0.4632%" y="3877" width="0.3256%" height="15" fill="rgb(220,13,46)" fg:x="138" fg:w="97"/><text x="0.5532%" y="3887.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="0.7922%" y="3861" width="0.0101%" height="15" fill="rgb(239,221,27)" fg:x="236" fg:w="3"/><text x="0.8822%" y="3871.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="0.7922%" y="3845" width="0.0101%" height="15" fill="rgb(222,198,25)" fg:x="236" fg:w="3"/><text x="0.8822%" y="3855.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (8 samples, 0.03%)</title><rect x="0.7888%" y="3877" width="0.0269%" height="15" fill="rgb(211,99,13)" fg:x="235" fg:w="8"/><text x="0.8788%" y="3887.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (4 samples, 0.01%)</title><rect x="0.8022%" y="3861" width="0.0134%" height="15" fill="rgb(232,111,31)" fg:x="239" fg:w="4"/><text x="0.8922%" y="3871.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.01%)</title><rect x="0.8157%" y="3877" width="0.0101%" height="15" fill="rgb(245,82,37)" fg:x="243" fg:w="3"/><text x="0.9057%" y="3887.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.01%)</title><rect x="0.8157%" y="3861" width="0.0101%" height="15" fill="rgb(227,149,46)" fg:x="243" fg:w="3"/><text x="0.9057%" y="3871.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (219 samples, 0.74%)</title><rect x="0.0940%" y="3909" width="0.7351%" height="15" fill="rgb(218,36,50)" fg:x="28" fg:w="219"/><text x="0.1840%" y="3919.50">&lt;..</text></g><g><title>zksync_types::l2::_::_&lt;impl serde::ser::Serialize for zksync_types::l2::L2TxCommonData&gt;::serialize (110 samples, 0.37%)</title><rect x="0.4599%" y="3893" width="0.3692%" height="15" fill="rgb(226,80,48)" fg:x="137" fg:w="110"/><text x="0.5499%" y="3903.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.03%)</title><rect x="0.8291%" y="3877" width="0.0302%" height="15" fill="rgb(238,224,15)" fg:x="247" fg:w="9"/><text x="0.9191%" y="3887.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (15 samples, 0.05%)</title><rect x="0.8291%" y="3893" width="0.0503%" height="15" fill="rgb(241,136,10)" fg:x="247" fg:w="15"/><text x="0.9191%" y="3903.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (6 samples, 0.02%)</title><rect x="0.8593%" y="3877" width="0.0201%" height="15" fill="rgb(208,32,45)" fg:x="256" fg:w="6"/><text x="0.9493%" y="3887.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.01%)</title><rect x="0.8794%" y="3893" width="0.0134%" height="15" fill="rgb(207,135,9)" fg:x="262" fg:w="4"/><text x="0.9694%" y="3903.50"></text></g><g><title>_nanov2_free (3 samples, 0.01%)</title><rect x="0.8828%" y="3877" width="0.0101%" height="15" fill="rgb(206,86,44)" fg:x="263" fg:w="3"/><text x="0.9728%" y="3887.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.01%)</title><rect x="0.8996%" y="3829" width="0.0101%" height="15" fill="rgb(245,177,15)" fg:x="268" fg:w="3"/><text x="0.9896%" y="3839.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6 samples, 0.02%)</title><rect x="0.8929%" y="3877" width="0.0201%" height="15" fill="rgb(206,64,50)" fg:x="266" fg:w="6"/><text x="0.9829%" y="3887.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="0.8929%" y="3861" width="0.0201%" height="15" fill="rgb(234,36,40)" fg:x="266" fg:w="6"/><text x="0.9829%" y="3871.50"></text></g><g><title>_realloc (6 samples, 0.02%)</title><rect x="0.8929%" y="3845" width="0.0201%" height="15" fill="rgb(213,64,8)" fg:x="266" fg:w="6"/><text x="0.9829%" y="3855.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (7 samples, 0.02%)</title><rect x="0.8929%" y="3893" width="0.0235%" height="15" fill="rgb(210,75,36)" fg:x="266" fg:w="7"/><text x="0.9829%" y="3903.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9 samples, 0.03%)</title><rect x="0.9231%" y="3877" width="0.0302%" height="15" fill="rgb(229,88,21)" fg:x="275" fg:w="9"/><text x="1.0131%" y="3887.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_some (85 samples, 0.29%)</title><rect x="0.8291%" y="3909" width="0.2853%" height="15" fill="rgb(252,204,47)" fg:x="247" fg:w="85"/><text x="0.9191%" y="3919.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (58 samples, 0.19%)</title><rect x="0.9197%" y="3893" width="0.1947%" height="15" fill="rgb(208,77,27)" fg:x="274" fg:w="58"/><text x="1.0097%" y="3903.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (45 samples, 0.15%)</title><rect x="0.9633%" y="3877" width="0.1510%" height="15" fill="rgb(221,76,26)" fg:x="287" fg:w="45"/><text x="1.0534%" y="3887.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.12%)</title><rect x="0.9969%" y="3861" width="0.1175%" height="15" fill="rgb(225,139,18)" fg:x="297" fg:w="35"/><text x="1.0869%" y="3871.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="1.1144%" y="3893" width="0.0101%" height="15" fill="rgb(230,137,11)" fg:x="332" fg:w="3"/><text x="1.2044%" y="3903.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="1.1312%" y="3893" width="0.0101%" height="15" fill="rgb(212,28,1)" fg:x="337" fg:w="3"/><text x="1.2212%" y="3903.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (10 samples, 0.03%)</title><rect x="1.1144%" y="3909" width="0.0336%" height="15" fill="rgb(248,164,17)" fg:x="332" fg:w="10"/><text x="1.2044%" y="3919.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.01%)</title><rect x="1.1513%" y="3877" width="0.0134%" height="15" fill="rgb(222,171,42)" fg:x="343" fg:w="4"/><text x="1.2413%" y="3887.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="1.1647%" y="3877" width="0.0101%" height="15" fill="rgb(243,84,45)" fg:x="347" fg:w="3"/><text x="1.2548%" y="3887.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (13 samples, 0.04%)</title><rect x="1.1513%" y="3893" width="0.0436%" height="15" fill="rgb(252,49,23)" fg:x="343" fg:w="13"/><text x="1.2413%" y="3903.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (3 samples, 0.01%)</title><rect x="1.1849%" y="3877" width="0.0101%" height="15" fill="rgb(215,19,7)" fg:x="353" fg:w="3"/><text x="1.2749%" y="3887.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (3 samples, 0.01%)</title><rect x="1.1950%" y="3893" width="0.0101%" height="15" fill="rgb(238,81,41)" fg:x="356" fg:w="3"/><text x="1.2850%" y="3903.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.01%)</title><rect x="1.1950%" y="3877" width="0.0101%" height="15" fill="rgb(210,199,37)" fg:x="356" fg:w="3"/><text x="1.2850%" y="3887.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="1.1950%" y="3861" width="0.0101%" height="15" fill="rgb(244,192,49)" fg:x="356" fg:w="3"/><text x="1.2850%" y="3871.50"></text></g><g><title>primitive_types::serde::_&lt;impl serde::ser::Serialize for primitive_types::U256&gt;::serialize (4 samples, 0.01%)</title><rect x="1.2184%" y="3893" width="0.0134%" height="15" fill="rgb(226,211,11)" fg:x="363" fg:w="4"/><text x="1.3085%" y="3903.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (25 samples, 0.08%)</title><rect x="1.1513%" y="3909" width="0.0839%" height="15" fill="rgb(236,162,54)" fg:x="343" fg:w="25"/><text x="1.2413%" y="3919.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (344 samples, 1.15%)</title><rect x="0.0906%" y="3925" width="1.1547%" height="15" fill="rgb(220,229,9)" fg:x="27" fg:w="344"/><text x="0.1806%" y="3935.50">&lt;se..</text></g><g><title>serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (346 samples, 1.16%)</title><rect x="0.0873%" y="3941" width="1.1614%" height="15" fill="rgb(250,87,22)" fg:x="26" fg:w="346"/><text x="0.1773%" y="3951.50">ser..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (353 samples, 1.18%)</title><rect x="0.0738%" y="3957" width="1.1849%" height="15" fill="rgb(239,43,17)" fg:x="22" fg:w="353"/><text x="0.1639%" y="3967.50">&lt;se..</text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="1.2722%" y="3957" width="0.0101%" height="15" fill="rgb(231,177,25)" fg:x="379" fg:w="3"/><text x="1.3622%" y="3967.50"></text></g><g><title>free_medium (3 samples, 0.01%)</title><rect x="1.2722%" y="3941" width="0.0101%" height="15" fill="rgb(219,179,1)" fg:x="379" fg:w="3"/><text x="1.3622%" y="3951.50"></text></g><g><title>mvm_madvise_free_plat (3 samples, 0.01%)</title><rect x="1.2722%" y="3925" width="0.0101%" height="15" fill="rgb(238,219,53)" fg:x="379" fg:w="3"/><text x="1.3622%" y="3935.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="1.2722%" y="3909" width="0.0101%" height="15" fill="rgb(232,167,36)" fg:x="379" fg:w="3"/><text x="1.3622%" y="3919.50"></text></g><g><title>madvise (3 samples, 0.01%)</title><rect x="1.2722%" y="3893" width="0.0101%" height="15" fill="rgb(244,19,51)" fg:x="379" fg:w="3"/><text x="1.3622%" y="3903.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="1.2822%" y="3957" width="0.0201%" height="15" fill="rgb(224,6,22)" fg:x="382" fg:w="6"/><text x="1.3722%" y="3967.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="1.2822%" y="3941" width="0.0201%" height="15" fill="rgb(224,145,5)" fg:x="382" fg:w="6"/><text x="1.3722%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;zksync_types::Transaction&gt; (5 samples, 0.02%)</title><rect x="1.3124%" y="3957" width="0.0168%" height="15" fill="rgb(234,130,49)" fg:x="391" fg:w="5"/><text x="1.4024%" y="3967.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="1.3158%" y="3941" width="0.0134%" height="15" fill="rgb(254,6,2)" fg:x="392" fg:w="4"/><text x="1.4058%" y="3951.50"></text></g><g><title>free_medium (4 samples, 0.01%)</title><rect x="1.3292%" y="3957" width="0.0134%" height="15" fill="rgb(208,96,46)" fg:x="396" fg:w="4"/><text x="1.4192%" y="3967.50"></text></g><g><title>mvm_madvise_free_plat (4 samples, 0.01%)</title><rect x="1.3292%" y="3941" width="0.0134%" height="15" fill="rgb(239,3,39)" fg:x="396" fg:w="4"/><text x="1.4192%" y="3951.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="1.3292%" y="3925" width="0.0134%" height="15" fill="rgb(233,210,1)" fg:x="396" fg:w="4"/><text x="1.4192%" y="3935.50"></text></g><g><title>madvise (4 samples, 0.01%)</title><rect x="1.3292%" y="3909" width="0.0134%" height="15" fill="rgb(244,137,37)" fg:x="396" fg:w="4"/><text x="1.4192%" y="3919.50"></text></g><g><title>_platform_memmove (14 samples, 0.05%)</title><rect x="1.3494%" y="3877" width="0.0470%" height="15" fill="rgb(240,136,2)" fg:x="402" fg:w="14"/><text x="1.4394%" y="3887.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append(char const*, unsigned long) (15 samples, 0.05%)</title><rect x="1.3494%" y="3909" width="0.0503%" height="15" fill="rgb(239,18,37)" fg:x="402" fg:w="15"/><text x="1.4394%" y="3919.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (15 samples, 0.05%)</title><rect x="1.3494%" y="3893" width="0.0503%" height="15" fill="rgb(218,185,22)" fg:x="402" fg:w="15"/><text x="1.4394%" y="3903.50"></text></g><g><title>rocksdb_writebatch_put_cf (16 samples, 0.05%)</title><rect x="1.3494%" y="3957" width="0.0537%" height="15" fill="rgb(225,218,4)" fg:x="402" fg:w="16"/><text x="1.4394%" y="3967.50"></text></g><g><title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (16 samples, 0.05%)</title><rect x="1.3494%" y="3941" width="0.0537%" height="15" fill="rgb(230,182,32)" fg:x="402" fg:w="16"/><text x="1.4394%" y="3951.50"></text></g><g><title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (16 samples, 0.05%)</title><rect x="1.3494%" y="3925" width="0.0537%" height="15" fill="rgb(242,56,43)" fg:x="402" fg:w="16"/><text x="1.4394%" y="3935.50"></text></g><g><title>tracing_core::event::Event::dispatch (3 samples, 0.01%)</title><rect x="1.4031%" y="3957" width="0.0101%" height="15" fill="rgb(233,99,24)" fg:x="418" fg:w="3"/><text x="1.4931%" y="3967.50"></text></g><g><title>zksync_os_sequencer::storage::block_replay_storage::BlockReplayStorage::latest_block (5 samples, 0.02%)</title><rect x="1.4131%" y="3957" width="0.0168%" height="15" fill="rgb(234,209,42)" fg:x="421" fg:w="5"/><text x="1.5031%" y="3967.50"></text></g><g><title>rocksdb::db::DBCommon&lt;T,D&gt;::get_pinned_cf_opt (3 samples, 0.01%)</title><rect x="1.4198%" y="3941" width="0.0101%" height="15" fill="rgb(227,7,12)" fg:x="423" fg:w="3"/><text x="1.5099%" y="3951.50"></text></g><g><title>rocksdb_get_pinned_cf (3 samples, 0.01%)</title><rect x="1.4198%" y="3925" width="0.0101%" height="15" fill="rgb(245,203,43)" fg:x="423" fg:w="3"/><text x="1.5099%" y="3935.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*) (3 samples, 0.01%)</title><rect x="1.4198%" y="3909" width="0.0101%" height="15" fill="rgb(238,205,33)" fg:x="423" fg:w="3"/><text x="1.5099%" y="3919.50"></text></g><g><title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (3 samples, 0.01%)</title><rect x="1.4198%" y="3893" width="0.0101%" height="15" fill="rgb(231,56,7)" fg:x="423" fg:w="3"/><text x="1.5099%" y="3903.50"></text></g><g><title>&lt;rocksdb::write_batch::WriteBatchWithTransaction&lt;_&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="1.4299%" y="3941" width="0.0235%" height="15" fill="rgb(244,186,29)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3951.50"></text></g><g><title>rocksdb_writebatch_destroy (7 samples, 0.02%)</title><rect x="1.4299%" y="3925" width="0.0235%" height="15" fill="rgb(234,111,31)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3935.50"></text></g><g><title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.02%)</title><rect x="1.4299%" y="3909" width="0.0235%" height="15" fill="rgb(241,149,10)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3919.50"></text></g><g><title>free_medium (7 samples, 0.02%)</title><rect x="1.4299%" y="3893" width="0.0235%" height="15" fill="rgb(249,206,44)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3903.50"></text></g><g><title>mvm_madvise_free_plat (7 samples, 0.02%)</title><rect x="1.4299%" y="3877" width="0.0235%" height="15" fill="rgb(251,153,30)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3887.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.02%)</title><rect x="1.4299%" y="3861" width="0.0235%" height="15" fill="rgb(239,152,38)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3871.50"></text></g><g><title>madvise (7 samples, 0.02%)</title><rect x="1.4299%" y="3845" width="0.0235%" height="15" fill="rgb(249,139,47)" fg:x="426" fg:w="7"/><text x="1.5199%" y="3855.50"></text></g><g><title>rocksdb::WritableFileWriter::Flush(rocksdb::Env::IOPriority) (11 samples, 0.04%)</title><rect x="1.4601%" y="3829" width="0.0369%" height="15" fill="rgb(244,64,35)" fg:x="435" fg:w="11"/><text x="1.5501%" y="3839.50"></text></g><g><title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long, rocksdb::Env::IOPriority) (11 samples, 0.04%)</title><rect x="1.4601%" y="3813" width="0.0369%" height="15" fill="rgb(216,46,15)" fg:x="435" fg:w="11"/><text x="1.5501%" y="3823.50"></text></g><g><title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (11 samples, 0.04%)</title><rect x="1.4601%" y="3797" width="0.0369%" height="15" fill="rgb(250,74,19)" fg:x="435" fg:w="11"/><text x="1.5501%" y="3807.50"></text></g><g><title>write (11 samples, 0.04%)</title><rect x="1.4601%" y="3781" width="0.0369%" height="15" fill="rgb(249,42,33)" fg:x="435" fg:w="11"/><text x="1.5501%" y="3791.50"></text></g><g><title>crc32c_arm64(unsigned int, unsigned char const*, unsigned long) (5 samples, 0.02%)</title><rect x="1.4970%" y="3813" width="0.0168%" height="15" fill="rgb(242,149,17)" fg:x="446" fg:w="5"/><text x="1.5871%" y="3823.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="1.5172%" y="3797" width="0.0101%" height="15" fill="rgb(244,29,21)" fg:x="452" fg:w="3"/><text x="1.6072%" y="3807.50"></text></g><g><title>rocksdb::WritableFileWriter::Flush(rocksdb::Env::IOPriority) (26 samples, 0.09%)</title><rect x="1.5273%" y="3797" width="0.0873%" height="15" fill="rgb(220,130,37)" fg:x="455" fg:w="26"/><text x="1.6173%" y="3807.50"></text></g><g><title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long, rocksdb::Env::IOPriority) (26 samples, 0.09%)</title><rect x="1.5273%" y="3781" width="0.0873%" height="15" fill="rgb(211,67,2)" fg:x="455" fg:w="26"/><text x="1.6173%" y="3791.50"></text></g><g><title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (26 samples, 0.09%)</title><rect x="1.5273%" y="3765" width="0.0873%" height="15" fill="rgb(235,68,52)" fg:x="455" fg:w="26"/><text x="1.6173%" y="3775.50"></text></g><g><title>write (26 samples, 0.09%)</title><rect x="1.5273%" y="3749" width="0.0873%" height="15" fill="rgb(246,142,3)" fg:x="455" fg:w="26"/><text x="1.6173%" y="3759.50"></text></g><g><title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long, rocksdb::DBImpl::LogFileNumberSize&amp;) (47 samples, 0.16%)</title><rect x="1.4601%" y="3877" width="0.1578%" height="15" fill="rgb(241,25,7)" fg:x="435" fg:w="47"/><text x="1.5501%" y="3887.50"></text></g><g><title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*, rocksdb::Env::IOPriority, rocksdb::DBImpl::LogFileNumberSize&amp;) (47 samples, 0.16%)</title><rect x="1.4601%" y="3861" width="0.1578%" height="15" fill="rgb(242,119,39)" fg:x="435" fg:w="47"/><text x="1.5501%" y="3871.50"></text></g><g><title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;, rocksdb::Env::IOPriority) (47 samples, 0.16%)</title><rect x="1.4601%" y="3845" width="0.1578%" height="15" fill="rgb(241,98,45)" fg:x="435" fg:w="47"/><text x="1.5501%" y="3855.50"></text></g><g><title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long, rocksdb::Env::IOPriority) (36 samples, 0.12%)</title><rect x="1.4970%" y="3829" width="0.1208%" height="15" fill="rgb(254,28,30)" fg:x="446" fg:w="36"/><text x="1.5871%" y="3839.50"></text></g><g><title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;, unsigned int, rocksdb::Env::IOPriority) (31 samples, 0.10%)</title><rect x="1.5138%" y="3813" width="0.1041%" height="15" fill="rgb(241,142,54)" fg:x="451" fg:w="31"/><text x="1.6038%" y="3823.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (484 samples, 1.62%)</title><rect x="0.0403%" y="4005" width="1.6246%" height="15" fill="rgb(222,85,15)" fg:x="12" fg:w="484"/><text x="0.1303%" y="4015.50">&lt;core..</text></g><g><title>zksync_os_sequencer::main::_{{closure}} (484 samples, 1.62%)</title><rect x="0.0403%" y="3989" width="1.6246%" height="15" fill="rgb(210,85,47)" fg:x="12" fg:w="484"/><text x="0.1303%" y="3999.50">zksyn..</text></g><g><title>zksync_os_sequencer::main::_{{closure}}::_{{closure}} (479 samples, 1.61%)</title><rect x="0.0571%" y="3973" width="1.6078%" height="15" fill="rgb(224,206,25)" fg:x="17" fg:w="479"/><text x="0.1471%" y="3983.50">zksyn..</text></g><g><title>zksync_storage::db::RocksDB&lt;CF&gt;::write (70 samples, 0.23%)</title><rect x="1.4299%" y="3957" width="0.2350%" height="15" fill="rgb(243,201,19)" fg:x="426" fg:w="70"/><text x="1.5199%" y="3967.50"></text></g><g><title>rocksdb::db::DBCommon&lt;T,rocksdb::db::DBWithThreadModeInner&gt;::write_opt (63 samples, 0.21%)</title><rect x="1.4534%" y="3941" width="0.2115%" height="15" fill="rgb(236,59,4)" fg:x="433" fg:w="63"/><text x="1.5434%" y="3951.50"></text></g><g><title>rocksdb_write (63 samples, 0.21%)</title><rect x="1.4534%" y="3925" width="0.2115%" height="15" fill="rgb(254,179,45)" fg:x="433" fg:w="63"/><text x="1.5434%" y="3935.50"></text></g><g><title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (63 samples, 0.21%)</title><rect x="1.4534%" y="3909" width="0.2115%" height="15" fill="rgb(226,14,10)" fg:x="433" fg:w="63"/><text x="1.5434%" y="3919.50"></text></g><g><title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*, rocksdb::PostMemTableCallback*) (63 samples, 0.21%)</title><rect x="1.4534%" y="3893" width="0.2115%" height="15" fill="rgb(244,27,41)" fg:x="433" fg:w="63"/><text x="1.5434%" y="3903.50"></text></g><g><title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (14 samples, 0.05%)</title><rect x="1.6179%" y="3877" width="0.0470%" height="15" fill="rgb(235,35,32)" fg:x="482" fg:w="14"/><text x="1.7079%" y="3887.50"></text></g><g><title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (14 samples, 0.05%)</title><rect x="1.6179%" y="3861" width="0.0470%" height="15" fill="rgb(218,68,31)" fg:x="482" fg:w="14"/><text x="1.7079%" y="3871.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (14 samples, 0.05%)</title><rect x="1.6179%" y="3845" width="0.0470%" height="15" fill="rgb(207,120,37)" fg:x="482" fg:w="14"/><text x="1.7079%" y="3855.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType, rocksdb::ProtectionInfoKVOS&lt;unsigned long long&gt; const*) (14 samples, 0.05%)</title><rect x="1.6179%" y="3829" width="0.0470%" height="15" fill="rgb(227,98,0)" fg:x="482" fg:w="14"/><text x="1.7079%" y="3839.50"></text></g><g><title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ProtectionInfoKVOS&lt;unsigned long long&gt; const*, bool, rocksdb::MemTablePostProcessInfo*, void**) (14 samples, 0.05%)</title><rect x="1.6179%" y="3813" width="0.0470%" height="15" fill="rgb(207,7,3)" fg:x="482" fg:w="14"/><text x="1.7079%" y="3823.50"></text></g><g><title>_platform_memmove (13 samples, 0.04%)</title><rect x="1.6212%" y="3797" width="0.0436%" height="15" fill="rgb(206,98,19)" fg:x="483" fg:w="13"/><text x="1.7112%" y="3807.50"></text></g><g><title>start (495 samples, 1.66%)</title><rect x="0.0134%" y="4085" width="1.6615%" height="15" fill="rgb(217,5,26)" fg:x="4" fg:w="495"/><text x="0.1034%" y="4095.50">start</text></g><g><title>main (487 samples, 1.63%)</title><rect x="0.0403%" y="4069" width="1.6347%" height="15" fill="rgb(235,190,38)" fg:x="12" fg:w="487"/><text x="0.1303%" y="4079.50">main</text></g><g><title>std::rt::lang_start_internal (487 samples, 1.63%)</title><rect x="0.0403%" y="4053" width="1.6347%" height="15" fill="rgb(247,86,24)" fg:x="12" fg:w="487"/><text x="0.1303%" y="4063.50">std::..</text></g><g><title>std::rt::lang_start::_{{closure}} (487 samples, 1.63%)</title><rect x="0.0403%" y="4037" width="1.6347%" height="15" fill="rgb(205,101,16)" fg:x="12" fg:w="487"/><text x="0.1303%" y="4047.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once (487 samples, 1.63%)</title><rect x="0.0403%" y="4021" width="1.6347%" height="15" fill="rgb(246,168,33)" fg:x="12" fg:w="487"/><text x="0.1303%" y="4031.50">core:..</text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (8 samples, 0.03%)</title><rect x="2.2355%" y="3877" width="0.0269%" height="15" fill="rgb(231,114,1)" fg:x="666" fg:w="8"/><text x="2.3255%" y="3887.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (5 samples, 0.02%)</title><rect x="2.2456%" y="3861" width="0.0168%" height="15" fill="rgb(207,184,53)" fg:x="669" fg:w="5"/><text x="2.3356%" y="3871.50"></text></g><g><title>__floatuntidf (4 samples, 0.01%)</title><rect x="2.2657%" y="3877" width="0.0134%" height="15" fill="rgb(224,95,51)" fg:x="675" fg:w="4"/><text x="2.3557%" y="3887.50"></text></g><g><title>pow (9 samples, 0.03%)</title><rect x="2.2825%" y="3877" width="0.0302%" height="15" fill="rgb(212,188,45)" fg:x="680" fg:w="9"/><text x="2.3725%" y="3887.50"></text></g><g><title>mach_absolute_time (101 samples, 0.34%)</title><rect x="2.3698%" y="3829" width="0.3390%" height="15" fill="rgb(223,154,38)" fg:x="706" fg:w="101"/><text x="2.4598%" y="3839.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (122 samples, 0.41%)</title><rect x="2.3127%" y="3877" width="0.4095%" height="15" fill="rgb(251,22,52)" fg:x="689" fg:w="122"/><text x="2.4027%" y="3887.50"></text></g><g><title>clock_gettime (119 samples, 0.40%)</title><rect x="2.3228%" y="3861" width="0.3994%" height="15" fill="rgb(229,209,22)" fg:x="692" fg:w="119"/><text x="2.4128%" y="3871.50"></text></g><g><title>clock_gettime_nsec_np (116 samples, 0.39%)</title><rect x="2.3328%" y="3845" width="0.3894%" height="15" fill="rgb(234,138,34)" fg:x="695" fg:w="116"/><text x="2.4229%" y="3855.50"></text></g><g><title>mach_timebase_info (4 samples, 0.01%)</title><rect x="2.7088%" y="3829" width="0.0134%" height="15" fill="rgb(212,95,11)" fg:x="807" fg:w="4"/><text x="2.7988%" y="3839.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (9 samples, 0.03%)</title><rect x="2.7222%" y="3877" width="0.0302%" height="15" fill="rgb(240,179,47)" fg:x="811" fg:w="9"/><text x="2.8122%" y="3887.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (8 samples, 0.03%)</title><rect x="2.7524%" y="3877" width="0.0269%" height="15" fill="rgb(240,163,11)" fg:x="820" fg:w="8"/><text x="2.8424%" y="3887.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (49 samples, 0.16%)</title><rect x="2.7893%" y="3877" width="0.1645%" height="15" fill="rgb(236,37,12)" fg:x="831" fg:w="49"/><text x="2.8793%" y="3887.50"></text></g><g><title>pthread_cond_signal (52 samples, 0.17%)</title><rect x="3.0780%" y="3845" width="0.1745%" height="15" fill="rgb(232,164,16)" fg:x="917" fg:w="52"/><text x="3.1680%" y="3855.50"></text></g><g><title>__psynch_cvsignal (52 samples, 0.17%)</title><rect x="3.0780%" y="3829" width="0.1745%" height="15" fill="rgb(244,205,15)" fg:x="917" fg:w="52"/><text x="3.1680%" y="3839.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (58 samples, 0.19%)</title><rect x="3.0713%" y="3861" width="0.1947%" height="15" fill="rgb(223,117,47)" fg:x="915" fg:w="58"/><text x="3.1613%" y="3871.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="3.2526%" y="3845" width="0.0134%" height="15" fill="rgb(244,107,35)" fg:x="969" fg:w="4"/><text x="3.3426%" y="3855.50"></text></g><g><title>clock_gettime (3 samples, 0.01%)</title><rect x="3.2559%" y="3829" width="0.0101%" height="15" fill="rgb(205,140,8)" fg:x="970" fg:w="3"/><text x="3.3459%" y="3839.50"></text></g><g><title>clock_gettime_nsec_np (3 samples, 0.01%)</title><rect x="3.2559%" y="3813" width="0.0101%" height="15" fill="rgb(228,84,46)" fg:x="970" fg:w="3"/><text x="3.3459%" y="3823.50"></text></g><g><title>mach_absolute_time (3 samples, 0.01%)</title><rect x="3.2559%" y="3797" width="0.0101%" height="15" fill="rgb(254,188,9)" fg:x="970" fg:w="3"/><text x="3.3459%" y="3807.50"></text></g><g><title>DYLD-STUB$$__psynch_cvwait (3 samples, 0.01%)</title><rect x="3.8332%" y="3813" width="0.0101%" height="15" fill="rgb(206,112,54)" fg:x="1142" fg:w="3"/><text x="3.9233%" y="3823.50"></text></g><g><title>__psynch_cvwait (1,559 samples, 5.23%)</title><rect x="3.8433%" y="3813" width="5.2329%" height="15" fill="rgb(216,84,49)" fg:x="1145" fg:w="1559"/><text x="3.9333%" y="3823.50">__psynch_cvwait</text></g><g><title>_pthread_mutex_droplock (3 samples, 0.01%)</title><rect x="9.0763%" y="3813" width="0.0101%" height="15" fill="rgb(214,194,35)" fg:x="2704" fg:w="3"/><text x="9.1663%" y="3823.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (22 samples, 0.07%)</title><rect x="9.0863%" y="3813" width="0.0738%" height="15" fill="rgb(249,28,3)" fg:x="2707" fg:w="22"/><text x="9.1763%" y="3823.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (22 samples, 0.07%)</title><rect x="9.0863%" y="3797" width="0.0738%" height="15" fill="rgb(222,56,52)" fg:x="2707" fg:w="22"/><text x="9.1763%" y="3807.50"></text></g><g><title>__psynch_mutexwait (22 samples, 0.07%)</title><rect x="9.0863%" y="3781" width="0.0738%" height="15" fill="rgb(245,217,50)" fg:x="2707" fg:w="22"/><text x="9.1763%" y="3791.50"></text></g><g><title>pthread_mutex_lock (5 samples, 0.02%)</title><rect x="9.1602%" y="3813" width="0.0168%" height="15" fill="rgb(213,201,24)" fg:x="2729" fg:w="5"/><text x="9.2502%" y="3823.50"></text></g><g><title>_pthread_cond_wait (1,623 samples, 5.45%)</title><rect x="3.7560%" y="3829" width="5.4478%" height="15" fill="rgb(248,116,28)" fg:x="1119" fg:w="1623"/><text x="3.8461%" y="3839.50">_pthread_cond_wait</text></g><g><title>pthread_testcancel (8 samples, 0.03%)</title><rect x="9.1770%" y="3813" width="0.0269%" height="15" fill="rgb(219,72,43)" fg:x="2734" fg:w="8"/><text x="9.2670%" y="3823.50"></text></g><g><title>pthread_mutex_lock (3 samples, 0.01%)</title><rect x="9.2139%" y="3829" width="0.0101%" height="15" fill="rgb(209,138,14)" fg:x="2745" fg:w="3"/><text x="9.3039%" y="3839.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1,685 samples, 5.66%)</title><rect x="3.5849%" y="3845" width="5.6559%" height="15" fill="rgb(222,18,33)" fg:x="1068" fg:w="1685"/><text x="3.6749%" y="3855.50">parking_lot::condvar::Co..</text></g><g><title>pthread_mutex_unlock (5 samples, 0.02%)</title><rect x="9.2240%" y="3829" width="0.0168%" height="15" fill="rgb(213,199,7)" fg:x="2748" fg:w="5"/><text x="9.3140%" y="3839.50"></text></g><g><title>mach_absolute_time (12 samples, 0.04%)</title><rect x="9.3314%" y="3781" width="0.0403%" height="15" fill="rgb(250,110,10)" fg:x="2780" fg:w="12"/><text x="9.4214%" y="3791.50"></text></g><g><title>clock_gettime_nsec_np (14 samples, 0.05%)</title><rect x="9.3314%" y="3797" width="0.0470%" height="15" fill="rgb(248,123,6)" fg:x="2780" fg:w="14"/><text x="9.4214%" y="3807.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (16 samples, 0.05%)</title><rect x="9.3280%" y="3829" width="0.0537%" height="15" fill="rgb(206,91,31)" fg:x="2779" fg:w="16"/><text x="9.4180%" y="3839.50"></text></g><g><title>clock_gettime (16 samples, 0.05%)</title><rect x="9.3280%" y="3813" width="0.0537%" height="15" fill="rgb(211,154,13)" fg:x="2779" fg:w="16"/><text x="9.4180%" y="3823.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (12 samples, 0.04%)</title><rect x="9.3884%" y="3829" width="0.0403%" height="15" fill="rgb(225,148,7)" fg:x="2797" fg:w="12"/><text x="9.4784%" y="3839.50"></text></g><g><title>mio::poll::Poll::poll (1,360 samples, 4.56%)</title><rect x="9.5428%" y="3813" width="4.5650%" height="15" fill="rgb(220,160,43)" fg:x="2843" fg:w="1360"/><text x="9.6328%" y="3823.50">mio::poll::Poll::po..</text></g><g><title>kevent (1,348 samples, 4.52%)</title><rect x="9.5831%" y="3797" width="4.5247%" height="15" fill="rgb(213,52,39)" fg:x="2855" fg:w="1348"/><text x="9.6731%" y="3807.50">kevent</text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="14.2287%" y="3765" width="0.0134%" height="15" fill="rgb(243,137,7)" fg:x="4239" fg:w="4"/><text x="14.3187%" y="3775.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (20 samples, 0.07%)</title><rect x="14.2421%" y="3765" width="0.0671%" height="15" fill="rgb(230,79,13)" fg:x="4243" fg:w="20"/><text x="14.3321%" y="3775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (7 samples, 0.02%)</title><rect x="14.2857%" y="3749" width="0.0235%" height="15" fill="rgb(247,105,23)" fg:x="4256" fg:w="7"/><text x="14.3757%" y="3759.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (34 samples, 0.11%)</title><rect x="14.2018%" y="3781" width="0.1141%" height="15" fill="rgb(223,179,41)" fg:x="4231" fg:w="34"/><text x="14.2918%" y="3791.50"></text></g><g><title>tokio::runtime::task::raw::schedule (3 samples, 0.01%)</title><rect x="14.3193%" y="3781" width="0.0101%" height="15" fill="rgb(218,9,34)" fg:x="4266" fg:w="3"/><text x="14.4093%" y="3791.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1,471 samples, 4.94%)</title><rect x="9.4287%" y="3829" width="4.9376%" height="15" fill="rgb(222,106,8)" fg:x="2809" fg:w="1471"/><text x="9.5187%" y="3839.50">tokio::runtime::io::d..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (77 samples, 0.26%)</title><rect x="14.1078%" y="3813" width="0.2585%" height="15" fill="rgb(211,220,0)" fg:x="4203" fg:w="77"/><text x="14.1978%" y="3823.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (50 samples, 0.17%)</title><rect x="14.1984%" y="3797" width="0.1678%" height="15" fill="rgb(229,52,16)" fg:x="4230" fg:w="50"/><text x="14.2885%" y="3807.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (11 samples, 0.04%)</title><rect x="14.3294%" y="3781" width="0.0369%" height="15" fill="rgb(212,155,18)" fg:x="4269" fg:w="11"/><text x="14.4194%" y="3791.50"></text></g><g><title>tokio::runtime::signal::Driver::process (12 samples, 0.04%)</title><rect x="14.3663%" y="3829" width="0.0403%" height="15" fill="rgb(242,21,14)" fg:x="4280" fg:w="12"/><text x="14.4563%" y="3839.50"></text></g><g><title>_tlv_get_addr (3 samples, 0.01%)</title><rect x="14.4401%" y="3813" width="0.0101%" height="15" fill="rgb(222,19,48)" fg:x="4302" fg:w="3"/><text x="14.5301%" y="3823.50"></text></g><g><title>DYLD-STUB$$clock_gettime (3 samples, 0.01%)</title><rect x="14.4636%" y="3797" width="0.0101%" height="15" fill="rgb(232,45,27)" fg:x="4309" fg:w="3"/><text x="14.5536%" y="3807.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (4 samples, 0.01%)</title><rect x="14.5173%" y="3765" width="0.0134%" height="15" fill="rgb(249,103,42)" fg:x="4325" fg:w="4"/><text x="14.6073%" y="3775.50"></text></g><g><title>mach_absolute_time (42 samples, 0.14%)</title><rect x="14.5307%" y="3765" width="0.1410%" height="15" fill="rgb(246,81,33)" fg:x="4329" fg:w="42"/><text x="14.6208%" y="3775.50"></text></g><g><title>clock_gettime_nsec_np (60 samples, 0.20%)</title><rect x="14.4838%" y="3781" width="0.2014%" height="15" fill="rgb(252,33,42)" fg:x="4315" fg:w="60"/><text x="14.5738%" y="3791.50"></text></g><g><title>mach_timebase_info (4 samples, 0.01%)</title><rect x="14.6717%" y="3765" width="0.0134%" height="15" fill="rgb(209,212,41)" fg:x="4371" fg:w="4"/><text x="14.7617%" y="3775.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (71 samples, 0.24%)</title><rect x="14.4502%" y="3813" width="0.2383%" height="15" fill="rgb(207,154,6)" fg:x="4305" fg:w="71"/><text x="14.5402%" y="3823.50"></text></g><g><title>clock_gettime (64 samples, 0.21%)</title><rect x="14.4737%" y="3797" width="0.2148%" height="15" fill="rgb(223,64,47)" fg:x="4312" fg:w="64"/><text x="14.5637%" y="3807.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.01%)</title><rect x="14.6952%" y="3813" width="0.0134%" height="15" fill="rgb(211,161,38)" fg:x="4378" fg:w="4"/><text x="14.7852%" y="3823.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (35 samples, 0.12%)</title><rect x="14.8396%" y="3797" width="0.1175%" height="15" fill="rgb(219,138,40)" fg:x="4421" fg:w="35"/><text x="14.9296%" y="3807.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (174 samples, 0.58%)</title><rect x="14.7086%" y="3813" width="0.5840%" height="15" fill="rgb(241,228,46)" fg:x="4382" fg:w="174"/><text x="14.7987%" y="3823.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (100 samples, 0.34%)</title><rect x="14.9570%" y="3797" width="0.3357%" height="15" fill="rgb(223,209,38)" fg:x="4456" fg:w="100"/><text x="15.0470%" y="3807.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (53 samples, 0.18%)</title><rect x="15.1148%" y="3781" width="0.1779%" height="15" fill="rgb(236,164,45)" fg:x="4503" fg:w="53"/><text x="15.2048%" y="3791.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process (282 samples, 0.95%)</title><rect x="14.4066%" y="3829" width="0.9466%" height="15" fill="rgb(231,15,5)" fg:x="4292" fg:w="282"/><text x="14.4966%" y="3839.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (18 samples, 0.06%)</title><rect x="15.2927%" y="3813" width="0.0604%" height="15" fill="rgb(252,35,15)" fg:x="4556" fg:w="18"/><text x="15.3827%" y="3823.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (3,641 samples, 12.22%)</title><rect x="3.2660%" y="3861" width="12.2214%" height="15" fill="rgb(248,181,18)" fg:x="973" fg:w="3641"/><text x="3.3560%" y="3871.50">tokio::runtime::scheduler::multi_thread::park::Parker::..</text></g><g><title>tokio::runtime::time::Driver::park_internal (1,856 samples, 6.23%)</title><rect x="9.2575%" y="3845" width="6.2299%" height="15" fill="rgb(233,39,42)" fg:x="2758" fg:w="1856"/><text x="9.3475%" y="3855.50">tokio::runtime::time::Drive..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (38 samples, 0.13%)</title><rect x="15.3598%" y="3829" width="0.1276%" height="15" fill="rgb(238,110,33)" fg:x="4576" fg:w="38"/><text x="15.4498%" y="3839.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (3 samples, 0.01%)</title><rect x="15.5109%" y="3845" width="0.0101%" height="15" fill="rgb(233,195,10)" fg:x="4621" fg:w="3"/><text x="15.6009%" y="3855.50"></text></g><g><title>mio::poll::Poll::poll (56 samples, 0.19%)</title><rect x="15.5243%" y="3829" width="0.1880%" height="15" fill="rgb(254,105,3)" fg:x="4625" fg:w="56"/><text x="15.6143%" y="3839.50"></text></g><g><title>kevent (56 samples, 0.19%)</title><rect x="15.5243%" y="3813" width="0.1880%" height="15" fill="rgb(221,225,9)" fg:x="4625" fg:w="56"/><text x="15.6143%" y="3823.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (60 samples, 0.20%)</title><rect x="15.5209%" y="3845" width="0.2014%" height="15" fill="rgb(224,227,45)" fg:x="4624" fg:w="60"/><text x="15.6110%" y="3855.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (3 samples, 0.01%)</title><rect x="15.7123%" y="3829" width="0.0101%" height="15" fill="rgb(229,198,43)" fg:x="4681" fg:w="3"/><text x="15.8023%" y="3839.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process (14 samples, 0.05%)</title><rect x="15.7257%" y="3845" width="0.0470%" height="15" fill="rgb(206,209,35)" fg:x="4685" fg:w="14"/><text x="15.8157%" y="3855.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (12 samples, 0.04%)</title><rect x="15.7324%" y="3829" width="0.0403%" height="15" fill="rgb(245,195,53)" fg:x="4687" fg:w="12"/><text x="15.8224%" y="3839.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (8 samples, 0.03%)</title><rect x="15.7458%" y="3813" width="0.0269%" height="15" fill="rgb(240,92,26)" fg:x="4691" fg:w="8"/><text x="15.8358%" y="3823.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3,822 samples, 12.83%)</title><rect x="2.9538%" y="3877" width="12.8289%" height="15" fill="rgb(207,40,23)" fg:x="880" fg:w="3822"/><text x="3.0438%" y="3887.50">tokio::runtime::scheduler::multi_thread::worker::Context::..</text></g><g><title>tokio::runtime::time::Driver::park_internal (87 samples, 0.29%)</title><rect x="15.4907%" y="3861" width="0.2920%" height="15" fill="rgb(223,111,35)" fg:x="4615" fg:w="87"/><text x="15.5807%" y="3871.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.01%)</title><rect x="15.7727%" y="3845" width="0.0101%" height="15" fill="rgb(229,147,28)" fg:x="4699" fg:w="3"/><text x="15.8627%" y="3855.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (49 samples, 0.16%)</title><rect x="15.8499%" y="3861" width="0.1645%" height="15" fill="rgb(211,29,28)" fg:x="4722" fg:w="49"/><text x="15.9399%" y="3871.50"></text></g><g><title>mio::waker::Waker::wake (49 samples, 0.16%)</title><rect x="15.8499%" y="3845" width="0.1645%" height="15" fill="rgb(228,72,33)" fg:x="4722" fg:w="49"/><text x="15.9399%" y="3855.50"></text></g><g><title>kevent (49 samples, 0.16%)</title><rect x="15.8499%" y="3829" width="0.1645%" height="15" fill="rgb(205,214,31)" fg:x="4722" fg:w="49"/><text x="15.9399%" y="3839.50"></text></g><g><title>_tlv_get_addr (14 samples, 0.05%)</title><rect x="16.0144%" y="3861" width="0.0470%" height="15" fill="rgb(224,111,15)" fg:x="4771" fg:w="14"/><text x="16.1044%" y="3871.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (12 samples, 0.04%)</title><rect x="16.1151%" y="3845" width="0.0403%" height="15" fill="rgb(253,21,26)" fg:x="4801" fg:w="12"/><text x="16.2051%" y="3855.50"></text></g><g><title>_pthread_mutex_firstfit_wake (12 samples, 0.04%)</title><rect x="16.1151%" y="3829" width="0.0403%" height="15" fill="rgb(245,139,43)" fg:x="4801" fg:w="12"/><text x="16.2051%" y="3839.50"></text></g><g><title>__psynch_mutexdrop (12 samples, 0.04%)</title><rect x="16.1151%" y="3813" width="0.0403%" height="15" fill="rgb(252,170,7)" fg:x="4801" fg:w="12"/><text x="16.2051%" y="3823.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (8 samples, 0.03%)</title><rect x="16.1553%" y="3845" width="0.0269%" height="15" fill="rgb(231,118,14)" fg:x="4813" fg:w="8"/><text x="16.2454%" y="3855.50"></text></g><g><title>__psynch_cvsignal (360 samples, 1.21%)</title><rect x="16.1923%" y="3829" width="1.2084%" height="15" fill="rgb(238,83,0)" fg:x="4824" fg:w="360"/><text x="16.2823%" y="3839.50">__p..</text></g><g><title>pthread_cond_signal (367 samples, 1.23%)</title><rect x="16.1822%" y="3845" width="1.2319%" height="15" fill="rgb(221,39,39)" fg:x="4821" fg:w="367"/><text x="16.2722%" y="3855.50">pth..</text></g><g><title>_pthread_cond_updateval (4 samples, 0.01%)</title><rect x="17.4006%" y="3829" width="0.0134%" height="15" fill="rgb(222,119,46)" fg:x="5184" fg:w="4"/><text x="17.4907%" y="3839.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (40 samples, 0.13%)</title><rect x="17.4208%" y="3845" width="0.1343%" height="15" fill="rgb(222,165,49)" fg:x="5190" fg:w="40"/><text x="17.5108%" y="3855.50"></text></g><g><title>clock_gettime (39 samples, 0.13%)</title><rect x="17.4241%" y="3829" width="0.1309%" height="15" fill="rgb(219,113,52)" fg:x="5191" fg:w="39"/><text x="17.5141%" y="3839.50"></text></g><g><title>clock_gettime_nsec_np (39 samples, 0.13%)</title><rect x="17.4241%" y="3813" width="0.1309%" height="15" fill="rgb(214,7,15)" fg:x="5191" fg:w="39"/><text x="17.5141%" y="3823.50"></text></g><g><title>mach_absolute_time (37 samples, 0.12%)</title><rect x="17.4309%" y="3797" width="0.1242%" height="15" fill="rgb(235,32,4)" fg:x="5193" fg:w="37"/><text x="17.5209%" y="3807.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (446 samples, 1.50%)</title><rect x="16.0614%" y="3861" width="1.4970%" height="15" fill="rgb(238,90,54)" fg:x="4785" fg:w="446"/><text x="16.1514%" y="3871.50">parki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (4 samples, 0.01%)</title><rect x="17.5618%" y="3861" width="0.0134%" height="15" fill="rgb(213,208,19)" fg:x="5232" fg:w="4"/><text x="17.6518%" y="3871.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (4 samples, 0.01%)</title><rect x="17.5785%" y="3861" width="0.0134%" height="15" fill="rgb(233,156,4)" fg:x="5237" fg:w="4"/><text x="17.6686%" y="3871.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="17.6591%" y="3829" width="0.0134%" height="15" fill="rgb(207,194,5)" fg:x="5261" fg:w="4"/><text x="17.7491%" y="3839.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (95 samples, 0.32%)</title><rect x="17.6893%" y="3813" width="0.3189%" height="15" fill="rgb(206,111,30)" fg:x="5270" fg:w="95"/><text x="17.7793%" y="3823.50"></text></g><g><title>mio::waker::Waker::wake (92 samples, 0.31%)</title><rect x="17.6994%" y="3797" width="0.3088%" height="15" fill="rgb(243,70,54)" fg:x="5273" fg:w="92"/><text x="17.7894%" y="3807.50"></text></g><g><title>kevent (91 samples, 0.31%)</title><rect x="17.7027%" y="3781" width="0.3055%" height="15" fill="rgb(242,28,8)" fg:x="5274" fg:w="91"/><text x="17.7927%" y="3791.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.02%)</title><rect x="18.0317%" y="3797" width="0.0168%" height="15" fill="rgb(219,106,18)" fg:x="5372" fg:w="5"/><text x="18.1217%" y="3807.50"></text></g><g><title>_pthread_mutex_firstfit_wake (5 samples, 0.02%)</title><rect x="18.0317%" y="3781" width="0.0168%" height="15" fill="rgb(244,222,10)" fg:x="5372" fg:w="5"/><text x="18.1217%" y="3791.50"></text></g><g><title>__psynch_mutexdrop (5 samples, 0.02%)</title><rect x="18.0317%" y="3765" width="0.0168%" height="15" fill="rgb(236,179,52)" fg:x="5372" fg:w="5"/><text x="18.1217%" y="3775.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (5 samples, 0.02%)</title><rect x="18.0485%" y="3797" width="0.0168%" height="15" fill="rgb(213,23,39)" fg:x="5377" fg:w="5"/><text x="18.1385%" y="3807.50"></text></g><g><title>__psynch_cvsignal (270 samples, 0.91%)</title><rect x="18.0921%" y="3781" width="0.9063%" height="15" fill="rgb(238,48,10)" fg:x="5390" fg:w="270"/><text x="18.1821%" y="3791.50">__..</text></g><g><title>pthread_cond_signal (281 samples, 0.94%)</title><rect x="18.0653%" y="3797" width="0.9432%" height="15" fill="rgb(251,196,23)" fg:x="5382" fg:w="281"/><text x="18.1553%" y="3807.50">pt..</text></g><g><title>_pthread_cond_updateval (3 samples, 0.01%)</title><rect x="18.9984%" y="3781" width="0.0101%" height="15" fill="rgb(250,152,24)" fg:x="5660" fg:w="3"/><text x="19.0884%" y="3791.50"></text></g><g><title>mach_absolute_time (12 samples, 0.04%)</title><rect x="19.0420%" y="3749" width="0.0403%" height="15" fill="rgb(209,150,17)" fg:x="5673" fg:w="12"/><text x="19.1320%" y="3759.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (19 samples, 0.06%)</title><rect x="19.0219%" y="3797" width="0.0638%" height="15" fill="rgb(234,202,34)" fg:x="5667" fg:w="19"/><text x="19.1119%" y="3807.50"></text></g><g><title>clock_gettime (19 samples, 0.06%)</title><rect x="19.0219%" y="3781" width="0.0638%" height="15" fill="rgb(253,148,53)" fg:x="5667" fg:w="19"/><text x="19.1119%" y="3791.50"></text></g><g><title>clock_gettime_nsec_np (17 samples, 0.06%)</title><rect x="19.0286%" y="3765" width="0.0571%" height="15" fill="rgb(218,129,16)" fg:x="5669" fg:w="17"/><text x="19.1186%" y="3775.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (322 samples, 1.08%)</title><rect x="18.0082%" y="3813" width="1.0808%" height="15" fill="rgb(216,85,19)" fg:x="5365" fg:w="322"/><text x="18.0982%" y="3823.50">par..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (11 samples, 0.04%)</title><rect x="19.0890%" y="3813" width="0.0369%" height="15" fill="rgb(235,228,7)" fg:x="5687" fg:w="11"/><text x="19.1790%" y="3823.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (453 samples, 1.52%)</title><rect x="17.6490%" y="3845" width="1.5205%" height="15" fill="rgb(245,175,0)" fg:x="5258" fg:w="453"/><text x="17.7390%" y="3855.50">tokio..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (446 samples, 1.50%)</title><rect x="17.6725%" y="3829" width="1.4970%" height="15" fill="rgb(208,168,36)" fg:x="5265" fg:w="446"/><text x="17.7625%" y="3839.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (13 samples, 0.04%)</title><rect x="19.1259%" y="3813" width="0.0436%" height="15" fill="rgb(246,171,24)" fg:x="5698" fg:w="13"/><text x="19.2159%" y="3823.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (470 samples, 1.58%)</title><rect x="17.5987%" y="3861" width="1.5776%" height="15" fill="rgb(215,142,24)" fg:x="5243" fg:w="470"/><text x="17.6887%" y="3871.50">tokio..</text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (5 samples, 0.02%)</title><rect x="19.1796%" y="3845" width="0.0168%" height="15" fill="rgb(250,187,7)" fg:x="5714" fg:w="5"/><text x="19.2697%" y="3855.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (13 samples, 0.04%)</title><rect x="19.1763%" y="3861" width="0.0436%" height="15" fill="rgb(228,66,33)" fg:x="5713" fg:w="13"/><text x="19.2663%" y="3871.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (7 samples, 0.02%)</title><rect x="19.1964%" y="3845" width="0.0235%" height="15" fill="rgb(234,215,21)" fg:x="5719" fg:w="7"/><text x="19.2864%" y="3855.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (6 samples, 0.02%)</title><rect x="19.2199%" y="3861" width="0.0201%" height="15" fill="rgb(222,191,20)" fg:x="5726" fg:w="6"/><text x="19.3099%" y="3871.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="19.3878%" y="3813" width="0.0101%" height="15" fill="rgb(245,79,54)" fg:x="5776" fg:w="3"/><text x="19.4778%" y="3823.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="19.4012%" y="3813" width="0.0235%" height="15" fill="rgb(240,10,37)" fg:x="5780" fg:w="7"/><text x="19.4912%" y="3823.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (8 samples, 0.03%)</title><rect x="19.4280%" y="3797" width="0.0269%" height="15" fill="rgb(214,192,32)" fg:x="5788" fg:w="8"/><text x="19.5180%" y="3807.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (5 samples, 0.02%)</title><rect x="19.4381%" y="3781" width="0.0168%" height="15" fill="rgb(209,36,54)" fg:x="5791" fg:w="5"/><text x="19.5281%" y="3791.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9 samples, 0.03%)</title><rect x="19.4280%" y="3813" width="0.0302%" height="15" fill="rgb(220,10,11)" fg:x="5788" fg:w="9"/><text x="19.5180%" y="3823.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="19.4650%" y="3781" width="0.0201%" height="15" fill="rgb(221,106,17)" fg:x="5799" fg:w="6"/><text x="19.5550%" y="3791.50"></text></g><g><title>&lt;zksync_os_sequencer::mempool::Mempool as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.03%)</title><rect x="19.4582%" y="3797" width="0.0302%" height="15" fill="rgb(251,142,44)" fg:x="5797" fg:w="9"/><text x="19.5483%" y="3807.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (16 samples, 0.05%)</title><rect x="19.4952%" y="3781" width="0.0537%" height="15" fill="rgb(238,13,15)" fg:x="5808" fg:w="16"/><text x="19.5852%" y="3791.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="19.5388%" y="3765" width="0.0101%" height="15" fill="rgb(208,107,27)" fg:x="5821" fg:w="3"/><text x="19.6288%" y="3775.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.09%)</title><rect x="19.4582%" y="3813" width="0.0940%" height="15" fill="rgb(205,136,37)" fg:x="5797" fg:w="28"/><text x="19.5483%" y="3823.50"></text></g><g><title>zksync_os_sequencer::mempool::Mempool::try_pop (19 samples, 0.06%)</title><rect x="19.4885%" y="3797" width="0.0638%" height="15" fill="rgb(250,205,27)" fg:x="5806" fg:w="19"/><text x="19.5785%" y="3807.50"></text></g><g><title>&lt;primitive_types::H256 as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="19.5724%" y="3813" width="0.0134%" height="15" fill="rgb(210,80,43)" fg:x="5831" fg:w="4"/><text x="19.6624%" y="3823.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3 samples, 0.01%)</title><rect x="19.5858%" y="3813" width="0.0101%" height="15" fill="rgb(247,160,36)" fg:x="5835" fg:w="3"/><text x="19.6758%" y="3823.50"></text></g><g><title>_platform_memmove (26 samples, 0.09%)</title><rect x="19.6160%" y="3813" width="0.0873%" height="15" fill="rgb(234,13,49)" fg:x="5844" fg:w="26"/><text x="19.7060%" y="3823.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="19.7133%" y="3813" width="0.0101%" height="15" fill="rgb(234,122,0)" fg:x="5873" fg:w="3"/><text x="19.8034%" y="3823.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="19.7133%" y="3797" width="0.0101%" height="15" fill="rgb(207,146,38)" fg:x="5873" fg:w="3"/><text x="19.8034%" y="3807.50"></text></g><g><title>_realloc (3 samples, 0.01%)</title><rect x="19.7133%" y="3781" width="0.0101%" height="15" fill="rgb(207,177,25)" fg:x="5873" fg:w="3"/><text x="19.8034%" y="3791.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="19.7268%" y="3813" width="0.0134%" height="15" fill="rgb(211,178,42)" fg:x="5877" fg:w="4"/><text x="19.8168%" y="3823.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (6 samples, 0.02%)</title><rect x="19.7469%" y="3813" width="0.0201%" height="15" fill="rgb(230,69,54)" fg:x="5883" fg:w="6"/><text x="19.8369%" y="3823.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="19.7469%" y="3797" width="0.0201%" height="15" fill="rgb(214,135,41)" fg:x="5883" fg:w="6"/><text x="19.8369%" y="3807.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="19.7771%" y="3797" width="0.0134%" height="15" fill="rgb(237,67,25)" fg:x="5892" fg:w="4"/><text x="19.8671%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;[zksync_types::Transaction]&gt; (13 samples, 0.04%)</title><rect x="19.7738%" y="3813" width="0.0436%" height="15" fill="rgb(222,189,50)" fg:x="5891" fg:w="13"/><text x="19.8638%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;zksync_types::Transaction&gt; (8 samples, 0.03%)</title><rect x="19.7905%" y="3797" width="0.0269%" height="15" fill="rgb(245,148,34)" fg:x="5896" fg:w="8"/><text x="19.8806%" y="3807.50"></text></g><g><title>nanov2_madvise_block (3 samples, 0.01%)</title><rect x="19.8073%" y="3781" width="0.0101%" height="15" fill="rgb(222,29,6)" fg:x="5901" fg:w="3"/><text x="19.8973%" y="3791.50"></text></g><g><title>nanov2_madvise_block_locked (3 samples, 0.01%)</title><rect x="19.8073%" y="3765" width="0.0101%" height="15" fill="rgb(221,189,43)" fg:x="5901" fg:w="3"/><text x="19.8973%" y="3775.50"></text></g><g><title>mvm_madvise_free_plat (3 samples, 0.01%)</title><rect x="19.8073%" y="3749" width="0.0101%" height="15" fill="rgb(207,36,27)" fg:x="5901" fg:w="3"/><text x="19.8973%" y="3759.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="19.8073%" y="3733" width="0.0101%" height="15" fill="rgb(217,90,24)" fg:x="5901" fg:w="3"/><text x="19.8973%" y="3743.50"></text></g><g><title>madvise (3 samples, 0.01%)</title><rect x="19.8073%" y="3717" width="0.0101%" height="15" fill="rgb(224,66,35)" fg:x="5901" fg:w="3"/><text x="19.8973%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;forward_system::run::tx_source::NextTxResponse&gt;::send::{{closure}}&gt; (3 samples, 0.01%)</title><rect x="19.8208%" y="3813" width="0.0101%" height="15" fill="rgb(221,13,50)" fg:x="5905" fg:w="3"/><text x="19.9108%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::task::coop::RestoreOnPending&gt; (4 samples, 0.01%)</title><rect x="19.8308%" y="3813" width="0.0134%" height="15" fill="rgb(236,68,49)" fg:x="5908" fg:w="4"/><text x="19.9208%" y="3823.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="19.8308%" y="3797" width="0.0134%" height="15" fill="rgb(229,146,28)" fg:x="5908" fg:w="4"/><text x="19.9208%" y="3807.50"></text></g><g><title>core::ptr::write (35 samples, 0.12%)</title><rect x="19.8610%" y="3781" width="0.1175%" height="15" fill="rgb(225,31,38)" fg:x="5917" fg:w="35"/><text x="19.9510%" y="3791.50"></text></g><g><title>_platform_memmove (35 samples, 0.12%)</title><rect x="19.8610%" y="3765" width="0.1175%" height="15" fill="rgb(250,208,3)" fg:x="5917" fg:w="35"/><text x="19.9510%" y="3775.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.01%)</title><rect x="19.9785%" y="3781" width="0.0134%" height="15" fill="rgb(246,54,23)" fg:x="5952" fg:w="4"/><text x="20.0685%" y="3791.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="19.9987%" y="3749" width="0.0470%" height="15" fill="rgb(243,76,11)" fg:x="5958" fg:w="14"/><text x="20.0887%" y="3759.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="19.9987%" y="3733" width="0.0470%" height="15" fill="rgb(245,21,50)" fg:x="5958" fg:w="14"/><text x="20.0887%" y="3743.50"></text></g><g><title>_platform_memmove (78 samples, 0.26%)</title><rect x="20.0456%" y="3749" width="0.2618%" height="15" fill="rgb(228,9,43)" fg:x="5972" fg:w="78"/><text x="20.1357%" y="3759.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (138 samples, 0.46%)</title><rect x="19.8510%" y="3797" width="0.4632%" height="15" fill="rgb(208,100,47)" fg:x="5914" fg:w="138"/><text x="19.9410%" y="3807.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (95 samples, 0.32%)</title><rect x="19.9953%" y="3781" width="0.3189%" height="15" fill="rgb(232,26,8)" fg:x="5957" fg:w="95"/><text x="20.0853%" y="3791.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (94 samples, 0.32%)</title><rect x="19.9987%" y="3765" width="0.3155%" height="15" fill="rgb(216,166,38)" fg:x="5958" fg:w="94"/><text x="20.0887%" y="3775.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (140 samples, 0.47%)</title><rect x="19.8476%" y="3813" width="0.4699%" height="15" fill="rgb(251,202,51)" fg:x="5913" fg:w="140"/><text x="19.9376%" y="3823.50"></text></g><g><title>nanov2_malloc_type (8 samples, 0.03%)</title><rect x="20.3242%" y="3813" width="0.0269%" height="15" fill="rgb(254,216,34)" fg:x="6055" fg:w="8"/><text x="20.4143%" y="3823.50"></text></g><g><title>tokio::runtime::park::wake (3 samples, 0.01%)</title><rect x="20.3511%" y="3813" width="0.0101%" height="15" fill="rgb(251,32,27)" fg:x="6063" fg:w="3"/><text x="20.4411%" y="3823.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::_{{closure}} (11 samples, 0.04%)</title><rect x="20.3645%" y="3813" width="0.0369%" height="15" fill="rgb(208,127,28)" fg:x="6067" fg:w="11"/><text x="20.4545%" y="3823.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="20.3679%" y="3797" width="0.0336%" height="15" fill="rgb(224,137,22)" fg:x="6068" fg:w="10"/><text x="20.4579%" y="3807.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.01%)</title><rect x="20.4518%" y="3765" width="0.0101%" height="15" fill="rgb(254,70,32)" fg:x="6093" fg:w="3"/><text x="20.5418%" y="3775.50"></text></g><g><title>pthread_cond_signal (229 samples, 0.77%)</title><rect x="20.4619%" y="3765" width="0.7687%" height="15" fill="rgb(229,75,37)" fg:x="6096" fg:w="229"/><text x="20.5519%" y="3775.50">p..</text></g><g><title>__psynch_cvsignal (224 samples, 0.75%)</title><rect x="20.4787%" y="3749" width="0.7519%" height="15" fill="rgb(252,64,23)" fg:x="6101" fg:w="224"/><text x="20.5687%" y="3759.50">_..</text></g><g><title>mach_absolute_time (27 samples, 0.09%)</title><rect x="21.2540%" y="3717" width="0.0906%" height="15" fill="rgb(232,162,48)" fg:x="6332" fg:w="27"/><text x="21.3440%" y="3727.50"></text></g><g><title>tokio::runtime::park::wake (280 samples, 0.94%)</title><rect x="20.4082%" y="3797" width="0.9398%" height="15" fill="rgb(246,160,12)" fg:x="6080" fg:w="280"/><text x="20.4982%" y="3807.50">to..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (272 samples, 0.91%)</title><rect x="20.4350%" y="3781" width="0.9130%" height="15" fill="rgb(247,166,0)" fg:x="6088" fg:w="272"/><text x="20.5250%" y="3791.50">pa..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (32 samples, 0.11%)</title><rect x="21.2406%" y="3765" width="0.1074%" height="15" fill="rgb(249,219,21)" fg:x="6328" fg:w="32"/><text x="21.3306%" y="3775.50"></text></g><g><title>clock_gettime (31 samples, 0.10%)</title><rect x="21.2440%" y="3749" width="0.1041%" height="15" fill="rgb(205,209,3)" fg:x="6329" fg:w="31"/><text x="21.3340%" y="3759.50"></text></g><g><title>clock_gettime_nsec_np (29 samples, 0.10%)</title><rect x="21.2507%" y="3733" width="0.0973%" height="15" fill="rgb(243,44,1)" fg:x="6331" fg:w="29"/><text x="21.3407%" y="3743.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (282 samples, 0.95%)</title><rect x="20.4082%" y="3813" width="0.9466%" height="15" fill="rgb(206,159,16)" fg:x="6080" fg:w="282"/><text x="20.4982%" y="3823.50">to..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (6 samples, 0.02%)</title><rect x="21.3614%" y="3797" width="0.0201%" height="15" fill="rgb(244,77,30)" fg:x="6364" fg:w="6"/><text x="21.4514%" y="3807.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.02%)</title><rect x="21.3849%" y="3797" width="0.0168%" height="15" fill="rgb(218,69,12)" fg:x="6371" fg:w="5"/><text x="21.4749%" y="3807.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::_{{closure}} (18 samples, 0.06%)</title><rect x="21.3547%" y="3813" width="0.0604%" height="15" fill="rgb(212,87,7)" fg:x="6362" fg:w="18"/><text x="21.4447%" y="3823.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (4 samples, 0.01%)</title><rect x="21.4017%" y="3797" width="0.0134%" height="15" fill="rgb(245,114,25)" fg:x="6376" fg:w="4"/><text x="21.4917%" y="3807.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (3 samples, 0.01%)</title><rect x="21.4219%" y="3813" width="0.0101%" height="15" fill="rgb(210,61,42)" fg:x="6382" fg:w="3"/><text x="21.5119%" y="3823.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="21.4219%" y="3797" width="0.0101%" height="15" fill="rgb(211,52,33)" fg:x="6382" fg:w="3"/><text x="21.5119%" y="3807.50"></text></g><g><title>&lt;&amp;F as tracing_subscriber::field::RecordFields&gt;::record (5 samples, 0.02%)</title><rect x="21.4353%" y="3765" width="0.0168%" height="15" fill="rgb(234,58,33)" fg:x="6386" fg:w="5"/><text x="21.5253%" y="3775.50"></text></g><g><title>tracing_core::field::ValueSet::record (5 samples, 0.02%)</title><rect x="21.4353%" y="3749" width="0.0168%" height="15" fill="rgb(220,115,36)" fg:x="6386" fg:w="5"/><text x="21.5253%" y="3759.50"></text></g><g><title>tracing_core::field::Visit::record_u64 (3 samples, 0.01%)</title><rect x="21.4420%" y="3733" width="0.0101%" height="15" fill="rgb(243,153,54)" fg:x="6388" fg:w="3"/><text x="21.5320%" y="3743.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_core::field::Visit&gt;::record_debug (3 samples, 0.01%)</title><rect x="21.4420%" y="3717" width="0.0101%" height="15" fill="rgb(251,47,18)" fg:x="6388" fg:w="3"/><text x="21.5320%" y="3727.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (16 samples, 0.05%)</title><rect x="21.4521%" y="3765" width="0.0537%" height="15" fill="rgb(242,102,42)" fg:x="6391" fg:w="16"/><text x="21.5421%" y="3775.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (16 samples, 0.05%)</title><rect x="21.4521%" y="3749" width="0.0537%" height="15" fill="rgb(234,31,38)" fg:x="6391" fg:w="16"/><text x="21.5421%" y="3759.50"></text></g><g><title>write (16 samples, 0.05%)</title><rect x="21.4521%" y="3733" width="0.0537%" height="15" fill="rgb(221,117,51)" fg:x="6391" fg:w="16"/><text x="21.5421%" y="3743.50"></text></g><g><title>tracing_subscriber::fmt::format::Format&lt;F,T&gt;::format_timestamp (6 samples, 0.02%)</title><rect x="21.5091%" y="3765" width="0.0201%" height="15" fill="rgb(212,20,18)" fg:x="6408" fg:w="6"/><text x="21.5991%" y="3775.50"></text></g><g><title>tracing_core::event::Event::dispatch (29 samples, 0.10%)</title><rect x="21.4353%" y="3813" width="0.0973%" height="15" fill="rgb(245,133,36)" fg:x="6386" fg:w="29"/><text x="21.5253%" y="3823.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (29 samples, 0.10%)</title><rect x="21.4353%" y="3797" width="0.0973%" height="15" fill="rgb(212,6,19)" fg:x="6386" fg:w="29"/><text x="21.5253%" y="3807.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::_{{closure}} (29 samples, 0.10%)</title><rect x="21.4353%" y="3781" width="0.0973%" height="15" fill="rgb(218,1,36)" fg:x="6386" fg:w="29"/><text x="21.5253%" y="3791.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="21.5561%" y="3797" width="0.0201%" height="15" fill="rgb(246,84,54)" fg:x="6422" fg:w="6"/><text x="21.6461%" y="3807.50"></text></g><g><title>zksync_os_sequencer::execution::block_executor::execute_block_inner::_{{closure}}::_{{closure}} (16 samples, 0.05%)</title><rect x="21.5360%" y="3813" width="0.0537%" height="15" fill="rgb(242,110,6)" fg:x="6416" fg:w="16"/><text x="21.6260%" y="3823.50"></text></g><g><title>tokio::macros::support::thread_rng_n (4 samples, 0.01%)</title><rect x="21.5763%" y="3797" width="0.0134%" height="15" fill="rgb(214,47,5)" fg:x="6428" fg:w="4"/><text x="21.6663%" y="3807.50"></text></g><g><title>zksync_os_sequencer::storage::StateHandle::handle_block_output::_{{closure}} (5 samples, 0.02%)</title><rect x="21.5964%" y="3813" width="0.0168%" height="15" fill="rgb(218,159,25)" fg:x="6434" fg:w="5"/><text x="21.6864%" y="3823.50"></text></g><g><title>tracing_core::event::Event::dispatch (5 samples, 0.02%)</title><rect x="21.5964%" y="3797" width="0.0168%" height="15" fill="rgb(215,211,28)" fg:x="6434" fg:w="5"/><text x="21.6864%" y="3807.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (5 samples, 0.02%)</title><rect x="21.5964%" y="3781" width="0.0168%" height="15" fill="rgb(238,59,32)" fg:x="6434" fg:w="5"/><text x="21.6864%" y="3791.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::_{{closure}} (5 samples, 0.02%)</title><rect x="21.5964%" y="3765" width="0.0168%" height="15" fill="rgb(226,82,3)" fg:x="6434" fg:w="5"/><text x="21.6864%" y="3775.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="21.6233%" y="3765" width="0.0168%" height="15" fill="rgb(240,164,32)" fg:x="6442" fg:w="5"/><text x="21.7133%" y="3775.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.03%)</title><rect x="21.6132%" y="3797" width="0.0302%" height="15" fill="rgb(232,46,7)" fg:x="6439" fg:w="9"/><text x="21.7032%" y="3807.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (9 samples, 0.03%)</title><rect x="21.6132%" y="3781" width="0.0302%" height="15" fill="rgb(229,129,53)" fg:x="6439" fg:w="9"/><text x="21.7032%" y="3791.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (6 samples, 0.02%)</title><rect x="21.6434%" y="3797" width="0.0201%" height="15" fill="rgb(234,188,29)" fg:x="6448" fg:w="6"/><text x="21.7334%" y="3807.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.04%)</title><rect x="21.6702%" y="3797" width="0.0369%" height="15" fill="rgb(246,141,4)" fg:x="6456" fg:w="11"/><text x="21.7603%" y="3807.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add (12 samples, 0.04%)</title><rect x="21.7072%" y="3797" width="0.0403%" height="15" fill="rgb(229,23,39)" fg:x="6467" fg:w="12"/><text x="21.7972%" y="3807.50"></text></g><g><title>zksync_os_sequencer::tx_conversions::transaction_to_api_data (6 samples, 0.02%)</title><rect x="21.7542%" y="3797" width="0.0201%" height="15" fill="rgb(206,12,3)" fg:x="6481" fg:w="6"/><text x="21.8442%" y="3807.50"></text></g><g><title>zksync_os_sequencer::tx_conversions::transaction_to_api_data::_{{closure}} (10 samples, 0.03%)</title><rect x="21.7743%" y="3797" width="0.0336%" height="15" fill="rgb(252,226,20)" fg:x="6487" fg:w="10"/><text x="21.8643%" y="3807.50"></text></g><g><title>zksync_os_sequencer::storage::StateHandle::handle_block_output (61 samples, 0.20%)</title><rect x="21.6132%" y="3813" width="0.2048%" height="15" fill="rgb(216,123,35)" fg:x="6439" fg:w="61"/><text x="21.7032%" y="3823.50"></text></g><g><title>zksync_os_sequencer::tx_conversions::transaction_to_api_data (3 samples, 0.01%)</title><rect x="21.8079%" y="3797" width="0.0101%" height="15" fill="rgb(212,68,40)" fg:x="6497" fg:w="3"/><text x="21.8979%" y="3807.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.03%)</title><rect x="21.8347%" y="3797" width="0.0336%" height="15" fill="rgb(254,125,32)" fg:x="6505" fg:w="10"/><text x="21.9247%" y="3807.50"></text></g><g><title>nanov2_malloc_type (4 samples, 0.01%)</title><rect x="21.8549%" y="3781" width="0.0134%" height="15" fill="rgb(253,97,22)" fg:x="6511" fg:w="4"/><text x="21.9449%" y="3791.50"></text></g><g><title>primitive_types::U256::from_big_endian (4 samples, 0.01%)</title><rect x="21.9052%" y="3781" width="0.0134%" height="15" fill="rgb(241,101,14)" fg:x="6526" fg:w="4"/><text x="21.9952%" y="3791.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="21.9086%" y="3765" width="0.0101%" height="15" fill="rgb(238,103,29)" fg:x="6527" fg:w="3"/><text x="21.9986%" y="3775.50"></text></g><g><title>rlp::impls::_&lt;impl rlp::traits::Decodable for u64&gt;::decode (5 samples, 0.02%)</title><rect x="21.9321%" y="3765" width="0.0168%" height="15" fill="rgb(233,195,47)" fg:x="6534" fg:w="5"/><text x="22.0221%" y="3775.50"></text></g><g><title>rlp::rlpin::BasicDecoder::decode_value (4 samples, 0.01%)</title><rect x="21.9354%" y="3749" width="0.0134%" height="15" fill="rgb(246,218,30)" fg:x="6535" fg:w="4"/><text x="22.0254%" y="3759.50"></text></g><g><title>rlp::rlpin::Rlp::at (11 samples, 0.04%)</title><rect x="21.9488%" y="3765" width="0.0369%" height="15" fill="rgb(219,145,47)" fg:x="6539" fg:w="11"/><text x="22.0389%" y="3775.50"></text></g><g><title>rlp::rlpin::Rlp::at_with_offset (9 samples, 0.03%)</title><rect x="21.9556%" y="3749" width="0.0302%" height="15" fill="rgb(243,12,26)" fg:x="6541" fg:w="9"/><text x="22.0456%" y="3759.50"></text></g><g><title>rlp::rlpin::PayloadInfo::from (5 samples, 0.02%)</title><rect x="21.9690%" y="3733" width="0.0168%" height="15" fill="rgb(214,87,16)" fg:x="6545" fg:w="5"/><text x="22.0590%" y="3743.50"></text></g><g><title>&lt;zksync_zkos_vm_runner::zkos_conversions::TransactionData as core::convert::From&lt;zksync_types::Transaction&gt;&gt;::from (36 samples, 0.12%)</title><rect x="21.8683%" y="3797" width="0.1208%" height="15" fill="rgb(208,99,42)" fg:x="6515" fg:w="36"/><text x="21.9583%" y="3807.50"></text></g><g><title>zksync_types::l2::L2TxCommonData::extract_chain_id (21 samples, 0.07%)</title><rect x="21.9186%" y="3781" width="0.0705%" height="15" fill="rgb(253,99,2)" fg:x="6530" fg:w="21"/><text x="22.0086%" y="3791.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="22.0126%" y="3797" width="0.0168%" height="15" fill="rgb(220,168,23)" fg:x="6558" fg:w="5"/><text x="22.1026%" y="3807.50"></text></g><g><title>alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="22.0294%" y="3797" width="0.0101%" height="15" fill="rgb(242,38,24)" fg:x="6563" fg:w="3"/><text x="22.1194%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;ethabi::token::token::Token&gt; (15 samples, 0.05%)</title><rect x="22.0395%" y="3797" width="0.0503%" height="15" fill="rgb(225,182,9)" fg:x="6566" fg:w="15"/><text x="22.1295%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;ethabi::token::token::Token&gt; (6 samples, 0.02%)</title><rect x="22.0697%" y="3781" width="0.0201%" height="15" fill="rgb(243,178,37)" fg:x="6575" fg:w="6"/><text x="22.1597%" y="3791.50"></text></g><g><title>_szone_free (4 samples, 0.01%)</title><rect x="22.1301%" y="3765" width="0.0134%" height="15" fill="rgb(232,139,19)" fg:x="6593" fg:w="4"/><text x="22.2201%" y="3775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="22.1838%" y="3717" width="0.0134%" height="15" fill="rgb(225,201,24)" fg:x="6609" fg:w="4"/><text x="22.2738%" y="3727.50"></text></g><g><title>ethabi::encoder::mediate_token (14 samples, 0.05%)</title><rect x="22.1670%" y="3733" width="0.0470%" height="15" fill="rgb(221,47,46)" fg:x="6604" fg:w="14"/><text x="22.2570%" y="3743.50"></text></g><g><title>ethabi::token::token::Token::is_dynamic (5 samples, 0.02%)</title><rect x="22.1972%" y="3717" width="0.0168%" height="15" fill="rgb(249,23,13)" fg:x="6613" fg:w="5"/><text x="22.2872%" y="3727.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.11%)</title><rect x="22.1469%" y="3749" width="0.1108%" height="15" fill="rgb(219,9,5)" fg:x="6598" fg:w="33"/><text x="22.2369%" y="3759.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 0.04%)</title><rect x="22.2140%" y="3733" width="0.0436%" height="15" fill="rgb(254,171,16)" fg:x="6618" fg:w="13"/><text x="22.3040%" y="3743.50"></text></g><g><title>tiny_malloc_should_clear (12 samples, 0.04%)</title><rect x="22.2174%" y="3717" width="0.0403%" height="15" fill="rgb(230,171,20)" fg:x="6619" fg:w="12"/><text x="22.3074%" y="3727.50"></text></g><g><title>tiny_malloc_from_free_list (10 samples, 0.03%)</title><rect x="22.2241%" y="3701" width="0.0336%" height="15" fill="rgb(210,71,41)" fg:x="6621" fg:w="10"/><text x="22.3141%" y="3711.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="22.2476%" y="3685" width="0.0101%" height="15" fill="rgb(206,173,20)" fg:x="6628" fg:w="3"/><text x="22.3376%" y="3695.50"></text></g><g><title>ethabi::token::token::Token::is_dynamic (7 samples, 0.02%)</title><rect x="22.2610%" y="3749" width="0.0235%" height="15" fill="rgb(233,88,34)" fg:x="6632" fg:w="7"/><text x="22.3510%" y="3759.50"></text></g><g><title>ethabi::token::token::Token::is_dynamic (4 samples, 0.01%)</title><rect x="22.2711%" y="3733" width="0.0134%" height="15" fill="rgb(223,209,46)" fg:x="6635" fg:w="4"/><text x="22.3611%" y="3743.50"></text></g><g><title>ethabi::encoder::mediate_token (43 samples, 0.14%)</title><rect x="22.1435%" y="3765" width="0.1443%" height="15" fill="rgb(250,43,18)" fg:x="6597" fg:w="43"/><text x="22.2335%" y="3775.50"></text></g><g><title>free_small (6 samples, 0.02%)</title><rect x="22.2879%" y="3765" width="0.0201%" height="15" fill="rgb(208,13,10)" fg:x="6640" fg:w="6"/><text x="22.3779%" y="3775.50"></text></g><g><title>nanov2_malloc_type (6 samples, 0.02%)</title><rect x="22.3080%" y="3765" width="0.0201%" height="15" fill="rgb(212,200,36)" fg:x="6646" fg:w="6"/><text x="22.3980%" y="3775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (81 samples, 0.27%)</title><rect x="22.0999%" y="3781" width="0.2719%" height="15" fill="rgb(225,90,30)" fg:x="6584" fg:w="81"/><text x="22.1899%" y="3791.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 0.04%)</title><rect x="22.3281%" y="3765" width="0.0436%" height="15" fill="rgb(236,182,39)" fg:x="6652" fg:w="13"/><text x="22.4182%" y="3775.50"></text></g><g><title>tiny_malloc_should_clear (11 samples, 0.04%)</title><rect x="22.3349%" y="3749" width="0.0369%" height="15" fill="rgb(212,144,35)" fg:x="6654" fg:w="11"/><text x="22.4249%" y="3759.50"></text></g><g><title>tiny_malloc_from_free_list (9 samples, 0.03%)</title><rect x="22.3416%" y="3733" width="0.0302%" height="15" fill="rgb(228,63,44)" fg:x="6656" fg:w="9"/><text x="22.4316%" y="3743.50"></text></g><g><title>_free (3 samples, 0.01%)</title><rect x="22.3852%" y="3781" width="0.0101%" height="15" fill="rgb(228,109,6)" fg:x="6669" fg:w="3"/><text x="22.4752%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;ethabi::encoder::Mediate&gt; (15 samples, 0.05%)</title><rect x="22.4087%" y="3781" width="0.0503%" height="15" fill="rgb(238,117,24)" fg:x="6676" fg:w="15"/><text x="22.4987%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;ethabi::encoder::Mediate&gt; (7 samples, 0.02%)</title><rect x="22.4356%" y="3765" width="0.0235%" height="15" fill="rgb(242,26,26)" fg:x="6684" fg:w="7"/><text x="22.5256%" y="3775.50"></text></g><g><title>ethabi::encoder::Mediate::tail_len (5 samples, 0.02%)</title><rect x="22.4624%" y="3781" width="0.0168%" height="15" fill="rgb(221,92,48)" fg:x="6692" fg:w="5"/><text x="22.5524%" y="3791.50"></text></g><g><title>ethabi::encoder::Mediate::head_len (3 samples, 0.01%)</title><rect x="22.4792%" y="3765" width="0.0101%" height="15" fill="rgb(209,209,32)" fg:x="6697" fg:w="3"/><text x="22.5692%" y="3775.50"></text></g><g><title>ethabi::encoder::Mediate::head_len (3 samples, 0.01%)</title><rect x="22.4993%" y="3749" width="0.0101%" height="15" fill="rgb(221,70,22)" fg:x="6703" fg:w="3"/><text x="22.5893%" y="3759.50"></text></g><g><title>ethabi::encoder::Mediate::tail_len (9 samples, 0.03%)</title><rect x="22.4893%" y="3765" width="0.0302%" height="15" fill="rgb(248,145,5)" fg:x="6700" fg:w="9"/><text x="22.5793%" y="3775.50"></text></g><g><title>ethabi::encoder::Mediate::tail_len (3 samples, 0.01%)</title><rect x="22.5094%" y="3749" width="0.0101%" height="15" fill="rgb(226,116,26)" fg:x="6706" fg:w="3"/><text x="22.5994%" y="3759.50"></text></g><g><title>ethabi::encoder::Mediate::head_append (3 samples, 0.01%)</title><rect x="22.5363%" y="3749" width="0.0101%" height="15" fill="rgb(244,5,17)" fg:x="6714" fg:w="3"/><text x="22.6263%" y="3759.50"></text></g><g><title>ethabi::encoder::Mediate::tail_len (5 samples, 0.02%)</title><rect x="22.5497%" y="3749" width="0.0168%" height="15" fill="rgb(252,159,33)" fg:x="6718" fg:w="5"/><text x="22.6397%" y="3759.50"></text></g><g><title>ethabi::encoder::encode_token_append (7 samples, 0.02%)</title><rect x="22.5665%" y="3749" width="0.0235%" height="15" fill="rgb(206,71,0)" fg:x="6723" fg:w="7"/><text x="22.6565%" y="3759.50"></text></g><g><title>ethabi::encoder::encode_head_tail_append (25 samples, 0.08%)</title><rect x="22.5195%" y="3765" width="0.0839%" height="15" fill="rgb(233,118,54)" fg:x="6709" fg:w="25"/><text x="22.6095%" y="3775.50"></text></g><g><title>ethabi::encoder::pad_bytes_append (4 samples, 0.01%)</title><rect x="22.5900%" y="3749" width="0.0134%" height="15" fill="rgb(234,83,48)" fg:x="6730" fg:w="4"/><text x="22.6800%" y="3759.50"></text></g><g><title>ethabi::encoder::encode_head_tail_append (40 samples, 0.13%)</title><rect x="22.4792%" y="3781" width="0.1343%" height="15" fill="rgb(228,3,54)" fg:x="6697" fg:w="40"/><text x="22.5692%" y="3791.50"></text></g><g><title>ethabi::encoder::encode_token_append (3 samples, 0.01%)</title><rect x="22.6034%" y="3765" width="0.0101%" height="15" fill="rgb(226,155,13)" fg:x="6734" fg:w="3"/><text x="22.6934%" y="3775.50"></text></g><g><title>free_tiny (13 samples, 0.04%)</title><rect x="22.6135%" y="3781" width="0.0436%" height="15" fill="rgb(241,28,37)" fg:x="6737" fg:w="13"/><text x="22.7035%" y="3791.50"></text></g><g><title>tiny_free_no_lock (10 samples, 0.03%)</title><rect x="22.6235%" y="3765" width="0.0336%" height="15" fill="rgb(233,93,10)" fg:x="6740" fg:w="10"/><text x="22.7135%" y="3775.50"></text></g><g><title>small_free_list_add_ptr (4 samples, 0.01%)</title><rect x="22.6739%" y="3733" width="0.0134%" height="15" fill="rgb(225,113,19)" fg:x="6755" fg:w="4"/><text x="22.7639%" y="3743.50"></text></g><g><title>ethabi::encoder::encode (182 samples, 0.61%)</title><rect x="22.0898%" y="3797" width="0.6109%" height="15" fill="rgb(241,2,18)" fg:x="6581" fg:w="182"/><text x="22.1798%" y="3807.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 0.04%)</title><rect x="22.6571%" y="3781" width="0.0436%" height="15" fill="rgb(228,207,21)" fg:x="6750" fg:w="13"/><text x="22.7471%" y="3791.50"></text></g><g><title>small_malloc_should_clear (13 samples, 0.04%)</title><rect x="22.6571%" y="3765" width="0.0436%" height="15" fill="rgb(213,211,35)" fg:x="6750" fg:w="13"/><text x="22.7471%" y="3775.50"></text></g><g><title>small_malloc_from_free_list (11 samples, 0.04%)</title><rect x="22.6638%" y="3749" width="0.0369%" height="15" fill="rgb(209,83,10)" fg:x="6752" fg:w="11"/><text x="22.7538%" y="3759.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (4 samples, 0.01%)</title><rect x="22.6873%" y="3733" width="0.0134%" height="15" fill="rgb(209,164,1)" fg:x="6759" fg:w="4"/><text x="22.7773%" y="3743.50"></text></g><g><title>free_tiny (5 samples, 0.02%)</title><rect x="22.7007%" y="3797" width="0.0168%" height="15" fill="rgb(213,184,43)" fg:x="6763" fg:w="5"/><text x="22.7907%" y="3807.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 0.05%)</title><rect x="22.7209%" y="3797" width="0.0537%" height="15" fill="rgb(231,61,34)" fg:x="6769" fg:w="16"/><text x="22.8109%" y="3807.50"></text></g><g><title>tiny_malloc_should_clear (13 samples, 0.04%)</title><rect x="22.7309%" y="3781" width="0.0436%" height="15" fill="rgb(235,75,3)" fg:x="6772" fg:w="13"/><text x="22.8209%" y="3791.50"></text></g><g><title>tiny_malloc_from_free_list (9 samples, 0.03%)</title><rect x="22.7444%" y="3765" width="0.0302%" height="15" fill="rgb(220,106,47)" fg:x="6776" fg:w="9"/><text x="22.8344%" y="3775.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,056 samples, 3.54%)</title><rect x="19.2401%" y="3845" width="3.5446%" height="15" fill="rgb(210,196,33)" fg:x="5732" fg:w="1056"/><text x="19.3301%" y="3855.50">&lt;core::pin::Pi..</text></g><g><title>zksync_os_sequencer::run_sequencer_actor::_{{closure}}::_{{closure}} (1,056 samples, 3.54%)</title><rect x="19.2401%" y="3829" width="3.5446%" height="15" fill="rgb(229,154,42)" fg:x="5732" fg:w="1056"/><text x="19.3301%" y="3839.50">zksync_os_sequ..</text></g><g><title>zksync_zkos_vm_runner::zkos_conversions::tx_abi_encode (288 samples, 0.97%)</title><rect x="21.8179%" y="3813" width="0.9667%" height="15" fill="rgb(228,114,26)" fg:x="6500" fg:w="288"/><text x="21.9079%" y="3823.50">zk..</text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.02%)</title><rect x="22.7846%" y="3845" width="0.0168%" height="15" fill="rgb(208,144,1)" fg:x="6788" fg:w="5"/><text x="22.8746%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (13 samples, 0.04%)</title><rect x="22.8014%" y="3845" width="0.0436%" height="15" fill="rgb(239,112,37)" fg:x="6793" fg:w="13"/><text x="22.8914%" y="3855.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (13 samples, 0.04%)</title><rect x="22.8014%" y="3829" width="0.0436%" height="15" fill="rgb(210,96,50)" fg:x="6793" fg:w="13"/><text x="22.8914%" y="3839.50"></text></g><g><title>_tlv_get_addr (8 samples, 0.03%)</title><rect x="22.8182%" y="3813" width="0.0269%" height="15" fill="rgb(222,178,2)" fg:x="6798" fg:w="8"/><text x="22.9082%" y="3823.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="22.8551%" y="3813" width="0.0134%" height="15" fill="rgb(226,74,18)" fg:x="6809" fg:w="4"/><text x="22.9451%" y="3823.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::_{{closure}}::_{{closure}} (4 samples, 0.01%)</title><rect x="22.8551%" y="3797" width="0.0134%" height="15" fill="rgb(225,67,54)" fg:x="6809" fg:w="4"/><text x="22.9451%" y="3807.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept (4 samples, 0.01%)</title><rect x="22.8551%" y="3781" width="0.0134%" height="15" fill="rgb(251,92,32)" fg:x="6809" fg:w="4"/><text x="22.9451%" y="3791.50"></text></g><g><title>mio::sys::unix::tcp::accept (4 samples, 0.01%)</title><rect x="22.8551%" y="3765" width="0.0134%" height="15" fill="rgb(228,149,22)" fg:x="6809" fg:w="4"/><text x="22.9451%" y="3775.50"></text></g><g><title>__accept (4 samples, 0.01%)</title><rect x="22.8551%" y="3749" width="0.0134%" height="15" fill="rgb(243,54,13)" fg:x="6809" fg:w="4"/><text x="22.9451%" y="3759.50"></text></g><g><title>jsonrpsee_server::server::Server&lt;HttpMiddleware,RpcMiddleware&gt;::start_inner::_{{closure}} (6 samples, 0.02%)</title><rect x="22.8551%" y="3829" width="0.0201%" height="15" fill="rgb(243,180,28)" fg:x="6809" fg:w="6"/><text x="22.9451%" y="3839.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.02%)</title><rect x="22.9659%" y="3781" width="0.0235%" height="15" fill="rgb(208,167,24)" fg:x="6842" fg:w="7"/><text x="23.0559%" y="3791.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.02%)</title><rect x="22.9659%" y="3765" width="0.0235%" height="15" fill="rgb(245,73,45)" fg:x="6842" fg:w="7"/><text x="23.0559%" y="3775.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="23.0062%" y="3781" width="0.0168%" height="15" fill="rgb(237,203,48)" fg:x="6854" fg:w="5"/><text x="23.0962%" y="3791.50"></text></g><g><title>&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="23.0297%" y="3781" width="0.0235%" height="15" fill="rgb(211,197,16)" fg:x="6861" fg:w="7"/><text x="23.1197%" y="3791.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Write&gt;::poll_shutdown (9 samples, 0.03%)</title><rect x="23.0532%" y="3781" width="0.0302%" height="15" fill="rgb(243,99,51)" fg:x="6868" fg:w="9"/><text x="23.1432%" y="3791.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (9 samples, 0.03%)</title><rect x="23.0532%" y="3765" width="0.0302%" height="15" fill="rgb(215,123,29)" fg:x="6868" fg:w="9"/><text x="23.1432%" y="3775.50"></text></g><g><title>std::os::unix::net::stream::UnixStream::shutdown (9 samples, 0.03%)</title><rect x="23.0532%" y="3749" width="0.0302%" height="15" fill="rgb(239,186,37)" fg:x="6868" fg:w="9"/><text x="23.1432%" y="3759.50"></text></g><g><title>shutdown (9 samples, 0.03%)</title><rect x="23.0532%" y="3733" width="0.0302%" height="15" fill="rgb(252,136,39)" fg:x="6868" fg:w="9"/><text x="23.1432%" y="3743.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="23.1908%" y="3637" width="0.0101%" height="15" fill="rgb(223,213,32)" fg:x="6909" fg:w="3"/><text x="23.2808%" y="3647.50"></text></g><g><title>_free (3 samples, 0.01%)</title><rect x="23.2042%" y="3637" width="0.0101%" height="15" fill="rgb(233,115,5)" fg:x="6913" fg:w="3"/><text x="23.2942%" y="3647.50"></text></g><g><title>_nanov2_free (11 samples, 0.04%)</title><rect x="23.2143%" y="3637" width="0.0369%" height="15" fill="rgb(207,226,44)" fg:x="6916" fg:w="11"/><text x="23.3043%" y="3647.50"></text></g><g><title>pthread_mutex_destroy (4 samples, 0.01%)</title><rect x="23.2713%" y="3605" width="0.0134%" height="15" fill="rgb(208,126,0)" fg:x="6933" fg:w="4"/><text x="23.3614%" y="3615.50"></text></g><g><title>&lt;std::sys::sync::mutex::pthread::Mutex as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="23.2613%" y="3621" width="0.0336%" height="15" fill="rgb(244,66,21)" fg:x="6930" fg:w="10"/><text x="23.3513%" y="3631.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="23.2948%" y="3621" width="0.0134%" height="15" fill="rgb(222,97,12)" fg:x="6940" fg:w="4"/><text x="23.3849%" y="3631.50"></text></g><g><title>_free (3 samples, 0.01%)</title><rect x="23.3083%" y="3621" width="0.0101%" height="15" fill="rgb(219,213,19)" fg:x="6944" fg:w="3"/><text x="23.3983%" y="3631.50"></text></g><g><title>_nanov2_free (11 samples, 0.04%)</title><rect x="23.3183%" y="3621" width="0.0369%" height="15" fill="rgb(252,169,30)" fg:x="6947" fg:w="11"/><text x="23.4083%" y="3631.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (32 samples, 0.11%)</title><rect x="23.2512%" y="3637" width="0.1074%" height="15" fill="rgb(206,32,51)" fg:x="6927" fg:w="32"/><text x="23.3412%" y="3647.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="23.3989%" y="3621" width="0.0101%" height="15" fill="rgb(250,172,42)" fg:x="6971" fg:w="3"/><text x="23.4889%" y="3631.50"></text></g><g><title>__rustc::__rdl_dealloc (6 samples, 0.02%)</title><rect x="23.4090%" y="3621" width="0.0201%" height="15" fill="rgb(209,34,43)" fg:x="6974" fg:w="6"/><text x="23.4990%" y="3631.50"></text></g><g><title>_free (3 samples, 0.01%)</title><rect x="23.4325%" y="3621" width="0.0101%" height="15" fill="rgb(223,11,35)" fg:x="6981" fg:w="3"/><text x="23.5225%" y="3631.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (4 samples, 0.01%)</title><rect x="23.5063%" y="3605" width="0.0134%" height="15" fill="rgb(251,219,26)" fg:x="7003" fg:w="4"/><text x="23.5963%" y="3615.50"></text></g><g><title>__bzero (3 samples, 0.01%)</title><rect x="23.5197%" y="3605" width="0.0101%" height="15" fill="rgb(231,119,3)" fg:x="7007" fg:w="3"/><text x="23.6097%" y="3615.50"></text></g><g><title>_nanov2_free (29 samples, 0.10%)</title><rect x="23.4425%" y="3621" width="0.0973%" height="15" fill="rgb(216,97,11)" fg:x="6984" fg:w="29"/><text x="23.5325%" y="3631.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="23.5298%" y="3605" width="0.0101%" height="15" fill="rgb(223,59,9)" fg:x="7010" fg:w="3"/><text x="23.6198%" y="3615.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (53 samples, 0.18%)</title><rect x="23.3653%" y="3637" width="0.1779%" height="15" fill="rgb(233,93,31)" fg:x="6961" fg:w="53"/><text x="23.4553%" y="3647.50"></text></g><g><title>pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="23.5432%" y="3637" width="0.0101%" height="15" fill="rgb(239,81,33)" fg:x="7014" fg:w="3"/><text x="23.6332%" y="3647.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (118 samples, 0.40%)</title><rect x="23.1706%" y="3653" width="0.3961%" height="15" fill="rgb(213,120,34)" fg:x="6903" fg:w="118"/><text x="23.2607%" y="3663.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (4 samples, 0.01%)</title><rect x="23.5533%" y="3637" width="0.0134%" height="15" fill="rgb(243,49,53)" fg:x="7017" fg:w="4"/><text x="23.6433%" y="3647.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (125 samples, 0.42%)</title><rect x="23.1539%" y="3669" width="0.4196%" height="15" fill="rgb(247,216,33)" fg:x="6898" fg:w="125"/><text x="23.2439%" y="3679.50"></text></g><g><title>&lt;http_body_util::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::poll_frame (140 samples, 0.47%)</title><rect x="23.1069%" y="3717" width="0.4699%" height="15" fill="rgb(226,26,14)" fg:x="6884" fg:w="140"/><text x="23.1969%" y="3727.50"></text></g><g><title>&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (139 samples, 0.47%)</title><rect x="23.1102%" y="3701" width="0.4666%" height="15" fill="rgb(215,49,53)" fg:x="6885" fg:w="139"/><text x="23.2002%" y="3711.50"></text></g><g><title>&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (137 samples, 0.46%)</title><rect x="23.1169%" y="3685" width="0.4599%" height="15" fill="rgb(245,162,40)" fg:x="6887" fg:w="137"/><text x="23.2070%" y="3695.50"></text></g><g><title>&lt;http_body_util::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::poll_frame (145 samples, 0.49%)</title><rect x="23.1069%" y="3733" width="0.4867%" height="15" fill="rgb(229,68,17)" fg:x="6884" fg:w="145"/><text x="23.1969%" y="3743.50"></text></g><g><title>&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (5 samples, 0.02%)</title><rect x="23.5768%" y="3717" width="0.0168%" height="15" fill="rgb(213,182,10)" fg:x="7024" fg:w="5"/><text x="23.6668%" y="3727.50"></text></g><g><title>&lt;http_body_util::limited::Limited&lt;B&gt; as http_body::Body&gt;::poll_frame (12 samples, 0.04%)</title><rect x="23.5969%" y="3733" width="0.0403%" height="15" fill="rgb(245,125,30)" fg:x="7030" fg:w="12"/><text x="23.6869%" y="3743.50"></text></g><g><title>&lt;&amp;mut T as http_body::Body&gt;::poll_frame (163 samples, 0.55%)</title><rect x="23.0934%" y="3749" width="0.5471%" height="15" fill="rgb(232,202,2)" fg:x="6880" fg:w="163"/><text x="23.1835%" y="3759.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (17 samples, 0.06%)</title><rect x="23.6406%" y="3717" width="0.0571%" height="15" fill="rgb(237,140,51)" fg:x="7043" fg:w="17"/><text x="23.7306%" y="3727.50"></text></g><g><title>&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::gas_price::_{{closure}} (4 samples, 0.01%)</title><rect x="23.6976%" y="3717" width="0.0134%" height="15" fill="rgb(236,157,25)" fg:x="7060" fg:w="4"/><text x="23.7876%" y="3727.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;i32&gt;&gt;::from (4 samples, 0.01%)</title><rect x="23.6976%" y="3701" width="0.0134%" height="15" fill="rgb(219,209,0)" fg:x="7060" fg:w="4"/><text x="23.7876%" y="3711.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="23.7346%" y="3701" width="0.0134%" height="15" fill="rgb(240,116,54)" fg:x="7071" fg:w="4"/><text x="23.8246%" y="3711.50"></text></g><g><title>&lt;zksync_types::api::Transaction as core::clone::Clone&gt;::clone (10 samples, 0.03%)</title><rect x="23.7513%" y="3701" width="0.0336%" height="15" fill="rgb(216,10,36)" fg:x="7076" fg:w="10"/><text x="23.8414%" y="3711.50"></text></g><g><title>_platform_memmove (8 samples, 0.03%)</title><rect x="23.7883%" y="3701" width="0.0269%" height="15" fill="rgb(222,72,44)" fg:x="7087" fg:w="8"/><text x="23.8783%" y="3711.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="23.8151%" y="3701" width="0.0101%" height="15" fill="rgb(232,159,9)" fg:x="7095" fg:w="3"/><text x="23.9051%" y="3711.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="23.8252%" y="3701" width="0.0101%" height="15" fill="rgb(210,39,32)" fg:x="7098" fg:w="3"/><text x="23.9152%" y="3711.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="23.8252%" y="3685" width="0.0101%" height="15" fill="rgb(216,194,45)" fg:x="7098" fg:w="3"/><text x="23.9152%" y="3695.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (4 samples, 0.01%)</title><rect x="23.8420%" y="3685" width="0.0134%" height="15" fill="rgb(218,18,35)" fg:x="7103" fg:w="4"/><text x="23.9320%" y="3695.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="23.8554%" y="3685" width="0.0101%" height="15" fill="rgb(207,83,51)" fg:x="7107" fg:w="3"/><text x="23.9454%" y="3695.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (6 samples, 0.02%)</title><rect x="23.8655%" y="3685" width="0.0201%" height="15" fill="rgb(225,63,43)" fg:x="7110" fg:w="6"/><text x="23.9555%" y="3695.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="23.8990%" y="3685" width="0.0134%" height="15" fill="rgb(207,57,36)" fg:x="7120" fg:w="4"/><text x="23.9890%" y="3695.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (7 samples, 0.02%)</title><rect x="23.9125%" y="3685" width="0.0235%" height="15" fill="rgb(216,99,33)" fg:x="7124" fg:w="7"/><text x="24.0025%" y="3695.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="23.9427%" y="3669" width="0.0134%" height="15" fill="rgb(225,42,16)" fg:x="7133" fg:w="4"/><text x="24.0327%" y="3679.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="23.9427%" y="3653" width="0.0134%" height="15" fill="rgb(220,201,45)" fg:x="7133" fg:w="4"/><text x="24.0327%" y="3663.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.03%)</title><rect x="23.9360%" y="3685" width="0.0302%" height="15" fill="rgb(225,33,4)" fg:x="7131" fg:w="9"/><text x="24.0260%" y="3695.50"></text></g><g><title>hashbrown::raw::inner::ProbeSeq::move_next (5 samples, 0.02%)</title><rect x="23.9695%" y="3685" width="0.0168%" height="15" fill="rgb(224,33,50)" fg:x="7141" fg:w="5"/><text x="24.0595%" y="3695.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (63 samples, 0.21%)</title><rect x="23.8420%" y="3701" width="0.2115%" height="15" fill="rgb(246,198,51)" fg:x="7103" fg:w="63"/><text x="23.9320%" y="3711.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (19 samples, 0.06%)</title><rect x="23.9897%" y="3685" width="0.0638%" height="15" fill="rgb(205,22,4)" fg:x="7147" fg:w="19"/><text x="24.0797%" y="3695.50"></text></g><g><title>zksync_os_sequencer::storage::in_memory_tx_receipts::InMemoryTxReceipts::get (4 samples, 0.01%)</title><rect x="24.0534%" y="3701" width="0.0134%" height="15" fill="rgb(206,3,8)" fg:x="7166" fg:w="4"/><text x="24.1434%" y="3711.50"></text></g><g><title>&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::get_transaction_receipt::_{{closure}} (108 samples, 0.36%)</title><rect x="23.7111%" y="3717" width="0.3625%" height="15" fill="rgb(251,23,15)" fg:x="7064" fg:w="108"/><text x="23.8011%" y="3727.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.05%)</title><rect x="24.2481%" y="3701" width="0.0503%" height="15" fill="rgb(252,88,28)" fg:x="7224" fg:w="15"/><text x="24.3381%" y="3711.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (5 samples, 0.02%)</title><rect x="24.3220%" y="3685" width="0.0168%" height="15" fill="rgb(212,127,14)" fg:x="7246" fg:w="5"/><text x="24.4120%" y="3695.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.02%)</title><rect x="24.3387%" y="3685" width="0.0201%" height="15" fill="rgb(247,145,37)" fg:x="7251" fg:w="6"/><text x="24.4288%" y="3695.50"></text></g><g><title>_free (15 samples, 0.05%)</title><rect x="24.3622%" y="3685" width="0.0503%" height="15" fill="rgb(209,117,53)" fg:x="7258" fg:w="15"/><text x="24.4523%" y="3695.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="24.5200%" y="3669" width="0.0201%" height="15" fill="rgb(212,90,42)" fg:x="7305" fg:w="6"/><text x="24.6100%" y="3679.50"></text></g><g><title>_nanov2_free (44 samples, 0.15%)</title><rect x="24.4126%" y="3685" width="0.1477%" height="15" fill="rgb(218,164,37)" fg:x="7273" fg:w="44"/><text x="24.5026%" y="3695.50"></text></g><g><title>_platform_memset (6 samples, 0.02%)</title><rect x="24.5401%" y="3669" width="0.0201%" height="15" fill="rgb(246,65,34)" fg:x="7311" fg:w="6"/><text x="24.6302%" y="3679.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.28%)</title><rect x="24.2985%" y="3701" width="0.2752%" height="15" fill="rgb(231,100,33)" fg:x="7239" fg:w="82"/><text x="24.3885%" y="3711.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.01%)</title><rect x="24.5737%" y="3701" width="0.0101%" height="15" fill="rgb(228,126,14)" fg:x="7321" fg:w="3"/><text x="24.6637%" y="3711.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (39 samples, 0.13%)</title><rect x="24.5972%" y="3701" width="0.1309%" height="15" fill="rgb(215,173,21)" fg:x="7328" fg:w="39"/><text x="24.6872%" y="3711.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.07%)</title><rect x="24.7281%" y="3701" width="0.0671%" height="15" fill="rgb(210,6,40)" fg:x="7367" fg:w="20"/><text x="24.8181%" y="3711.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="24.7952%" y="3701" width="0.0134%" height="15" fill="rgb(212,48,18)" fg:x="7387" fg:w="4"/><text x="24.8853%" y="3711.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="24.8087%" y="3701" width="0.0134%" height="15" fill="rgb(230,214,11)" fg:x="7391" fg:w="4"/><text x="24.8987%" y="3711.50"></text></g><g><title>DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="24.8221%" y="3685" width="0.0168%" height="15" fill="rgb(254,105,39)" fg:x="7395" fg:w="5"/><text x="24.9121%" y="3695.50"></text></g><g><title>_malloc_zone_malloc (23 samples, 0.08%)</title><rect x="24.8422%" y="3685" width="0.0772%" height="15" fill="rgb(245,158,5)" fg:x="7401" fg:w="23"/><text x="24.9322%" y="3695.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.22%)</title><rect x="24.8221%" y="3701" width="0.2249%" height="15" fill="rgb(249,208,11)" fg:x="7395" fg:w="67"/><text x="24.9121%" y="3711.50"></text></g><g><title>nanov2_malloc_type (38 samples, 0.13%)</title><rect x="24.9194%" y="3685" width="0.1276%" height="15" fill="rgb(210,39,28)" fg:x="7424" fg:w="38"/><text x="25.0095%" y="3695.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.03%)</title><rect x="25.0571%" y="3701" width="0.0269%" height="15" fill="rgb(211,56,53)" fg:x="7465" fg:w="8"/><text x="25.1471%" y="3711.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (6 samples, 0.02%)</title><rect x="25.1074%" y="3701" width="0.0201%" height="15" fill="rgb(226,201,30)" fg:x="7480" fg:w="6"/><text x="25.1974%" y="3711.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (13 samples, 0.04%)</title><rect x="25.1276%" y="3701" width="0.0436%" height="15" fill="rgb(239,101,34)" fg:x="7486" fg:w="13"/><text x="25.2176%" y="3711.50"></text></g><g><title>core::ptr::read_volatile (4 samples, 0.01%)</title><rect x="25.1712%" y="3701" width="0.0134%" height="15" fill="rgb(226,209,5)" fg:x="7499" fg:w="4"/><text x="25.2612%" y="3711.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="25.1846%" y="3701" width="0.0101%" height="15" fill="rgb(250,105,47)" fg:x="7503" fg:w="3"/><text x="25.2746%" y="3711.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="25.1846%" y="3685" width="0.0101%" height="15" fill="rgb(230,72,3)" fg:x="7503" fg:w="3"/><text x="25.2746%" y="3695.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.01%)</title><rect x="25.1947%" y="3701" width="0.0134%" height="15" fill="rgb(232,218,39)" fg:x="7506" fg:w="4"/><text x="25.2847%" y="3711.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6 samples, 0.02%)</title><rect x="25.2081%" y="3701" width="0.0201%" height="15" fill="rgb(248,166,6)" fg:x="7510" fg:w="6"/><text x="25.2981%" y="3711.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.01%)</title><rect x="25.2282%" y="3701" width="0.0101%" height="15" fill="rgb(247,89,20)" fg:x="7516" fg:w="3"/><text x="25.3183%" y="3711.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.02%)</title><rect x="25.2383%" y="3701" width="0.0201%" height="15" fill="rgb(248,130,54)" fg:x="7519" fg:w="6"/><text x="25.3283%" y="3711.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (4 samples, 0.01%)</title><rect x="25.2585%" y="3701" width="0.0134%" height="15" fill="rgb(234,196,4)" fg:x="7525" fg:w="4"/><text x="25.3485%" y="3711.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (3 samples, 0.01%)</title><rect x="25.2719%" y="3701" width="0.0101%" height="15" fill="rgb(250,143,31)" fg:x="7529" fg:w="3"/><text x="25.3619%" y="3711.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.01%)</title><rect x="25.2820%" y="3701" width="0.0134%" height="15" fill="rgb(211,110,34)" fg:x="7532" fg:w="4"/><text x="25.3720%" y="3711.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.01%)</title><rect x="25.2987%" y="3701" width="0.0101%" height="15" fill="rgb(215,124,48)" fg:x="7537" fg:w="3"/><text x="25.3887%" y="3711.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (3 samples, 0.01%)</title><rect x="25.2987%" y="3685" width="0.0101%" height="15" fill="rgb(216,46,13)" fg:x="7537" fg:w="3"/><text x="25.3887%" y="3695.50"></text></g><g><title>zksync_basic_types::L2ChainId::new (3 samples, 0.01%)</title><rect x="25.3088%" y="3701" width="0.0101%" height="15" fill="rgb(205,184,25)" fg:x="7540" fg:w="3"/><text x="25.3988%" y="3711.50"></text></g><g><title>zksync_os_sequencer::api::api_tx_operations::validate_tx_sender_balance (3 samples, 0.01%)</title><rect x="25.3189%" y="3701" width="0.0101%" height="15" fill="rgb(228,1,10)" fg:x="7543" fg:w="3"/><text x="25.4089%" y="3711.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="25.3491%" y="3685" width="0.0201%" height="15" fill="rgb(213,116,27)" fg:x="7552" fg:w="6"/><text x="25.4391%" y="3695.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.01%)</title><rect x="25.3927%" y="3669" width="0.0101%" height="15" fill="rgb(241,95,50)" fg:x="7565" fg:w="3"/><text x="25.4827%" y="3679.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="25.4028%" y="3669" width="0.0101%" height="15" fill="rgb(238,48,32)" fg:x="7568" fg:w="3"/><text x="25.4928%" y="3679.50"></text></g><g><title>rlp::impls::_&lt;impl rlp::traits::Decodable for u64&gt;::decode (3 samples, 0.01%)</title><rect x="25.4129%" y="3669" width="0.0101%" height="15" fill="rgb(235,113,49)" fg:x="7571" fg:w="3"/><text x="25.5029%" y="3679.50"></text></g><g><title>rlp::rlpin::BasicDecoder::decode_value (3 samples, 0.01%)</title><rect x="25.4129%" y="3653" width="0.0101%" height="15" fill="rgb(205,127,43)" fg:x="7571" fg:w="3"/><text x="25.5029%" y="3663.50"></text></g><g><title>rlp::rlpin::Rlp::at (4 samples, 0.01%)</title><rect x="25.4229%" y="3669" width="0.0134%" height="15" fill="rgb(250,162,2)" fg:x="7574" fg:w="4"/><text x="25.5129%" y="3679.50"></text></g><g><title>rlp::rlpin::Rlp::at_with_offset (3 samples, 0.01%)</title><rect x="25.4263%" y="3653" width="0.0101%" height="15" fill="rgb(220,13,41)" fg:x="7575" fg:w="3"/><text x="25.5163%" y="3663.50"></text></g><g><title>rlp::rlpin::PayloadInfo::from (3 samples, 0.01%)</title><rect x="25.4431%" y="3653" width="0.0101%" height="15" fill="rgb(249,221,25)" fg:x="7580" fg:w="3"/><text x="25.5331%" y="3663.50"></text></g><g><title>rlp::rlpin::Rlp::item_count (16 samples, 0.05%)</title><rect x="25.4364%" y="3669" width="0.0537%" height="15" fill="rgb(215,208,19)" fg:x="7578" fg:w="16"/><text x="25.5264%" y="3679.50"></text></g><g><title>rlp::rlpin::Rlp::at_with_offset (11 samples, 0.04%)</title><rect x="25.4531%" y="3653" width="0.0369%" height="15" fill="rgb(236,175,2)" fg:x="7583" fg:w="11"/><text x="25.5432%" y="3663.50"></text></g><g><title>rlp::rlpin::PayloadInfo::from (3 samples, 0.01%)</title><rect x="25.4800%" y="3637" width="0.0101%" height="15" fill="rgb(241,52,2)" fg:x="7591" fg:w="3"/><text x="25.5700%" y="3647.50"></text></g><g><title>primitive_types::rlp::_&lt;impl rlp::traits::Decodable for primitive_types::U256&gt;::decode (11 samples, 0.04%)</title><rect x="25.5035%" y="3653" width="0.0369%" height="15" fill="rgb(248,140,14)" fg:x="7598" fg:w="11"/><text x="25.5935%" y="3663.50"></text></g><g><title>rlp::rlpin::BasicDecoder::decode_value (10 samples, 0.03%)</title><rect x="25.5068%" y="3637" width="0.0336%" height="15" fill="rgb(253,22,42)" fg:x="7599" fg:w="10"/><text x="25.5969%" y="3647.50"></text></g><g><title>rlp::rlpin::Rlp::at (4 samples, 0.01%)</title><rect x="25.5404%" y="3653" width="0.0134%" height="15" fill="rgb(234,61,47)" fg:x="7609" fg:w="4"/><text x="25.6304%" y="3663.50"></text></g><g><title>rlp::rlpin::Rlp::at_with_offset (3 samples, 0.01%)</title><rect x="25.5438%" y="3637" width="0.0101%" height="15" fill="rgb(208,226,15)" fg:x="7610" fg:w="3"/><text x="25.6338%" y="3647.50"></text></g><g><title>rlp::rlpin::Rlp::val_at (20 samples, 0.07%)</title><rect x="25.4901%" y="3669" width="0.0671%" height="15" fill="rgb(217,221,4)" fg:x="7594" fg:w="20"/><text x="25.5801%" y="3679.50"></text></g><g><title>primitive_types::rlp::_&lt;impl rlp::traits::Decodable for primitive_types::U256&gt;::decode (7 samples, 0.02%)</title><rect x="25.5773%" y="3653" width="0.0235%" height="15" fill="rgb(212,174,34)" fg:x="7620" fg:w="7"/><text x="25.6673%" y="3663.50"></text></g><g><title>rlp::rlpin::BasicDecoder::decode_value (7 samples, 0.02%)</title><rect x="25.5773%" y="3637" width="0.0235%" height="15" fill="rgb(253,83,4)" fg:x="7620" fg:w="7"/><text x="25.6673%" y="3647.50"></text></g><g><title>rlp::rlpin::Rlp::at (6 samples, 0.02%)</title><rect x="25.6109%" y="3653" width="0.0201%" height="15" fill="rgb(250,195,49)" fg:x="7630" fg:w="6"/><text x="25.7009%" y="3663.50"></text></g><g><title>rlp::rlpin::Rlp::at_with_offset (3 samples, 0.01%)</title><rect x="25.6210%" y="3637" width="0.0101%" height="15" fill="rgb(241,192,25)" fg:x="7633" fg:w="3"/><text x="25.7110%" y="3647.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::decode_standard_fields (22 samples, 0.07%)</title><rect x="25.5639%" y="3669" width="0.0738%" height="15" fill="rgb(208,124,10)" fg:x="7616" fg:w="22"/><text x="25.6539%" y="3679.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (3 samples, 0.01%)</title><rect x="25.6613%" y="3637" width="0.0101%" height="15" fill="rgb(222,33,0)" fg:x="7645" fg:w="3"/><text x="25.7513%" y="3647.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (3 samples, 0.01%)</title><rect x="25.6713%" y="3637" width="0.0101%" height="15" fill="rgb(234,209,28)" fg:x="7648" fg:w="3"/><text x="25.7613%" y="3647.50"></text></g><g><title>zksync_basic_types::web3::keccak256 (34 samples, 0.11%)</title><rect x="25.6545%" y="3653" width="0.1141%" height="15" fill="rgb(224,11,23)" fg:x="7643" fg:w="34"/><text x="25.7445%" y="3663.50"></text></g><g><title>tiny_keccak::keccakf::keccakf (26 samples, 0.09%)</title><rect x="25.6814%" y="3637" width="0.0873%" height="15" fill="rgb(232,99,1)" fg:x="7651" fg:w="26"/><text x="25.7714%" y="3647.50"></text></g><g><title>_szone_free (4 samples, 0.01%)</title><rect x="25.7854%" y="3637" width="0.0134%" height="15" fill="rgb(237,95,45)" fg:x="7682" fg:w="4"/><text x="25.8755%" y="3647.50"></text></g><g><title>free_small (5 samples, 0.02%)</title><rect x="25.7989%" y="3637" width="0.0168%" height="15" fill="rgb(208,109,11)" fg:x="7686" fg:w="5"/><text x="25.8889%" y="3647.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.01%)</title><rect x="25.8257%" y="3605" width="0.0101%" height="15" fill="rgb(216,190,48)" fg:x="7694" fg:w="3"/><text x="25.9157%" y="3615.50"></text></g><g><title>free_tiny (8 samples, 0.03%)</title><rect x="25.8157%" y="3637" width="0.0269%" height="15" fill="rgb(251,171,36)" fg:x="7691" fg:w="8"/><text x="25.9057%" y="3647.50"></text></g><g><title>tiny_free_no_lock (8 samples, 0.03%)</title><rect x="25.8157%" y="3621" width="0.0269%" height="15" fill="rgb(230,62,22)" fg:x="7691" fg:w="8"/><text x="25.9057%" y="3631.50"></text></g><g><title>small_malloc_should_clear (8 samples, 0.03%)</title><rect x="25.8593%" y="3605" width="0.0269%" height="15" fill="rgb(225,114,35)" fg:x="7704" fg:w="8"/><text x="25.9493%" y="3615.50"></text></g><g><title>small_malloc_from_free_list (4 samples, 0.01%)</title><rect x="25.8727%" y="3589" width="0.0134%" height="15" fill="rgb(215,118,42)" fg:x="7708" fg:w="4"/><text x="25.9627%" y="3599.50"></text></g><g><title>rlp::stream::RlpStream::new (19 samples, 0.06%)</title><rect x="25.8459%" y="3637" width="0.0638%" height="15" fill="rgb(243,119,21)" fg:x="7700" fg:w="19"/><text x="25.9359%" y="3647.50"></text></g><g><title>szone_malloc_should_clear (17 samples, 0.06%)</title><rect x="25.8526%" y="3621" width="0.0571%" height="15" fill="rgb(252,177,53)" fg:x="7702" fg:w="17"/><text x="25.9426%" y="3631.50"></text></g><g><title>tiny_malloc_should_clear (7 samples, 0.02%)</title><rect x="25.8861%" y="3605" width="0.0235%" height="15" fill="rgb(237,209,29)" fg:x="7712" fg:w="7"/><text x="25.9762%" y="3615.50"></text></g><g><title>tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="25.8929%" y="3589" width="0.0168%" height="15" fill="rgb(212,65,23)" fg:x="7714" fg:w="5"/><text x="25.9829%" y="3599.50"></text></g><g><title>primitive_types::rlp::_&lt;impl rlp::traits::Encodable for primitive_types::H160&gt;::rlp_append (10 samples, 0.03%)</title><rect x="25.9264%" y="3621" width="0.0336%" height="15" fill="rgb(230,222,46)" fg:x="7724" fg:w="10"/><text x="26.0164%" y="3631.50"></text></g><g><title>rlp::stream::BasicEncoder::encode_value (10 samples, 0.03%)</title><rect x="25.9264%" y="3605" width="0.0336%" height="15" fill="rgb(215,135,32)" fg:x="7724" fg:w="10"/><text x="26.0164%" y="3615.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (9 samples, 0.03%)</title><rect x="25.9298%" y="3589" width="0.0302%" height="15" fill="rgb(246,101,22)" fg:x="7725" fg:w="9"/><text x="26.0198%" y="3599.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="25.9432%" y="3573" width="0.0168%" height="15" fill="rgb(206,107,13)" fg:x="7729" fg:w="5"/><text x="26.0332%" y="3583.50"></text></g><g><title>primitive_types::rlp::_&lt;impl rlp::traits::Encodable for primitive_types::U256&gt;::rlp_append (6 samples, 0.02%)</title><rect x="25.9600%" y="3621" width="0.0201%" height="15" fill="rgb(250,100,44)" fg:x="7734" fg:w="6"/><text x="26.0500%" y="3631.50"></text></g><g><title>rlp::stream::BasicEncoder::encode_value (5 samples, 0.02%)</title><rect x="25.9633%" y="3605" width="0.0168%" height="15" fill="rgb(231,147,38)" fg:x="7735" fg:w="5"/><text x="26.0534%" y="3615.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (3 samples, 0.01%)</title><rect x="25.9701%" y="3589" width="0.0101%" height="15" fill="rgb(229,8,40)" fg:x="7737" fg:w="3"/><text x="26.0601%" y="3599.50"></text></g><g><title>rlp::impls::_&lt;impl rlp::traits::Encodable for alloc::string::String&gt;::rlp_append (3 samples, 0.01%)</title><rect x="25.9801%" y="3621" width="0.0101%" height="15" fill="rgb(221,135,30)" fg:x="7740" fg:w="3"/><text x="26.0701%" y="3631.50"></text></g><g><title>rlp::stream::RlpStream::begin_unbounded_list (3 samples, 0.01%)</title><rect x="25.9969%" y="3621" width="0.0101%" height="15" fill="rgb(249,193,18)" fg:x="7745" fg:w="3"/><text x="26.0869%" y="3631.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::get_default_signed_message (112 samples, 0.38%)</title><rect x="25.6378%" y="3669" width="0.3759%" height="15" fill="rgb(209,133,39)" fg:x="7638" fg:w="112"/><text x="25.7278%" y="3679.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::get_rlp (72 samples, 0.24%)</title><rect x="25.7720%" y="3653" width="0.2417%" height="15" fill="rgb(232,100,14)" fg:x="7678" fg:w="72"/><text x="25.8620%" y="3663.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::rlp (31 samples, 0.10%)</title><rect x="25.9096%" y="3637" width="0.1041%" height="15" fill="rgb(224,185,1)" fg:x="7719" fg:w="31"/><text x="25.9996%" y="3647.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (3 samples, 0.01%)</title><rect x="26.0305%" y="3637" width="0.0101%" height="15" fill="rgb(223,139,8)" fg:x="7755" fg:w="3"/><text x="26.1205%" y="3647.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::get_tx_hash_with_signed_message (32 samples, 0.11%)</title><rect x="26.0137%" y="3669" width="0.1074%" height="15" fill="rgb(232,213,38)" fg:x="7750" fg:w="32"/><text x="26.1037%" y="3679.50"></text></g><g><title>zksync_basic_types::web3::keccak256 (31 samples, 0.10%)</title><rect x="26.0171%" y="3653" width="0.1041%" height="15" fill="rgb(207,94,22)" fg:x="7751" fg:w="31"/><text x="26.1071%" y="3663.50"></text></g><g><title>tiny_keccak::keccakf::keccakf (24 samples, 0.08%)</title><rect x="26.0405%" y="3637" width="0.0806%" height="15" fill="rgb(219,183,54)" fg:x="7758" fg:w="24"/><text x="26.1306%" y="3647.50"></text></g><g><title>_nanov2_free (3 samples, 0.01%)</title><rect x="26.1412%" y="3653" width="0.0101%" height="15" fill="rgb(216,185,54)" fg:x="7788" fg:w="3"/><text x="26.2313%" y="3663.50"></text></g><g><title>zksync_crypto_primitives::packed_eth_signature::PackedEthSignature::deserialize_packed (3 samples, 0.01%)</title><rect x="26.1547%" y="3653" width="0.0101%" height="15" fill="rgb(254,217,39)" fg:x="7792" fg:w="3"/><text x="26.2447%" y="3663.50"></text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (3 samples, 0.01%)</title><rect x="26.1983%" y="3621" width="0.0101%" height="15" fill="rgb(240,178,23)" fg:x="7805" fg:w="3"/><text x="26.2883%" y="3631.50"></text></g><g><title>zksync_basic_types::web3::keccak256 (57 samples, 0.19%)</title><rect x="26.1782%" y="3637" width="0.1913%" height="15" fill="rgb(218,11,47)" fg:x="7799" fg:w="57"/><text x="26.2682%" y="3647.50"></text></g><g><title>tiny_keccak::keccakf::keccakf (48 samples, 0.16%)</title><rect x="26.2084%" y="3621" width="0.1611%" height="15" fill="rgb(218,51,51)" fg:x="7808" fg:w="48"/><text x="26.2984%" y="3631.50"></text></g><g><title>rustsecp256k1_v0_8_1_ec_pubkey_serialize (3 samples, 0.01%)</title><rect x="26.4299%" y="3621" width="0.0101%" height="15" fill="rgb(238,126,27)" fg:x="7874" fg:w="3"/><text x="26.5199%" y="3631.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_mul (241 samples, 0.81%)</title><rect x="27.5577%" y="3573" width="0.8089%" height="15" fill="rgb(249,202,22)" fg:x="8210" fg:w="241"/><text x="27.6477%" y="3583.50">r..</text></g><g><title>rustsecp256k1_v0_8_1_gej_add_ge_var (89 samples, 0.30%)</title><rect x="28.3667%" y="3573" width="0.2987%" height="15" fill="rgb(254,195,49)" fg:x="8451" fg:w="89"/><text x="28.4567%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_sqr (39 samples, 0.13%)</title><rect x="28.5345%" y="3557" width="0.1309%" height="15" fill="rgb(208,123,14)" fg:x="8501" fg:w="39"/><text x="28.6245%" y="3567.50"></text></g><g><title>rustsecp256k1_v0_8_1_ecmult_odd_multiples_table (344 samples, 1.15%)</title><rect x="27.5477%" y="3589" width="1.1547%" height="15" fill="rgb(224,200,8)" fg:x="8207" fg:w="344"/><text x="27.6377%" y="3599.50">rus..</text></g><g><title>rustsecp256k1_v0_8_1_gej_double (11 samples, 0.04%)</title><rect x="28.6654%" y="3573" width="0.0369%" height="15" fill="rgb(217,61,36)" fg:x="8540" fg:w="11"/><text x="28.7554%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_sqr (7 samples, 0.02%)</title><rect x="28.6788%" y="3557" width="0.0235%" height="15" fill="rgb(206,35,45)" fg:x="8544" fg:w="7"/><text x="28.7688%" y="3567.50"></text></g><g><title>rustsecp256k1_v0_8_1_ecmult_table_get_ge_storage (21 samples, 0.07%)</title><rect x="28.7023%" y="3589" width="0.0705%" height="15" fill="rgb(217,65,33)" fg:x="8551" fg:w="21"/><text x="28.7923%" y="3599.50"></text></g><g><title>rustsecp256k1_v0_8_1_ecmult_wnaf (115 samples, 0.39%)</title><rect x="28.7728%" y="3589" width="0.3860%" height="15" fill="rgb(222,158,48)" fg:x="8572" fg:w="115"/><text x="28.8628%" y="3599.50"></text></g><g><title>_platform_memset (4 samples, 0.01%)</title><rect x="29.1454%" y="3573" width="0.0134%" height="15" fill="rgb(254,2,54)" fg:x="8683" fg:w="4"/><text x="29.2354%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_mul (3,519 samples, 11.81%)</title><rect x="29.1588%" y="3589" width="11.8119%" height="15" fill="rgb(250,143,38)" fg:x="8687" fg:w="3519"/><text x="29.2488%" y="3599.50">rustsecp256k1_v0_8_1_fe_mul</text></g><g><title>rustsecp256k1_v0_8_1_ge_table_set_globalz (15 samples, 0.05%)</title><rect x="40.9707%" y="3589" width="0.0503%" height="15" fill="rgb(248,25,0)" fg:x="12206" fg:w="15"/><text x="41.0607%" y="3599.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_mul (20 samples, 0.07%)</title><rect x="41.8032%" y="3573" width="0.0671%" height="15" fill="rgb(206,152,27)" fg:x="12454" fg:w="20"/><text x="41.8932%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_gej_add_ge_var (452 samples, 1.52%)</title><rect x="41.0211%" y="3589" width="1.5172%" height="15" fill="rgb(240,77,30)" fg:x="12221" fg:w="452"/><text x="41.1111%" y="3599.50">rusts..</text></g><g><title>rustsecp256k1_v0_8_1_fe_sqr (199 samples, 0.67%)</title><rect x="41.8703%" y="3573" width="0.6680%" height="15" fill="rgb(231,5,3)" fg:x="12474" fg:w="199"/><text x="41.9603%" y="3583.50">r..</text></g><g><title>rustsecp256k1_v0_8_1_fe_mul (16 samples, 0.05%)</title><rect x="43.5855%" y="3573" width="0.0537%" height="15" fill="rgb(207,226,32)" fg:x="12985" fg:w="16"/><text x="43.6755%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_gej_add_zinv_var (376 samples, 1.26%)</title><rect x="42.5383%" y="3589" width="1.2621%" height="15" fill="rgb(222,207,47)" fg:x="12673" fg:w="376"/><text x="42.6283%" y="3599.50">rus..</text></g><g><title>rustsecp256k1_v0_8_1_fe_sqr (48 samples, 0.16%)</title><rect x="43.6392%" y="3573" width="0.1611%" height="15" fill="rgb(229,115,45)" fg:x="13001" fg:w="48"/><text x="43.7292%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_mul (7 samples, 0.02%)</title><rect x="45.3444%" y="3573" width="0.0235%" height="15" fill="rgb(224,191,6)" fg:x="13509" fg:w="7"/><text x="45.4344%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_gej_double (1,368 samples, 4.59%)</title><rect x="43.8003%" y="3589" width="4.5918%" height="15" fill="rgb(230,227,24)" fg:x="13049" fg:w="1368"/><text x="43.8904%" y="3599.50">rustsecp256k1_v0_8_..</text></g><g><title>rustsecp256k1_v0_8_1_fe_sqr (901 samples, 3.02%)</title><rect x="45.3679%" y="3573" width="3.0243%" height="15" fill="rgb(228,80,19)" fg:x="13516" fg:w="901"/><text x="45.4579%" y="3583.50">rustsecp256k..</text></g><g><title>rustsecp256k1_v0_8_1_scalar_mul (22 samples, 0.07%)</title><rect x="48.4190%" y="3573" width="0.0738%" height="15" fill="rgb(247,229,0)" fg:x="14425" fg:w="22"/><text x="48.5090%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_scalar_mul_512 (8 samples, 0.03%)</title><rect x="48.4660%" y="3557" width="0.0269%" height="15" fill="rgb(237,194,15)" fg:x="14439" fg:w="8"/><text x="48.5560%" y="3567.50"></text></g><g><title>rustsecp256k1_v0_8_1_ecmult (6,564 samples, 22.03%)</title><rect x="26.4635%" y="3605" width="22.0328%" height="15" fill="rgb(219,203,20)" fg:x="7884" fg:w="6564"/><text x="26.5535%" y="3615.50">rustsecp256k1_v0_8_1_ecmult</text></g><g><title>rustsecp256k1_v0_8_1_scalar_split_lambda (31 samples, 0.10%)</title><rect x="48.3922%" y="3589" width="0.1041%" height="15" fill="rgb(234,128,8)" fg:x="14417" fg:w="31"/><text x="48.4822%" y="3599.50"></text></g><g><title>rustsecp256k1_v0_8_1_fe_mul (92 samples, 0.31%)</title><rect x="48.4962%" y="3605" width="0.3088%" height="15" fill="rgb(248,202,8)" fg:x="14448" fg:w="92"/><text x="48.5862%" y="3615.50"></text></g><g><title>rustsecp256k1_v0_8_1_ge_set_gej_var (293 samples, 0.98%)</title><rect x="48.8050%" y="3605" width="0.9835%" height="15" fill="rgb(206,104,37)" fg:x="14540" fg:w="293"/><text x="48.8951%" y="3615.50">ru..</text></g><g><title>rustsecp256k1_v0_8_1_modinv64_var (284 samples, 0.95%)</title><rect x="48.8353%" y="3589" width="0.9533%" height="15" fill="rgb(223,8,27)" fg:x="14549" fg:w="284"/><text x="48.9253%" y="3599.50">ru..</text></g><g><title>rustsecp256k1_v0_8_1_modinv64_update_de_62 (38 samples, 0.13%)</title><rect x="49.6610%" y="3573" width="0.1276%" height="15" fill="rgb(216,217,28)" fg:x="14795" fg:w="38"/><text x="49.7510%" y="3583.50"></text></g><g><title>rustsecp256k1_v0_8_1_ge_set_xo_var (816 samples, 2.74%)</title><rect x="49.7885%" y="3605" width="2.7390%" height="15" fill="rgb(249,199,1)" fg:x="14833" fg:w="816"/><text x="49.8785%" y="3615.50">rustsecp25..</text></g><g><title>rustsecp256k1_v0_8_1_fe_sqr (7 samples, 0.02%)</title><rect x="52.5040%" y="3589" width="0.0235%" height="15" fill="rgb(240,85,17)" fg:x="15642" fg:w="7"/><text x="52.5940%" y="3599.50"></text></g><g><title>rustsecp256k1_v0_8_1_gej_add_ge_var (5 samples, 0.02%)</title><rect x="52.5275%" y="3605" width="0.0168%" height="15" fill="rgb(206,108,45)" fg:x="15649" fg:w="5"/><text x="52.6175%" y="3615.50"></text></g><g><title>rustsecp256k1_v0_8_1_gej_double (26 samples, 0.09%)</title><rect x="52.5510%" y="3605" width="0.0873%" height="15" fill="rgb(245,210,41)" fg:x="15656" fg:w="26"/><text x="52.6410%" y="3615.50"></text></g><g><title>rustsecp256k1_v0_8_1_modinv64_var (285 samples, 0.96%)</title><rect x="52.6383%" y="3605" width="0.9566%" height="15" fill="rgb(206,13,37)" fg:x="15682" fg:w="285"/><text x="52.7283%" y="3615.50">ru..</text></g><g><title>rustsecp256k1_v0_8_1_modinv64_update_de_62 (42 samples, 0.14%)</title><rect x="53.4539%" y="3589" width="0.1410%" height="15" fill="rgb(250,61,18)" fg:x="15925" fg:w="42"/><text x="53.5440%" y="3599.50"></text></g><g><title>rustsecp256k1_v0_8_1_pubkey_save (4 samples, 0.01%)</title><rect x="53.5949%" y="3605" width="0.0134%" height="15" fill="rgb(235,172,48)" fg:x="15967" fg:w="4"/><text x="53.6849%" y="3615.50"></text></g><g><title>rustsecp256k1_v0_8_1_scalar_mul (15 samples, 0.05%)</title><rect x="53.6084%" y="3605" width="0.0503%" height="15" fill="rgb(249,201,17)" fg:x="15971" fg:w="15"/><text x="53.6984%" y="3615.50"></text></g><g><title>rustsecp256k1_v0_8_1_scalar_mul_512 (4 samples, 0.01%)</title><rect x="53.6453%" y="3589" width="0.0134%" height="15" fill="rgb(219,208,6)" fg:x="15982" fg:w="4"/><text x="53.7353%" y="3599.50"></text></g><g><title>rustsecp256k1_v0_8_1_ecdsa_recover (8,110 samples, 27.22%)</title><rect x="26.4400%" y="3621" width="27.2221%" height="15" fill="rgb(248,31,23)" fg:x="7877" fg:w="8110"/><text x="26.5300%" y="3631.50">rustsecp256k1_v0_8_1_ecdsa_recover</text></g><g><title>rustsecp256k1_v0_8_1_ecdsa_recoverable_signature_parse_compact (9 samples, 0.03%)</title><rect x="53.6621%" y="3621" width="0.0302%" height="15" fill="rgb(245,15,42)" fg:x="15987" fg:w="9"/><text x="53.7521%" y="3631.50"></text></g><g><title>rustsecp256k1_v0_8_1_scalar_set_b32 (3 samples, 0.01%)</title><rect x="53.6822%" y="3605" width="0.0101%" height="15" fill="rgb(222,217,39)" fg:x="15993" fg:w="3"/><text x="53.7722%" y="3615.50"></text></g><g><title>zksync_crypto_primitives::packed_eth_signature::PackedEthSignature::signature_recover_signer (8,202 samples, 27.53%)</title><rect x="26.1647%" y="3653" width="27.5309%" height="15" fill="rgb(210,219,27)" fg:x="7795" fg:w="8202"/><text x="26.2548%" y="3663.50">zksync_crypto_primitives::packed_eth_signature::PackedEthSignature::signature_recover_signer</text></g><g><title>zksync_crypto_primitives::ecdsa_signature::recover (8,141 samples, 27.33%)</title><rect x="26.3695%" y="3637" width="27.3261%" height="15" fill="rgb(252,166,36)" fg:x="7856" fg:w="8141"/><text x="26.4595%" y="3647.50">zksync_crypto_primitives::ecdsa_signature::recover</text></g><g><title>nanov2_malloc_type (4 samples, 0.01%)</title><rect x="53.7023%" y="3637" width="0.0134%" height="15" fill="rgb(245,132,34)" fg:x="15999" fg:w="4"/><text x="53.7923%" y="3647.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::from_bytes_unverified (8,446 samples, 28.35%)</title><rect x="25.3726%" y="3685" width="28.3499%" height="15" fill="rgb(236,54,3)" fg:x="7559" fg:w="8446"/><text x="25.4626%" y="3695.50">zksync_types::transaction_request::TransactionRequest::from_bytes_unverified</text></g><g><title>zksync_types::transaction_request::TransactionRequest::recover_default_signer (8,223 samples, 27.60%)</title><rect x="26.1211%" y="3669" width="27.6014%" height="15" fill="rgb(241,173,43)" fg:x="7782" fg:w="8223"/><text x="26.2111%" y="3679.50">zksync_types::transaction_request::TransactionRequest::recover_default_signer</text></g><g><title>zksync_types::transaction_request::TransactionRequest::get_signature (8 samples, 0.03%)</title><rect x="53.6956%" y="3653" width="0.0269%" height="15" fill="rgb(215,190,9)" fg:x="15997" fg:w="8"/><text x="53.7856%" y="3663.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::from_bytes (8,457 samples, 28.39%)</title><rect x="25.3390%" y="3701" width="28.3868%" height="15" fill="rgb(242,101,16)" fg:x="7549" fg:w="8457"/><text x="25.4290%" y="3711.50">zksync_types::transaction_request::TransactionRequest::from_bytes</text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="53.7426%" y="3685" width="0.0101%" height="15" fill="rgb(223,190,21)" fg:x="16011" fg:w="3"/><text x="53.8326%" y="3695.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (12 samples, 0.04%)</title><rect x="53.7863%" y="3669" width="0.0403%" height="15" fill="rgb(215,228,25)" fg:x="16024" fg:w="12"/><text x="53.8763%" y="3679.50"></text></g><g><title>clock_gettime (11 samples, 0.04%)</title><rect x="53.7896%" y="3653" width="0.0369%" height="15" fill="rgb(225,36,22)" fg:x="16025" fg:w="11"/><text x="53.8796%" y="3663.50"></text></g><g><title>gettimeofday (9 samples, 0.03%)</title><rect x="53.7963%" y="3637" width="0.0302%" height="15" fill="rgb(251,106,46)" fg:x="16027" fg:w="9"/><text x="53.8863%" y="3647.50"></text></g><g><title>__commpage_gettimeofday_internal (7 samples, 0.02%)</title><rect x="53.8030%" y="3621" width="0.0235%" height="15" fill="rgb(208,90,1)" fg:x="16029" fg:w="7"/><text x="53.8930%" y="3631.50"></text></g><g><title>mach_absolute_time (7 samples, 0.02%)</title><rect x="53.8030%" y="3605" width="0.0235%" height="15" fill="rgb(243,10,4)" fg:x="16029" fg:w="7"/><text x="53.8930%" y="3615.50"></text></g><g><title>zksync_types::transaction_request::TransactionRequest::get_fee_data_checked (3 samples, 0.01%)</title><rect x="53.8299%" y="3669" width="0.0101%" height="15" fill="rgb(212,137,27)" fg:x="16037" fg:w="3"/><text x="53.9199%" y="3679.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,999 samples, 30.21%)</title><rect x="23.6406%" y="3733" width="30.2061%" height="15" fill="rgb(231,220,49)" fg:x="7043" fg:w="8999"/><text x="23.7306%" y="3743.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::send_raw_transaction::_{{closure}} (8,870 samples, 29.77%)</title><rect x="24.0736%" y="3717" width="29.7731%" height="15" fill="rgb(237,96,20)" fg:x="7172" fg:w="8870"/><text x="24.1636%" y="3727.50">&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::send_raw_transaction::_{{clos..</text></g><g><title>zksync_types::transaction_request::_&lt;impl zksync_types::l2::L2Tx&gt;::from_request (36 samples, 0.12%)</title><rect x="53.7258%" y="3701" width="0.1208%" height="15" fill="rgb(239,229,30)" fg:x="16006" fg:w="36"/><text x="53.8158%" y="3711.50"></text></g><g><title>zksync_types::transaction_request::_&lt;impl zksync_types::l2::L2Tx&gt;::from_request_unverified (28 samples, 0.09%)</title><rect x="53.7527%" y="3685" width="0.0940%" height="15" fill="rgb(219,65,33)" fg:x="16014" fg:w="28"/><text x="53.8427%" y="3695.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="53.8467%" y="3717" width="0.0101%" height="15" fill="rgb(243,134,7)" fg:x="16042" fg:w="3"/><text x="53.9367%" y="3727.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.07%)</title><rect x="53.8567%" y="3717" width="0.0671%" height="15" fill="rgb(216,177,54)" fg:x="16045" fg:w="20"/><text x="53.9467%" y="3727.50"></text></g><g><title>nanov2_malloc_type (20 samples, 0.07%)</title><rect x="53.8567%" y="3701" width="0.0671%" height="15" fill="rgb(211,160,20)" fg:x="16045" fg:w="20"/><text x="53.9467%" y="3711.50"></text></g><g><title>&lt;T as http::extensions::AnyClone&gt;::clone_box (12 samples, 0.04%)</title><rect x="53.9272%" y="3701" width="0.0403%" height="15" fill="rgb(239,85,39)" fg:x="16066" fg:w="12"/><text x="54.0172%" y="3711.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="53.9809%" y="3685" width="0.0168%" height="15" fill="rgb(232,125,22)" fg:x="16082" fg:w="5"/><text x="54.0709%" y="3695.50"></text></g><g><title>core::clone::Clone::clone (27 samples, 0.09%)</title><rect x="53.9239%" y="3717" width="0.0906%" height="15" fill="rgb(244,57,34)" fg:x="16065" fg:w="27"/><text x="54.0139%" y="3727.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.04%)</title><rect x="53.9776%" y="3701" width="0.0369%" height="15" fill="rgb(214,203,32)" fg:x="16081" fg:w="11"/><text x="54.0676%" y="3711.50"></text></g><g><title>nanov2_malloc_type (5 samples, 0.02%)</title><rect x="53.9977%" y="3685" width="0.0168%" height="15" fill="rgb(207,58,43)" fg:x="16087" fg:w="5"/><text x="54.0877%" y="3695.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="54.0145%" y="3717" width="0.0101%" height="15" fill="rgb(215,193,15)" fg:x="16092" fg:w="3"/><text x="54.1045%" y="3727.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="54.0145%" y="3701" width="0.0101%" height="15" fill="rgb(232,15,44)" fg:x="16092" fg:w="3"/><text x="54.1045%" y="3711.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (58 samples, 0.19%)</title><rect x="53.8467%" y="3733" width="0.1947%" height="15" fill="rgb(212,3,48)" fg:x="16042" fg:w="58"/><text x="53.9367%" y="3743.50"></text></g><g><title>&lt;jsonrpsee_core::server::method_response::ResponsePayload&lt;T&gt; as core::convert::From&lt;jsonrpsee_types::response::ResponsePayload&lt;T&gt;&gt;&gt;::from (5 samples, 0.02%)</title><rect x="54.0414%" y="3733" width="0.0168%" height="15" fill="rgb(218,128,7)" fg:x="16100" fg:w="5"/><text x="54.1314%" y="3743.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="54.0447%" y="3717" width="0.0134%" height="15" fill="rgb(226,216,39)" fg:x="16101" fg:w="4"/><text x="54.1347%" y="3727.50"></text></g><g><title>&lt;jsonrpsee_core::server::method_response::ResponsePayload&lt;T&gt; as jsonrpsee_core::server::IntoResponse&gt;::into_response (3 samples, 0.01%)</title><rect x="54.0581%" y="3733" width="0.0101%" height="15" fill="rgb(243,47,51)" fg:x="16105" fg:w="3"/><text x="54.1481%" y="3743.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="54.0850%" y="3717" width="0.0168%" height="15" fill="rgb(241,183,40)" fg:x="16113" fg:w="5"/><text x="54.1750%" y="3727.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.03%)</title><rect x="54.0783%" y="3733" width="0.0336%" height="15" fill="rgb(231,217,32)" fg:x="16111" fg:w="10"/><text x="54.1683%" y="3743.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.01%)</title><rect x="54.1018%" y="3717" width="0.0101%" height="15" fill="rgb(229,61,38)" fg:x="16118" fg:w="3"/><text x="54.1918%" y="3727.50"></text></g><g><title>_free (4 samples, 0.01%)</title><rect x="54.1219%" y="3717" width="0.0134%" height="15" fill="rgb(225,210,5)" fg:x="16124" fg:w="4"/><text x="54.2119%" y="3727.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.10%)</title><rect x="54.1118%" y="3733" width="0.0973%" height="15" fill="rgb(231,79,45)" fg:x="16121" fg:w="29"/><text x="54.2019%" y="3743.50"></text></g><g><title>_nanov2_free (22 samples, 0.07%)</title><rect x="54.1353%" y="3717" width="0.0738%" height="15" fill="rgb(224,100,7)" fg:x="16128" fg:w="22"/><text x="54.2253%" y="3727.50"></text></g><g><title>_platform_memset (5 samples, 0.02%)</title><rect x="54.1924%" y="3701" width="0.0168%" height="15" fill="rgb(241,198,18)" fg:x="16145" fg:w="5"/><text x="54.2824%" y="3711.50"></text></g><g><title>_nanov2_free (10 samples, 0.03%)</title><rect x="54.2797%" y="3701" width="0.0336%" height="15" fill="rgb(252,97,53)" fg:x="16171" fg:w="10"/><text x="54.3697%" y="3711.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (25 samples, 0.08%)</title><rect x="54.2360%" y="3733" width="0.0839%" height="15" fill="rgb(220,88,7)" fg:x="16158" fg:w="25"/><text x="54.3260%" y="3743.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (24 samples, 0.08%)</title><rect x="54.2394%" y="3717" width="0.0806%" height="15" fill="rgb(213,176,14)" fg:x="16159" fg:w="24"/><text x="54.3294%" y="3727.50"></text></g><g><title>jsonrpsee_core::server::method_response::MethodResponse::response (3 samples, 0.01%)</title><rect x="54.3233%" y="3733" width="0.0101%" height="15" fill="rgb(246,73,7)" fg:x="16184" fg:w="3"/><text x="54.4133%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::into_rpc::{{closure}}::{{closure}}&gt; (8 samples, 0.03%)</title><rect x="54.3737%" y="3717" width="0.0269%" height="15" fill="rgb(245,64,36)" fg:x="16199" fg:w="8"/><text x="54.4637%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_types::response::Response&lt;core::option::Option&lt;zksync_types::api::TransactionReceipt&gt;&gt;&gt; (10 samples, 0.03%)</title><rect x="54.4005%" y="3717" width="0.0336%" height="15" fill="rgb(245,80,10)" fg:x="16207" fg:w="10"/><text x="54.4905%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_types::response::ResponsePayload&lt;core::option::Option&lt;zksync_types::api::TransactionReceipt&gt;&gt;&gt; (5 samples, 0.02%)</title><rect x="54.4173%" y="3701" width="0.0168%" height="15" fill="rgb(232,107,50)" fg:x="16212" fg:w="5"/><text x="54.5073%" y="3711.50"></text></g><g><title>jsonrpsee_core::server::method_response::MethodResponse::response (21 samples, 0.07%)</title><rect x="54.4408%" y="3717" width="0.0705%" height="15" fill="rgb(253,3,0)" fg:x="16219" fg:w="21"/><text x="54.5308%" y="3727.50"></text></g><g><title>jsonrpsee_core::server::helpers::BoundedWriter::new (16 samples, 0.05%)</title><rect x="54.4576%" y="3701" width="0.0537%" height="15" fill="rgb(212,99,53)" fg:x="16224" fg:w="16"/><text x="54.5476%" y="3711.50"></text></g><g><title>nanov2_malloc_type (6 samples, 0.02%)</title><rect x="54.4911%" y="3685" width="0.0201%" height="15" fill="rgb(249,111,54)" fg:x="16234" fg:w="6"/><text x="54.5811%" y="3695.50"></text></g><g><title>jsonrpsee_types::response::Response&lt;T&gt;::new (5 samples, 0.02%)</title><rect x="54.5180%" y="3717" width="0.0168%" height="15" fill="rgb(249,55,30)" fg:x="16242" fg:w="5"/><text x="54.6080%" y="3727.50"></text></g><g><title>&lt;jsonrpsee_types::response::Response&lt;T&gt; as serde::ser::Serialize&gt;::serialize (9 samples, 0.03%)</title><rect x="54.5348%" y="3701" width="0.0302%" height="15" fill="rgb(237,47,42)" fg:x="16247" fg:w="9"/><text x="54.6248%" y="3711.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (4 samples, 0.01%)</title><rect x="54.5751%" y="3637" width="0.0134%" height="15" fill="rgb(211,20,18)" fg:x="16259" fg:w="4"/><text x="54.6651%" y="3647.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="54.5784%" y="3621" width="0.0101%" height="15" fill="rgb(231,203,46)" fg:x="16260" fg:w="3"/><text x="54.6684%" y="3631.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="54.5784%" y="3605" width="0.0101%" height="15" fill="rgb(237,142,3)" fg:x="16260" fg:w="3"/><text x="54.6684%" y="3615.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="54.6053%" y="3589" width="0.0201%" height="15" fill="rgb(241,107,1)" fg:x="16268" fg:w="6"/><text x="54.6953%" y="3599.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (24 samples, 0.08%)</title><rect x="54.5952%" y="3637" width="0.0806%" height="15" fill="rgb(229,83,13)" fg:x="16265" fg:w="24"/><text x="54.6852%" y="3647.50"></text></g><g><title>std::io::Write::write_all (23 samples, 0.08%)</title><rect x="54.5985%" y="3621" width="0.0772%" height="15" fill="rgb(241,91,40)" fg:x="16266" fg:w="23"/><text x="54.6886%" y="3631.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (23 samples, 0.08%)</title><rect x="54.5985%" y="3605" width="0.0772%" height="15" fill="rgb(225,3,45)" fg:x="16266" fg:w="23"/><text x="54.6886%" y="3615.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (15 samples, 0.05%)</title><rect x="54.6254%" y="3589" width="0.0503%" height="15" fill="rgb(244,223,14)" fg:x="16274" fg:w="15"/><text x="54.7154%" y="3599.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.04%)</title><rect x="54.6388%" y="3573" width="0.0369%" height="15" fill="rgb(224,124,37)" fg:x="16278" fg:w="11"/><text x="54.7288%" y="3583.50"></text></g><g><title>_realloc (11 samples, 0.04%)</title><rect x="54.6388%" y="3557" width="0.0369%" height="15" fill="rgb(251,171,30)" fg:x="16278" fg:w="11"/><text x="54.7288%" y="3567.50"></text></g><g><title>_malloc_zone_realloc (9 samples, 0.03%)</title><rect x="54.6455%" y="3541" width="0.0302%" height="15" fill="rgb(236,46,54)" fg:x="16280" fg:w="9"/><text x="54.7356%" y="3551.50"></text></g><g><title>nanov2_realloc (8 samples, 0.03%)</title><rect x="54.6489%" y="3525" width="0.0269%" height="15" fill="rgb(245,213,5)" fg:x="16281" fg:w="8"/><text x="54.7389%" y="3535.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="54.6623%" y="3509" width="0.0134%" height="15" fill="rgb(230,144,27)" fg:x="16285" fg:w="4"/><text x="54.7523%" y="3519.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="54.6657%" y="3493" width="0.0101%" height="15" fill="rgb(220,86,6)" fg:x="16286" fg:w="3"/><text x="54.7557%" y="3503.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="54.6657%" y="3477" width="0.0101%" height="15" fill="rgb(240,20,13)" fg:x="16286" fg:w="3"/><text x="54.7557%" y="3487.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (4 samples, 0.01%)</title><rect x="54.6758%" y="3637" width="0.0134%" height="15" fill="rgb(217,89,34)" fg:x="16289" fg:w="4"/><text x="54.7658%" y="3647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (39 samples, 0.13%)</title><rect x="54.5683%" y="3653" width="0.1309%" height="15" fill="rgb(229,13,5)" fg:x="16257" fg:w="39"/><text x="54.6583%" y="3663.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="54.6892%" y="3637" width="0.0101%" height="15" fill="rgb(244,67,35)" fg:x="16293" fg:w="3"/><text x="54.7792%" y="3647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.01%)</title><rect x="54.6992%" y="3637" width="0.0101%" height="15" fill="rgb(221,40,2)" fg:x="16296" fg:w="3"/><text x="54.7893%" y="3647.50"></text></g><g><title>impl_serde::serialize::serialize_uint::_{{closure}} (3 samples, 0.01%)</title><rect x="54.7127%" y="3637" width="0.0101%" height="15" fill="rgb(237,157,21)" fg:x="16300" fg:w="3"/><text x="54.8027%" y="3647.50"></text></g><g><title>&lt;ethereum_types::uint::U64 as serde::ser::Serialize&gt;::serialize (8 samples, 0.03%)</title><rect x="54.6992%" y="3653" width="0.0269%" height="15" fill="rgb(222,94,11)" fg:x="16296" fg:w="8"/><text x="54.7893%" y="3663.50"></text></g><g><title>impl_serde::serialize::serialize_raw (6 samples, 0.02%)</title><rect x="54.7328%" y="3653" width="0.0201%" height="15" fill="rgb(249,113,6)" fg:x="16306" fg:w="6"/><text x="54.8228%" y="3663.50"></text></g><g><title>impl_serde::serialize::to_hex_raw (6 samples, 0.02%)</title><rect x="54.7328%" y="3637" width="0.0201%" height="15" fill="rgb(238,137,36)" fg:x="16306" fg:w="6"/><text x="54.8228%" y="3647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.01%)</title><rect x="54.7530%" y="3637" width="0.0134%" height="15" fill="rgb(210,102,26)" fg:x="16312" fg:w="4"/><text x="54.8430%" y="3647.50"></text></g><g><title>primitive_types::serde::_&lt;impl serde::ser::Serialize for primitive_types::U256&gt;::serialize (7 samples, 0.02%)</title><rect x="54.7530%" y="3653" width="0.0235%" height="15" fill="rgb(218,30,30)" fg:x="16312" fg:w="7"/><text x="54.8430%" y="3663.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_key (6 samples, 0.02%)</title><rect x="54.7832%" y="3653" width="0.0201%" height="15" fill="rgb(214,67,26)" fg:x="16321" fg:w="6"/><text x="54.8732%" y="3663.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="54.7865%" y="3637" width="0.0168%" height="15" fill="rgb(251,9,53)" fg:x="16322" fg:w="5"/><text x="54.8765%" y="3647.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="54.7932%" y="3621" width="0.0101%" height="15" fill="rgb(228,204,25)" fg:x="16324" fg:w="3"/><text x="54.8832%" y="3631.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (8 samples, 0.03%)</title><rect x="54.8033%" y="3653" width="0.0269%" height="15" fill="rgb(207,153,8)" fg:x="16327" fg:w="8"/><text x="54.8933%" y="3663.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="54.8134%" y="3637" width="0.0168%" height="15" fill="rgb(242,9,16)" fg:x="16330" fg:w="5"/><text x="54.9034%" y="3647.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (4 samples, 0.01%)</title><rect x="54.8167%" y="3621" width="0.0134%" height="15" fill="rgb(217,211,10)" fg:x="16331" fg:w="4"/><text x="54.9067%" y="3631.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (80 samples, 0.27%)</title><rect x="54.5683%" y="3669" width="0.2685%" height="15" fill="rgb(219,228,52)" fg:x="16257" fg:w="80"/><text x="54.6583%" y="3679.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.04%)</title><rect x="54.8369%" y="3637" width="0.0436%" height="15" fill="rgb(231,92,29)" fg:x="16337" fg:w="13"/><text x="54.9269%" y="3647.50"></text></g><g><title>_malloc_zone_realloc (13 samples, 0.04%)</title><rect x="54.9040%" y="3541" width="0.0436%" height="15" fill="rgb(232,8,23)" fg:x="16357" fg:w="13"/><text x="54.9940%" y="3551.50"></text></g><g><title>szone_realloc (13 samples, 0.04%)</title><rect x="54.9040%" y="3525" width="0.0436%" height="15" fill="rgb(216,211,34)" fg:x="16357" fg:w="13"/><text x="54.9940%" y="3535.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="54.9376%" y="3509" width="0.0101%" height="15" fill="rgb(236,151,0)" fg:x="16367" fg:w="3"/><text x="55.0276%" y="3519.50"></text></g><g><title>small_malloc_should_clear (3 samples, 0.01%)</title><rect x="54.9376%" y="3493" width="0.0101%" height="15" fill="rgb(209,168,3)" fg:x="16367" fg:w="3"/><text x="55.0276%" y="3503.50"></text></g><g><title>small_malloc_from_free_list (3 samples, 0.01%)</title><rect x="54.9376%" y="3477" width="0.0101%" height="15" fill="rgb(208,129,28)" fg:x="16367" fg:w="3"/><text x="55.0276%" y="3487.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (20 samples, 0.07%)</title><rect x="54.8872%" y="3637" width="0.0671%" height="15" fill="rgb(229,78,22)" fg:x="16352" fg:w="20"/><text x="54.9772%" y="3647.50"></text></g><g><title>std::io::Write::write_all (19 samples, 0.06%)</title><rect x="54.8906%" y="3621" width="0.0638%" height="15" fill="rgb(228,187,13)" fg:x="16353" fg:w="19"/><text x="54.9806%" y="3631.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (19 samples, 0.06%)</title><rect x="54.8906%" y="3605" width="0.0638%" height="15" fill="rgb(240,119,24)" fg:x="16353" fg:w="19"/><text x="54.9806%" y="3615.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (17 samples, 0.06%)</title><rect x="54.8973%" y="3589" width="0.0571%" height="15" fill="rgb(209,194,42)" fg:x="16355" fg:w="17"/><text x="54.9873%" y="3599.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.05%)</title><rect x="54.9006%" y="3573" width="0.0537%" height="15" fill="rgb(247,200,46)" fg:x="16356" fg:w="16"/><text x="54.9907%" y="3583.50"></text></g><g><title>_realloc (16 samples, 0.05%)</title><rect x="54.9006%" y="3557" width="0.0537%" height="15" fill="rgb(218,76,16)" fg:x="16356" fg:w="16"/><text x="54.9907%" y="3567.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (39 samples, 0.13%)</title><rect x="54.8369%" y="3653" width="0.1309%" height="15" fill="rgb(225,21,48)" fg:x="16337" fg:w="39"/><text x="54.9269%" y="3663.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (4 samples, 0.01%)</title><rect x="54.9544%" y="3637" width="0.0134%" height="15" fill="rgb(239,223,50)" fg:x="16372" fg:w="4"/><text x="55.0444%" y="3647.50"></text></g><g><title>impl_serde::serialize::serialize_raw (10 samples, 0.03%)</title><rect x="54.9711%" y="3653" width="0.0336%" height="15" fill="rgb(244,45,21)" fg:x="16377" fg:w="10"/><text x="55.0611%" y="3663.50"></text></g><g><title>impl_serde::serialize::to_hex_raw (10 samples, 0.03%)</title><rect x="54.9711%" y="3637" width="0.0336%" height="15" fill="rgb(232,33,43)" fg:x="16377" fg:w="10"/><text x="55.0611%" y="3647.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_some (133 samples, 0.45%)</title><rect x="54.5683%" y="3685" width="0.4464%" height="15" fill="rgb(209,8,3)" fg:x="16257" fg:w="133"/><text x="54.6583%" y="3695.50"></text></g><g><title>zksync_types::api::_::_&lt;impl serde::ser::Serialize for zksync_types::api::TransactionReceipt&gt;::serialize (53 samples, 0.18%)</title><rect x="54.8369%" y="3669" width="0.1779%" height="15" fill="rgb(214,25,53)" fg:x="16337" fg:w="53"/><text x="54.9269%" y="3679.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.02%)</title><rect x="55.0148%" y="3669" width="0.0235%" height="15" fill="rgb(254,186,54)" fg:x="16390" fg:w="7"/><text x="55.1048%" y="3679.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="55.0819%" y="3621" width="0.0134%" height="15" fill="rgb(208,174,49)" fg:x="16410" fg:w="4"/><text x="55.1719%" y="3631.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (17 samples, 0.06%)</title><rect x="55.0450%" y="3669" width="0.0571%" height="15" fill="rgb(233,191,51)" fg:x="16399" fg:w="17"/><text x="55.1350%" y="3679.50"></text></g><g><title>std::io::Write::write_all (14 samples, 0.05%)</title><rect x="55.0550%" y="3653" width="0.0470%" height="15" fill="rgb(222,134,10)" fg:x="16402" fg:w="14"/><text x="55.1451%" y="3663.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (8 samples, 0.03%)</title><rect x="55.0752%" y="3637" width="0.0269%" height="15" fill="rgb(230,226,20)" fg:x="16408" fg:w="8"/><text x="55.1652%" y="3647.50"></text></g><g><title>serde_json::ser::Formatter::end_string (14 samples, 0.05%)</title><rect x="55.1020%" y="3669" width="0.0470%" height="15" fill="rgb(251,111,25)" fg:x="16416" fg:w="14"/><text x="55.1920%" y="3679.50"></text></g><g><title>std::io::Write::write_all (11 samples, 0.04%)</title><rect x="55.1121%" y="3653" width="0.0369%" height="15" fill="rgb(224,40,46)" fg:x="16419" fg:w="11"/><text x="55.2021%" y="3663.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (7 samples, 0.02%)</title><rect x="55.1255%" y="3637" width="0.0235%" height="15" fill="rgb(236,108,47)" fg:x="16423" fg:w="7"/><text x="55.2155%" y="3647.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="55.1390%" y="3621" width="0.0101%" height="15" fill="rgb(234,93,0)" fg:x="16427" fg:w="3"/><text x="55.2290%" y="3631.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="55.1625%" y="3621" width="0.0101%" height="15" fill="rgb(224,213,32)" fg:x="16434" fg:w="3"/><text x="55.2525%" y="3631.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (17 samples, 0.06%)</title><rect x="55.1490%" y="3669" width="0.0571%" height="15" fill="rgb(251,11,48)" fg:x="16430" fg:w="17"/><text x="55.2390%" y="3679.50"></text></g><g><title>std::io::Write::write_all (16 samples, 0.05%)</title><rect x="55.1524%" y="3653" width="0.0537%" height="15" fill="rgb(236,173,5)" fg:x="16431" fg:w="16"/><text x="55.2424%" y="3663.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (15 samples, 0.05%)</title><rect x="55.1557%" y="3637" width="0.0503%" height="15" fill="rgb(230,95,12)" fg:x="16432" fg:w="15"/><text x="55.2458%" y="3647.50"></text></g><g><title>_platform_memmove (10 samples, 0.03%)</title><rect x="55.1725%" y="3621" width="0.0336%" height="15" fill="rgb(232,209,1)" fg:x="16437" fg:w="10"/><text x="55.2625%" y="3631.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.01%)</title><rect x="55.2061%" y="3669" width="0.0101%" height="15" fill="rgb(232,6,1)" fg:x="16447" fg:w="3"/><text x="55.2961%" y="3679.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (4 samples, 0.01%)</title><rect x="55.2162%" y="3669" width="0.0134%" height="15" fill="rgb(210,224,50)" fg:x="16450" fg:w="4"/><text x="55.3062%" y="3679.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (66 samples, 0.22%)</title><rect x="55.0148%" y="3685" width="0.2215%" height="15" fill="rgb(228,127,35)" fg:x="16390" fg:w="66"/><text x="55.1048%" y="3695.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (8 samples, 0.03%)</title><rect x="55.2363%" y="3685" width="0.0269%" height="15" fill="rgb(245,102,45)" fg:x="16456" fg:w="8"/><text x="55.3263%" y="3695.50"></text></g><g><title>impl_serde::serialize::serialize_raw (8 samples, 0.03%)</title><rect x="55.2732%" y="3685" width="0.0269%" height="15" fill="rgb(214,1,49)" fg:x="16467" fg:w="8"/><text x="55.3632%" y="3695.50"></text></g><g><title>impl_serde::serialize::to_hex_raw (8 samples, 0.03%)</title><rect x="55.2732%" y="3669" width="0.0269%" height="15" fill="rgb(226,163,40)" fg:x="16467" fg:w="8"/><text x="55.3632%" y="3679.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.01%)</title><rect x="55.3102%" y="3669" width="0.0134%" height="15" fill="rgb(239,212,28)" fg:x="16478" fg:w="4"/><text x="55.4002%" y="3679.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (3 samples, 0.01%)</title><rect x="55.3135%" y="3653" width="0.0101%" height="15" fill="rgb(220,20,13)" fg:x="16479" fg:w="3"/><text x="55.4035%" y="3663.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="55.3135%" y="3637" width="0.0101%" height="15" fill="rgb(210,164,35)" fg:x="16479" fg:w="3"/><text x="55.4035%" y="3647.50"></text></g><g><title>impl_serde::serialize::serialize_uint::_{{closure}} (3 samples, 0.01%)</title><rect x="55.3336%" y="3669" width="0.0101%" height="15" fill="rgb(248,109,41)" fg:x="16485" fg:w="3"/><text x="55.4237%" y="3679.50"></text></g><g><title>primitive_types::serde::_&lt;impl serde::ser::Serialize for primitive_types::U256&gt;::serialize (13 samples, 0.04%)</title><rect x="55.3102%" y="3685" width="0.0436%" height="15" fill="rgb(238,23,50)" fg:x="16478" fg:w="13"/><text x="55.4002%" y="3695.50"></text></g><g><title>impl_serde::serialize::serialize_uint (3 samples, 0.01%)</title><rect x="55.3437%" y="3669" width="0.0101%" height="15" fill="rgb(211,48,49)" fg:x="16488" fg:w="3"/><text x="55.4337%" y="3679.50"></text></g><g><title>impl_serde::serialize::to_hex_raw (3 samples, 0.01%)</title><rect x="55.3437%" y="3653" width="0.0101%" height="15" fill="rgb(223,36,21)" fg:x="16488" fg:w="3"/><text x="55.4337%" y="3663.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (6 samples, 0.02%)</title><rect x="55.3538%" y="3685" width="0.0201%" height="15" fill="rgb(207,123,46)" fg:x="16491" fg:w="6"/><text x="55.4438%" y="3695.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_key (7 samples, 0.02%)</title><rect x="55.3739%" y="3685" width="0.0235%" height="15" fill="rgb(240,218,32)" fg:x="16497" fg:w="7"/><text x="55.4639%" y="3695.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="55.3806%" y="3669" width="0.0168%" height="15" fill="rgb(252,5,43)" fg:x="16499" fg:w="5"/><text x="55.4706%" y="3679.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (9 samples, 0.03%)</title><rect x="55.3974%" y="3685" width="0.0302%" height="15" fill="rgb(252,84,19)" fg:x="16504" fg:w="9"/><text x="55.4874%" y="3695.50"></text></g><g><title>std::io::Write::write_all (8 samples, 0.03%)</title><rect x="55.4008%" y="3669" width="0.0269%" height="15" fill="rgb(243,152,39)" fg:x="16505" fg:w="8"/><text x="55.4908%" y="3679.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (5 samples, 0.02%)</title><rect x="55.4108%" y="3653" width="0.0168%" height="15" fill="rgb(234,160,15)" fg:x="16508" fg:w="5"/><text x="55.5009%" y="3663.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="55.4142%" y="3637" width="0.0134%" height="15" fill="rgb(237,34,20)" fg:x="16509" fg:w="4"/><text x="55.5042%" y="3647.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (263 samples, 0.88%)</title><rect x="54.5650%" y="3701" width="0.8828%" height="15" fill="rgb(229,97,13)" fg:x="16256" fg:w="263"/><text x="54.6550%" y="3711.50">&lt;s..</text></g><g><title>serde_json::ser::Formatter::begin_object (9 samples, 0.03%)</title><rect x="55.4511%" y="3701" width="0.0302%" height="15" fill="rgb(234,71,50)" fg:x="16520" fg:w="9"/><text x="55.5411%" y="3711.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.02%)</title><rect x="55.4578%" y="3685" width="0.0235%" height="15" fill="rgb(253,155,4)" fg:x="16522" fg:w="7"/><text x="55.5479%" y="3695.50"></text></g><g><title>&lt;&amp;mut jsonrpsee_core::server::helpers::BoundedWriter as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="55.4713%" y="3669" width="0.0101%" height="15" fill="rgb(222,185,37)" fg:x="16526" fg:w="3"/><text x="55.5613%" y="3679.50"></text></g><g><title>jsonrpsee_core::server::rpc_module::RpcModule&lt;Context&gt;::register_async_method::_{{closure}}::_{{closure}} (345 samples, 1.16%)</title><rect x="54.3334%" y="3733" width="1.1580%" height="15" fill="rgb(251,177,13)" fg:x="16187" fg:w="345"/><text x="54.4234%" y="3743.50">jso..</text></g><g><title>serde_json::ser::to_writer (285 samples, 0.96%)</title><rect x="54.5348%" y="3717" width="0.9566%" height="15" fill="rgb(250,179,40)" fg:x="16247" fg:w="285"/><text x="54.6248%" y="3727.50">se..</text></g><g><title>serde_json::ser::Formatter::end_object (3 samples, 0.01%)</title><rect x="55.4813%" y="3701" width="0.0101%" height="15" fill="rgb(242,44,2)" fg:x="16529" fg:w="3"/><text x="55.5713%" y="3711.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="55.5518%" y="3717" width="0.0101%" height="15" fill="rgb(216,177,13)" fg:x="16550" fg:w="3"/><text x="55.6418%" y="3727.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim_start_matches (4 samples, 0.01%)</title><rect x="55.5686%" y="3701" width="0.0134%" height="15" fill="rgb(216,106,43)" fg:x="16555" fg:w="4"/><text x="55.6586%" y="3711.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim_start (8 samples, 0.03%)</title><rect x="55.5619%" y="3717" width="0.0269%" height="15" fill="rgb(216,183,2)" fg:x="16553" fg:w="8"/><text x="55.6519%" y="3727.50"></text></g><g><title>jsonrpsee_types::params::Params::sequence (3 samples, 0.01%)</title><rect x="55.5887%" y="3717" width="0.0101%" height="15" fill="rgb(249,75,3)" fg:x="16561" fg:w="3"/><text x="55.6788%" y="3727.50"></text></g><g><title>jsonrpsee_types::params::ParamsSequence::next (5 samples, 0.02%)</title><rect x="55.5988%" y="3717" width="0.0168%" height="15" fill="rgb(219,67,39)" fg:x="16564" fg:w="5"/><text x="55.6888%" y="3727.50"></text></g><g><title>&lt;serde_json::de::StreamDeserializer&lt;R,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="55.6190%" y="3701" width="0.0302%" height="15" fill="rgb(253,228,2)" fg:x="16570" fg:w="9"/><text x="55.7090%" y="3711.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (5 samples, 0.02%)</title><rect x="55.6559%" y="3685" width="0.0168%" height="15" fill="rgb(235,138,27)" fg:x="16581" fg:w="5"/><text x="55.7459%" y="3695.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (13 samples, 0.04%)</title><rect x="55.7062%" y="3637" width="0.0436%" height="15" fill="rgb(236,97,51)" fg:x="16596" fg:w="13"/><text x="55.7962%" y="3647.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="55.7566%" y="3637" width="0.0302%" height="15" fill="rgb(240,80,30)" fg:x="16611" fg:w="9"/><text x="55.8466%" y="3647.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="55.7868%" y="3637" width="0.0201%" height="15" fill="rgb(230,178,19)" fg:x="16620" fg:w="6"/><text x="55.8768%" y="3647.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (112 samples, 0.38%)</title><rect x="55.6928%" y="3653" width="0.3759%" height="15" fill="rgb(210,190,27)" fg:x="16592" fg:w="112"/><text x="55.7828%" y="3663.50"></text></g><g><title>hex::val (78 samples, 0.26%)</title><rect x="55.8069%" y="3637" width="0.2618%" height="15" fill="rgb(222,107,31)" fg:x="16626" fg:w="78"/><text x="55.8969%" y="3647.50"></text></g><g><title>_nanov2_free (3 samples, 0.01%)</title><rect x="56.1157%" y="3557" width="0.0101%" height="15" fill="rgb(216,127,34)" fg:x="16718" fg:w="3"/><text x="56.2057%" y="3567.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="56.1258%" y="3557" width="0.0134%" height="15" fill="rgb(234,116,52)" fg:x="16721" fg:w="4"/><text x="56.2158%" y="3567.50"></text></g><g><title>_malloc_zone_realloc (10 samples, 0.03%)</title><rect x="56.1124%" y="3589" width="0.0336%" height="15" fill="rgb(222,124,15)" fg:x="16717" fg:w="10"/><text x="56.2024%" y="3599.50"></text></g><g><title>nanov2_realloc (10 samples, 0.03%)</title><rect x="56.1124%" y="3573" width="0.0336%" height="15" fill="rgb(231,179,28)" fg:x="16717" fg:w="10"/><text x="56.2024%" y="3583.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (22 samples, 0.07%)</title><rect x="56.0822%" y="3637" width="0.0738%" height="15" fill="rgb(226,93,45)" fg:x="16708" fg:w="22"/><text x="56.1722%" y="3647.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.07%)</title><rect x="56.0822%" y="3621" width="0.0738%" height="15" fill="rgb(215,8,51)" fg:x="16708" fg:w="22"/><text x="56.1722%" y="3631.50"></text></g><g><title>_realloc (15 samples, 0.05%)</title><rect x="56.1057%" y="3605" width="0.0503%" height="15" fill="rgb(223,106,5)" fg:x="16715" fg:w="15"/><text x="56.1957%" y="3615.50"></text></g><g><title>nanov2_size (3 samples, 0.01%)</title><rect x="56.1459%" y="3589" width="0.0101%" height="15" fill="rgb(250,191,5)" fg:x="16727" fg:w="3"/><text x="56.2360%" y="3599.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (25 samples, 0.08%)</title><rect x="56.0788%" y="3653" width="0.0839%" height="15" fill="rgb(242,132,44)" fg:x="16707" fg:w="25"/><text x="56.1688%" y="3663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (148 samples, 0.50%)</title><rect x="55.6760%" y="3669" width="0.4968%" height="15" fill="rgb(251,152,29)" fg:x="16587" fg:w="148"/><text x="55.7660%" y="3679.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.01%)</title><rect x="56.1728%" y="3669" width="0.0134%" height="15" fill="rgb(218,179,5)" fg:x="16735" fg:w="4"/><text x="56.2628%" y="3679.50"></text></g><g><title>&lt;zksync_basic_types::web3::Bytes as serde::de::Deserialize&gt;::deserialize (161 samples, 0.54%)</title><rect x="55.6559%" y="3701" width="0.5404%" height="15" fill="rgb(227,67,19)" fg:x="16581" fg:w="161"/><text x="55.7459%" y="3711.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (156 samples, 0.52%)</title><rect x="55.6727%" y="3685" width="0.5236%" height="15" fill="rgb(233,119,31)" fg:x="16586" fg:w="156"/><text x="55.7627%" y="3695.50"></text></g><g><title>&lt;zksync_basic_types::web3::BytesVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.01%)</title><rect x="56.1862%" y="3669" width="0.0101%" height="15" fill="rgb(241,120,22)" fg:x="16739" fg:w="3"/><text x="56.2762%" y="3679.50"></text></g><g><title>&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (63 samples, 0.21%)</title><rect x="56.2064%" y="3669" width="0.2115%" height="15" fill="rgb(224,102,30)" fg:x="16745" fg:w="63"/><text x="56.2964%" y="3679.50"></text></g><g><title>impl_serde::serialize::from_hex_raw (63 samples, 0.21%)</title><rect x="56.2064%" y="3653" width="0.2115%" height="15" fill="rgb(210,164,37)" fg:x="16745" fg:w="63"/><text x="56.2964%" y="3663.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (72 samples, 0.24%)</title><rect x="56.1963%" y="3685" width="0.2417%" height="15" fill="rgb(226,191,16)" fg:x="16742" fg:w="72"/><text x="56.2863%" y="3695.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.02%)</title><rect x="56.4178%" y="3669" width="0.0201%" height="15" fill="rgb(214,40,45)" fg:x="16808" fg:w="6"/><text x="56.5078%" y="3679.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,772 samples, 32.80%)</title><rect x="23.6406%" y="3749" width="32.8008%" height="15" fill="rgb(244,29,26)" fg:x="7043" fg:w="9772"/><text x="23.7306%" y="3759.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>zksync_web3_decl::namespaces::eth::EthNamespaceServer::into_rpc::_{{closure}}::_{{closure}} (282 samples, 0.95%)</title><rect x="55.4948%" y="3733" width="0.9466%" height="15" fill="rgb(216,16,5)" fg:x="16533" fg:w="282"/><text x="55.5848%" y="3743.50">zk..</text></g><g><title>jsonrpsee_types::params::ParamsSequence::next_inner (246 samples, 0.83%)</title><rect x="55.6156%" y="3717" width="0.8257%" height="15" fill="rgb(249,76,35)" fg:x="16569" fg:w="246"/><text x="55.7056%" y="3727.50">j..</text></g><g><title>impl_serde::serialize::deserialize_check_len (73 samples, 0.25%)</title><rect x="56.1963%" y="3701" width="0.2450%" height="15" fill="rgb(207,11,44)" fg:x="16742" fg:w="73"/><text x="56.2863%" y="3711.50"></text></g><g><title>&lt;jsonrpsee_server::server::TowerServiceNoHttp&lt;RpcMiddleware&gt; as tower_service::Service&lt;http::request::Request&lt;Body&gt;&gt;&gt;::call::_{{closure}} (10 samples, 0.03%)</title><rect x="56.4480%" y="3749" width="0.0336%" height="15" fill="rgb(228,190,49)" fg:x="16817" fg:w="10"/><text x="56.5380%" y="3759.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.09%)</title><rect x="56.4883%" y="3749" width="0.0873%" height="15" fill="rgb(214,173,12)" fg:x="16829" fg:w="26"/><text x="56.5783%" y="3759.50"></text></g><g><title>szone_malloc_should_clear (22 samples, 0.07%)</title><rect x="56.5017%" y="3733" width="0.0738%" height="15" fill="rgb(218,26,35)" fg:x="16833" fg:w="22"/><text x="56.5918%" y="3743.50"></text></g><g><title>tiny_malloc_should_clear (21 samples, 0.07%)</title><rect x="56.5051%" y="3717" width="0.0705%" height="15" fill="rgb(220,200,19)" fg:x="16834" fg:w="21"/><text x="56.5951%" y="3727.50"></text></g><g><title>tiny_malloc_from_free_list (17 samples, 0.06%)</title><rect x="56.5185%" y="3701" width="0.0571%" height="15" fill="rgb(239,95,49)" fg:x="16838" fg:w="17"/><text x="56.6085%" y="3711.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="56.5655%" y="3685" width="0.0101%" height="15" fill="rgb(235,85,53)" fg:x="16852" fg:w="3"/><text x="56.6555%" y="3695.50"></text></g><g><title>_nanov2_free (14 samples, 0.05%)</title><rect x="56.5890%" y="3733" width="0.0470%" height="15" fill="rgb(233,133,31)" fg:x="16859" fg:w="14"/><text x="56.6790%" y="3743.50"></text></g><g><title>_platform_memset (4 samples, 0.01%)</title><rect x="56.6226%" y="3717" width="0.0134%" height="15" fill="rgb(218,25,20)" fg:x="16869" fg:w="4"/><text x="56.7126%" y="3727.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.08%)</title><rect x="56.5756%" y="3749" width="0.0772%" height="15" fill="rgb(252,210,38)" fg:x="16855" fg:w="23"/><text x="56.6656%" y="3759.50"></text></g><g><title>free_tiny (4 samples, 0.01%)</title><rect x="56.6394%" y="3733" width="0.0134%" height="15" fill="rgb(242,134,21)" fg:x="16874" fg:w="4"/><text x="56.7294%" y="3743.50"></text></g><g><title>tiny_free_no_lock (3 samples, 0.01%)</title><rect x="56.6427%" y="3717" width="0.0101%" height="15" fill="rgb(213,28,48)" fg:x="16875" fg:w="3"/><text x="56.7327%" y="3727.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="56.6561%" y="3749" width="0.0101%" height="15" fill="rgb(250,196,2)" fg:x="16879" fg:w="3"/><text x="56.7462%" y="3759.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="56.6561%" y="3733" width="0.0101%" height="15" fill="rgb(227,5,17)" fg:x="16879" fg:w="3"/><text x="56.7462%" y="3743.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.02%)</title><rect x="56.6864%" y="3733" width="0.0235%" height="15" fill="rgb(221,226,24)" fg:x="16888" fg:w="7"/><text x="56.7764%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_server::server::ConnectionState&gt; (3 samples, 0.01%)</title><rect x="56.7132%" y="3733" width="0.0101%" height="15" fill="rgb(211,5,48)" fg:x="16896" fg:w="3"/><text x="56.8032%" y="3743.50"></text></g><g><title>&lt;tokio::sync::semaphore::OwnedSemaphorePermit as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="56.7233%" y="3717" width="0.0168%" height="15" fill="rgb(219,150,6)" fg:x="16899" fg:w="5"/><text x="56.8133%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::semaphore::OwnedSemaphorePermit&gt; (18 samples, 0.06%)</title><rect x="56.7233%" y="3733" width="0.0604%" height="15" fill="rgb(251,46,16)" fg:x="16899" fg:w="18"/><text x="56.8133%" y="3743.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (13 samples, 0.04%)</title><rect x="56.7401%" y="3717" width="0.0436%" height="15" fill="rgb(220,204,40)" fg:x="16904" fg:w="13"/><text x="56.8301%" y="3727.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (5 samples, 0.02%)</title><rect x="56.7837%" y="3733" width="0.0168%" height="15" fill="rgb(211,85,2)" fg:x="16917" fg:w="5"/><text x="56.8737%" y="3743.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.02%)</title><rect x="56.8005%" y="3733" width="0.0168%" height="15" fill="rgb(229,17,7)" fg:x="16922" fg:w="5"/><text x="56.8905%" y="3743.50"></text></g><g><title>core::mem::drop (46 samples, 0.15%)</title><rect x="56.6662%" y="3749" width="0.1544%" height="15" fill="rgb(239,72,28)" fg:x="16882" fg:w="46"/><text x="56.7562%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = jsonrpsee_core::server::method_response::MethodResponse+core::marker::Send&gt;&gt; (9 samples, 0.03%)</title><rect x="56.8273%" y="3749" width="0.0302%" height="15" fill="rgb(230,47,54)" fg:x="16930" fg:w="9"/><text x="56.9173%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_core::server::rpc_module::RpcModule&lt;zksync_os_sequencer::api::eth_impl::EthNamespace&gt;::register_async_method&lt;jsonrpsee_core::server::method_response::ResponsePayload&lt;bool&gt;,&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::into_rpc::{{closure}},&lt;zksync_os_sequencer::api::eth_impl::EthNamespace as zksync_web3_decl::namespaces::eth::EthNamespaceServer&gt;::into_rpc::{{closure}}::{{closure}}&gt;::{{closure}}::{{closure}}&gt; (6 samples, 0.02%)</title><rect x="56.8374%" y="3733" width="0.0201%" height="15" fill="rgb(214,50,8)" fg:x="16933" fg:w="6"/><text x="56.9274%" y="3743.50"></text></g><g><title>_nanov2_free (5 samples, 0.02%)</title><rect x="56.8643%" y="3733" width="0.0168%" height="15" fill="rgb(216,198,43)" fg:x="16941" fg:w="5"/><text x="56.9543%" y="3743.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="56.9079%" y="3717" width="0.0101%" height="15" fill="rgb(234,20,35)" fg:x="16954" fg:w="3"/><text x="56.9979%" y="3727.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="56.9448%" y="3701" width="0.0134%" height="15" fill="rgb(254,45,19)" fg:x="16965" fg:w="4"/><text x="57.0348%" y="3711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn http_body::Body+Data = bytes::bytes::Bytes+Error = alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;+core::marker::Send&gt;&gt; (35 samples, 0.12%)</title><rect x="56.8575%" y="3749" width="0.1175%" height="15" fill="rgb(219,14,44)" fg:x="16939" fg:w="35"/><text x="56.9476%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body_util::combinators::map_err::MapErr&lt;jsonrpsee_core::http_helpers::Body,jsonrpsee_core::http_helpers::Body::new&lt;jsonrpsee_core::http_helpers::Body&gt;::{{closure}}&gt;&gt; (28 samples, 0.09%)</title><rect x="56.8810%" y="3733" width="0.0940%" height="15" fill="rgb(217,220,26)" fg:x="16946" fg:w="28"/><text x="56.9711%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body_util::combinators::map_err::MapErr&lt;hyper::body::incoming::Incoming,jsonrpsee_core::http_helpers::Body::new&lt;hyper::body::incoming::Incoming&gt;::{{closure}}&gt;&gt; (17 samples, 0.06%)</title><rect x="56.9180%" y="3717" width="0.0571%" height="15" fill="rgb(213,158,28)" fg:x="16957" fg:w="17"/><text x="57.0080%" y="3727.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.01%)</title><rect x="56.9650%" y="3701" width="0.0101%" height="15" fill="rgb(252,51,52)" fg:x="16971" fg:w="3"/><text x="57.0550%" y="3711.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::either::Either&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = jsonrpsee_core::server::method_response::MethodResponse+core::marker::Send&gt;&gt;,core::future::ready::Ready&lt;jsonrpsee_core::server::method_response::MethodResponse&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="56.9750%" y="3749" width="0.0201%" height="15" fill="rgb(246,89,16)" fg:x="16974" fg:w="6"/><text x="57.0650%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_core::server::rpc_module::Methods&gt; (4 samples, 0.01%)</title><rect x="56.9985%" y="3733" width="0.0134%" height="15" fill="rgb(216,158,49)" fg:x="16981" fg:w="4"/><text x="57.0885%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_server::middleware::rpc::layer::rpc_service::RpcService&gt; (8 samples, 0.03%)</title><rect x="56.9985%" y="3749" width="0.0269%" height="15" fill="rgb(236,107,19)" fg:x="16981" fg:w="8"/><text x="57.0885%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_server::middleware::rpc::layer::rpc_service::RpcServiceCfg&gt; (4 samples, 0.01%)</title><rect x="57.0119%" y="3733" width="0.0134%" height="15" fill="rgb(228,185,30)" fg:x="16985" fg:w="4"/><text x="57.1020%" y="3743.50"></text></g><g><title>futures_util::future::either::Either&lt;A,B&gt;::as_pin_mut (5 samples, 0.02%)</title><rect x="57.0354%" y="3749" width="0.0168%" height="15" fill="rgb(246,134,8)" fg:x="16992" fg:w="5"/><text x="57.1255%" y="3759.50"></text></g><g><title>jsonrpsee_core::http_helpers::read_body::_{{closure}} (45 samples, 0.15%)</title><rect x="57.0522%" y="3749" width="0.1510%" height="15" fill="rgb(214,143,50)" fg:x="16997" fg:w="45"/><text x="57.1422%" y="3759.50"></text></g><g><title>jsonrpsee_core::http_helpers::read_header_content_length (32 samples, 0.11%)</title><rect x="57.0959%" y="3733" width="0.1074%" height="15" fill="rgb(228,75,8)" fg:x="17010" fg:w="32"/><text x="57.1859%" y="3743.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (17 samples, 0.06%)</title><rect x="57.1462%" y="3717" width="0.0571%" height="15" fill="rgb(207,175,4)" fg:x="17025" fg:w="17"/><text x="57.2362%" y="3727.50"></text></g><g><title>_nanov2_free (5 samples, 0.02%)</title><rect x="57.3107%" y="3717" width="0.0168%" height="15" fill="rgb(205,108,24)" fg:x="17074" fg:w="5"/><text x="57.4007%" y="3727.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.02%)</title><rect x="57.3275%" y="3701" width="0.0201%" height="15" fill="rgb(244,120,49)" fg:x="17079" fg:w="6"/><text x="57.4175%" y="3711.50"></text></g><g><title>_platform_memcmp (3 samples, 0.01%)</title><rect x="57.3375%" y="3685" width="0.0101%" height="15" fill="rgb(223,47,38)" fg:x="17082" fg:w="3"/><text x="57.4275%" y="3695.50"></text></g><g><title>jsonrpsee_core::server::rpc_module::Methods::method_with_name (9 samples, 0.03%)</title><rect x="57.3275%" y="3717" width="0.0302%" height="15" fill="rgb(229,179,11)" fg:x="17079" fg:w="9"/><text x="57.4175%" y="3727.50"></text></g><g><title>jsonrpsee_core::server::rpc_module::Methods::method_with_name (3 samples, 0.01%)</title><rect x="57.3476%" y="3701" width="0.0101%" height="15" fill="rgb(231,122,1)" fg:x="17085" fg:w="3"/><text x="57.4376%" y="3711.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.01%)</title><rect x="57.3476%" y="3685" width="0.0101%" height="15" fill="rgb(245,119,9)" fg:x="17085" fg:w="3"/><text x="57.4376%" y="3695.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="57.4215%" y="3701" width="0.0101%" height="15" fill="rgb(241,163,25)" fg:x="17107" fg:w="3"/><text x="57.5115%" y="3711.50"></text></g><g><title>jsonrpsee_core::server::rpc_module::RpcModule&lt;Context&gt;::register_async_method::_{{closure}} (25 samples, 0.08%)</title><rect x="57.3577%" y="3717" width="0.0839%" height="15" fill="rgb(217,214,3)" fg:x="17088" fg:w="25"/><text x="57.4477%" y="3727.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.01%)</title><rect x="57.4315%" y="3701" width="0.0101%" height="15" fill="rgb(240,86,28)" fg:x="17110" fg:w="3"/><text x="57.5215%" y="3711.50"></text></g><g><title>jsonrpsee_types::params::Id::into_owned (3 samples, 0.01%)</title><rect x="57.4416%" y="3717" width="0.0101%" height="15" fill="rgb(215,47,9)" fg:x="17113" fg:w="3"/><text x="57.5316%" y="3727.50"></text></g><g><title>jsonrpsee_types::params::Params::into_owned (8 samples, 0.03%)</title><rect x="57.4517%" y="3717" width="0.0269%" height="15" fill="rgb(252,25,45)" fg:x="17116" fg:w="8"/><text x="57.5417%" y="3727.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.01%)</title><rect x="57.4684%" y="3701" width="0.0101%" height="15" fill="rgb(251,164,9)" fg:x="17121" fg:w="3"/><text x="57.5585%" y="3711.50"></text></g><g><title>&lt;jsonrpsee_server::middleware::rpc::layer::rpc_service::RpcService as jsonrpsee_server::middleware::rpc::RpcServiceT&gt;::call (65 samples, 0.22%)</title><rect x="57.2771%" y="3733" width="0.2182%" height="15" fill="rgb(233,194,0)" fg:x="17064" fg:w="65"/><text x="57.3671%" y="3743.50"></text></g><g><title>jsonrpsee_types::params::Params::new (5 samples, 0.02%)</title><rect x="57.4785%" y="3717" width="0.0168%" height="15" fill="rgb(249,111,24)" fg:x="17124" fg:w="5"/><text x="57.5685%" y="3727.50"></text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.03%)</title><rect x="57.6698%" y="3653" width="0.0302%" height="15" fill="rgb(250,223,3)" fg:x="17181" fg:w="9"/><text x="57.7599%" y="3663.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (24 samples, 0.08%)</title><rect x="57.6229%" y="3685" width="0.0806%" height="15" fill="rgb(236,178,37)" fg:x="17167" fg:w="24"/><text x="57.7129%" y="3695.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (15 samples, 0.05%)</title><rect x="57.6531%" y="3669" width="0.0503%" height="15" fill="rgb(241,158,50)" fg:x="17176" fg:w="15"/><text x="57.7431%" y="3679.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (17 samples, 0.06%)</title><rect x="57.7034%" y="3685" width="0.0571%" height="15" fill="rgb(213,121,41)" fg:x="17191" fg:w="17"/><text x="57.7934%" y="3695.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (47 samples, 0.16%)</title><rect x="57.7605%" y="3685" width="0.1578%" height="15" fill="rgb(240,92,3)" fg:x="17208" fg:w="47"/><text x="57.8505%" y="3695.50"></text></g><g><title>core::str::converts::from_utf8 (21 samples, 0.07%)</title><rect x="57.8477%" y="3669" width="0.0705%" height="15" fill="rgb(205,123,3)" fg:x="17234" fg:w="21"/><text x="57.9378%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.01%)</title><rect x="57.9182%" y="3685" width="0.0101%" height="15" fill="rgb(205,97,47)" fg:x="17255" fg:w="3"/><text x="58.0082%" y="3695.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (5 samples, 0.02%)</title><rect x="58.0659%" y="3589" width="0.0168%" height="15" fill="rgb(247,152,14)" fg:x="17299" fg:w="5"/><text x="58.1559%" y="3599.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.02%)</title><rect x="58.0827%" y="3589" width="0.0235%" height="15" fill="rgb(248,195,53)" fg:x="17304" fg:w="7"/><text x="58.1727%" y="3599.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="58.1230%" y="3573" width="0.0134%" height="15" fill="rgb(226,201,16)" fg:x="17316" fg:w="4"/><text x="58.2130%" y="3583.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="58.1968%" y="3541" width="0.0168%" height="15" fill="rgb(205,98,0)" fg:x="17338" fg:w="5"/><text x="58.2868%" y="3551.50"></text></g><g><title>DYLD-STUB$$realloc (4 samples, 0.01%)</title><rect x="58.2438%" y="3509" width="0.0134%" height="15" fill="rgb(214,191,48)" fg:x="17352" fg:w="4"/><text x="58.3338%" y="3519.50"></text></g><g><title>default_zone_realloc (4 samples, 0.01%)</title><rect x="58.3009%" y="3477" width="0.0134%" height="15" fill="rgb(237,112,39)" fg:x="17369" fg:w="4"/><text x="58.3909%" y="3487.50"></text></g><g><title>_nanov2_free (6 samples, 0.02%)</title><rect x="58.3345%" y="3461" width="0.0201%" height="15" fill="rgb(247,203,27)" fg:x="17379" fg:w="6"/><text x="58.4245%" y="3471.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="58.3546%" y="3461" width="0.0101%" height="15" fill="rgb(235,124,28)" fg:x="17385" fg:w="3"/><text x="58.4446%" y="3471.50"></text></g><g><title>nanov2_malloc (10 samples, 0.03%)</title><rect x="58.3647%" y="3461" width="0.0336%" height="15" fill="rgb(208,207,46)" fg:x="17388" fg:w="10"/><text x="58.4547%" y="3471.50"></text></g><g><title>_malloc_zone_realloc (38 samples, 0.13%)</title><rect x="58.2807%" y="3493" width="0.1276%" height="15" fill="rgb(234,176,4)" fg:x="17363" fg:w="38"/><text x="58.3708%" y="3503.50"></text></g><g><title>nanov2_realloc (28 samples, 0.09%)</title><rect x="58.3143%" y="3477" width="0.0940%" height="15" fill="rgb(230,133,28)" fg:x="17373" fg:w="28"/><text x="58.4043%" y="3487.50"></text></g><g><title>nanov2_pointer_size (3 samples, 0.01%)</title><rect x="58.3982%" y="3461" width="0.0101%" height="15" fill="rgb(211,137,40)" fg:x="17398" fg:w="3"/><text x="58.4882%" y="3471.50"></text></g><g><title>_realloc (49 samples, 0.16%)</title><rect x="58.2640%" y="3509" width="0.1645%" height="15" fill="rgb(254,35,13)" fg:x="17358" fg:w="49"/><text x="58.3540%" y="3519.50"></text></g><g><title>nanov2_size (6 samples, 0.02%)</title><rect x="58.4083%" y="3493" width="0.0201%" height="15" fill="rgb(225,49,51)" fg:x="17401" fg:w="6"/><text x="58.4983%" y="3503.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (78 samples, 0.26%)</title><rect x="58.1700%" y="3557" width="0.2618%" height="15" fill="rgb(251,10,15)" fg:x="17330" fg:w="78"/><text x="58.2600%" y="3567.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (65 samples, 0.22%)</title><rect x="58.2136%" y="3541" width="0.2182%" height="15" fill="rgb(228,207,15)" fg:x="17343" fg:w="65"/><text x="58.3036%" y="3551.50"></text></g><g><title>alloc::raw_vec::finish_grow (59 samples, 0.20%)</title><rect x="58.2338%" y="3525" width="0.1980%" height="15" fill="rgb(241,99,19)" fg:x="17349" fg:w="59"/><text x="58.3238%" y="3535.50"></text></g><g><title>&lt;serde::__private::de::content::UntaggedUnitVisitor as serde::de::Visitor&gt;::expecting (102 samples, 0.34%)</title><rect x="58.1062%" y="3589" width="0.3424%" height="15" fill="rgb(207,104,49)" fg:x="17311" fg:w="102"/><text x="58.1962%" y="3599.50"></text></g><g><title>core::fmt::write (92 samples, 0.31%)</title><rect x="58.1398%" y="3573" width="0.3088%" height="15" fill="rgb(234,99,18)" fg:x="17321" fg:w="92"/><text x="58.2298%" y="3583.50"></text></g><g><title>core::fmt::Formatter::pad (3 samples, 0.01%)</title><rect x="58.4385%" y="3557" width="0.0101%" height="15" fill="rgb(213,191,49)" fg:x="17410" fg:w="3"/><text x="58.5285%" y="3567.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="58.5191%" y="3541" width="0.0134%" height="15" fill="rgb(210,226,19)" fg:x="17434" fg:w="4"/><text x="58.6091%" y="3551.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="58.5224%" y="3525" width="0.0101%" height="15" fill="rgb(229,97,18)" fg:x="17435" fg:w="3"/><text x="58.6124%" y="3535.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 0.01%)</title><rect x="58.5358%" y="3541" width="0.0101%" height="15" fill="rgb(211,167,15)" fg:x="17439" fg:w="3"/><text x="58.6259%" y="3551.50"></text></g><g><title>&lt;serde_json::error::JsonUnexpected as core::fmt::Display&gt;::fmt (43 samples, 0.14%)</title><rect x="58.4486%" y="3589" width="0.1443%" height="15" fill="rgb(210,169,34)" fg:x="17413" fg:w="43"/><text x="58.5386%" y="3599.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (41 samples, 0.14%)</title><rect x="58.4553%" y="3573" width="0.1376%" height="15" fill="rgb(241,121,31)" fg:x="17415" fg:w="41"/><text x="58.5453%" y="3583.50"></text></g><g><title>core::fmt::write (23 samples, 0.08%)</title><rect x="58.5157%" y="3557" width="0.0772%" height="15" fill="rgb(232,40,11)" fg:x="17433" fg:w="23"/><text x="58.6057%" y="3567.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (14 samples, 0.05%)</title><rect x="58.5459%" y="3541" width="0.0470%" height="15" fill="rgb(205,86,26)" fg:x="17442" fg:w="14"/><text x="58.6359%" y="3551.50"></text></g><g><title>core::fmt::Formatter::pad_integral (9 samples, 0.03%)</title><rect x="58.5627%" y="3525" width="0.0302%" height="15" fill="rgb(231,126,28)" fg:x="17447" fg:w="9"/><text x="58.6527%" y="3535.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.02%)</title><rect x="58.5761%" y="3509" width="0.0168%" height="15" fill="rgb(219,221,18)" fg:x="17451" fg:w="5"/><text x="58.6661%" y="3519.50"></text></g><g><title>core::fmt::write (165 samples, 0.55%)</title><rect x="58.0424%" y="3605" width="0.5538%" height="15" fill="rgb(211,40,0)" fg:x="17292" fg:w="165"/><text x="58.1324%" y="3615.50"></text></g><g><title>alloc::fmt::format::format_inner (188 samples, 0.63%)</title><rect x="57.9787%" y="3621" width="0.6310%" height="15" fill="rgb(239,85,43)" fg:x="17273" fg:w="188"/><text x="58.0687%" y="3631.50"></text></g><g><title>_malloc_zone_realloc (4 samples, 0.01%)</title><rect x="58.6903%" y="3589" width="0.0134%" height="15" fill="rgb(231,55,21)" fg:x="17485" fg:w="4"/><text x="58.7803%" y="3599.50"></text></g><g><title>nanov2_realloc (4 samples, 0.01%)</title><rect x="58.6903%" y="3573" width="0.0134%" height="15" fill="rgb(225,184,43)" fg:x="17485" fg:w="4"/><text x="58.7803%" y="3583.50"></text></g><g><title>_realloc (9 samples, 0.03%)</title><rect x="58.6802%" y="3605" width="0.0302%" height="15" fill="rgb(251,158,41)" fg:x="17482" fg:w="9"/><text x="58.7702%" y="3615.50"></text></g><g><title>core::str::pattern::StrSearcher::new (29 samples, 0.10%)</title><rect x="58.7104%" y="3605" width="0.0973%" height="15" fill="rgb(234,159,37)" fg:x="17491" fg:w="29"/><text x="58.8004%" y="3615.50"></text></g><g><title>nanov2_malloc_type (4 samples, 0.01%)</title><rect x="58.8077%" y="3605" width="0.0134%" height="15" fill="rgb(216,204,22)" fg:x="17520" fg:w="4"/><text x="58.8977%" y="3615.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (261 samples, 0.88%)</title><rect x="57.9484%" y="3669" width="0.8761%" height="15" fill="rgb(214,17,3)" fg:x="17264" fg:w="261"/><text x="58.0385%" y="3679.50">&lt;s..</text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (255 samples, 0.86%)</title><rect x="57.9686%" y="3653" width="0.8559%" height="15" fill="rgb(212,111,17)" fg:x="17270" fg:w="255"/><text x="58.0586%" y="3663.50">&lt;s..</text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (254 samples, 0.85%)</title><rect x="57.9719%" y="3637" width="0.8526%" height="15" fill="rgb(221,157,24)" fg:x="17271" fg:w="254"/><text x="58.0619%" y="3647.50">&lt;s..</text></g><g><title>serde_json::error::make_error (63 samples, 0.21%)</title><rect x="58.6131%" y="3621" width="0.2115%" height="15" fill="rgb(252,16,13)" fg:x="17462" fg:w="63"/><text x="58.7031%" y="3631.50"></text></g><g><title>_nanov2_free (8 samples, 0.03%)</title><rect x="58.8279%" y="3669" width="0.0269%" height="15" fill="rgb(221,62,2)" fg:x="17526" fg:w="8"/><text x="58.9179%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;jsonrpsee_types::params::Id,serde_json::error::Error&gt;&gt; (12 samples, 0.04%)</title><rect x="58.8547%" y="3669" width="0.0403%" height="15" fill="rgb(247,87,22)" fg:x="17534" fg:w="12"/><text x="58.9447%" y="3679.50"></text></g><g><title>_nanov2_free (8 samples, 0.03%)</title><rect x="58.8682%" y="3653" width="0.0269%" height="15" fill="rgb(215,73,9)" fg:x="17538" fg:w="8"/><text x="58.9582%" y="3663.50"></text></g><g><title>serde::__private::de::content::ContentRefDeserializer&lt;E&gt;::deserialize_integer (5 samples, 0.02%)</title><rect x="58.8984%" y="3669" width="0.0168%" height="15" fill="rgb(207,175,33)" fg:x="17547" fg:w="5"/><text x="58.9884%" y="3679.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (6 samples, 0.02%)</title><rect x="58.9319%" y="3653" width="0.0201%" height="15" fill="rgb(243,129,54)" fg:x="17557" fg:w="6"/><text x="59.0219%" y="3663.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (18 samples, 0.06%)</title><rect x="58.9151%" y="3669" width="0.0604%" height="15" fill="rgb(227,119,45)" fg:x="17552" fg:w="18"/><text x="59.0052%" y="3679.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (7 samples, 0.02%)</title><rect x="58.9521%" y="3653" width="0.0235%" height="15" fill="rgb(205,109,36)" fg:x="17563" fg:w="7"/><text x="59.0421%" y="3663.50"></text></g><g><title>jsonrpsee_types::params::_::_&lt;impl serde::de::Deserialize for jsonrpsee_types::params::Id&gt;::deserialize (313 samples, 1.05%)</title><rect x="57.9283%" y="3685" width="1.0506%" height="15" fill="rgb(205,6,39)" fg:x="17258" fg:w="313"/><text x="58.0183%" y="3695.50">js..</text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="59.0125%" y="3653" width="0.0134%" height="15" fill="rgb(221,32,16)" fg:x="17581" fg:w="4"/><text x="59.1025%" y="3663.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.02%)</title><rect x="59.0259%" y="3653" width="0.0168%" height="15" fill="rgb(228,144,50)" fg:x="17585" fg:w="5"/><text x="59.1159%" y="3663.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::end_raw_buffering (14 samples, 0.05%)</title><rect x="59.0058%" y="3669" width="0.0470%" height="15" fill="rgb(229,201,53)" fg:x="17579" fg:w="14"/><text x="59.0958%" y="3679.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.01%)</title><rect x="59.0427%" y="3653" width="0.0101%" height="15" fill="rgb(249,153,27)" fg:x="17590" fg:w="3"/><text x="59.1327%" y="3663.50"></text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (39 samples, 0.13%)</title><rect x="58.9856%" y="3685" width="0.1309%" height="15" fill="rgb(227,106,25)" fg:x="17573" fg:w="39"/><text x="59.0756%" y="3695.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (19 samples, 0.06%)</title><rect x="59.0528%" y="3669" width="0.0638%" height="15" fill="rgb(230,65,29)" fg:x="17593" fg:w="19"/><text x="59.1428%" y="3679.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (12 samples, 0.04%)</title><rect x="59.0763%" y="3653" width="0.0403%" height="15" fill="rgb(221,57,46)" fg:x="17600" fg:w="12"/><text x="59.1663%" y="3663.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (6 samples, 0.02%)</title><rect x="59.1165%" y="3685" width="0.0201%" height="15" fill="rgb(229,161,17)" fg:x="17612" fg:w="6"/><text x="59.2066%" y="3695.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (472 samples, 1.58%)</title><rect x="57.5557%" y="3701" width="1.5843%" height="15" fill="rgb(222,213,11)" fg:x="17147" fg:w="472"/><text x="57.6457%" y="3711.50">&lt;&amp;mut..</text></g><g><title>jsonrpsee_server::utils::deserialize::from_slice_with_extensions (494 samples, 1.66%)</title><rect x="57.4987%" y="3733" width="1.6582%" height="15" fill="rgb(235,35,13)" fg:x="17130" fg:w="494"/><text x="57.5887%" y="3743.50">jsonr..</text></g><g><title>serde_json::de::from_trait (484 samples, 1.62%)</title><rect x="57.5322%" y="3717" width="1.6246%" height="15" fill="rgb(233,158,34)" fg:x="17140" fg:w="484"/><text x="57.6222%" y="3727.50">serde..</text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.01%)</title><rect x="59.1468%" y="3701" width="0.0101%" height="15" fill="rgb(215,151,48)" fg:x="17621" fg:w="3"/><text x="59.2368%" y="3711.50"></text></g><g><title>jsonrpsee_server::server::handle_rpc_call::_{{closure}} (583 samples, 1.96%)</title><rect x="57.2033%" y="3749" width="1.9569%" height="15" fill="rgb(229,84,14)" fg:x="17042" fg:w="583"/><text x="57.2933%" y="3759.50">jsonrps..</text></g><g><title>jsonrpsee_server::transport::http::call_with_service::_{{closure}} (15 samples, 0.05%)</title><rect x="59.1602%" y="3749" width="0.0503%" height="15" fill="rgb(229,68,14)" fg:x="17625" fg:w="15"/><text x="59.2502%" y="3759.50"></text></g><g><title>_nanov2_free (10 samples, 0.03%)</title><rect x="59.2139%" y="3733" width="0.0336%" height="15" fill="rgb(243,106,26)" fg:x="17641" fg:w="10"/><text x="59.3039%" y="3743.50"></text></g><g><title>_platform_memset (4 samples, 0.01%)</title><rect x="59.2340%" y="3717" width="0.0134%" height="15" fill="rgb(206,45,38)" fg:x="17647" fg:w="4"/><text x="59.3240%" y="3727.50"></text></g><g><title>_nanov2_free (8 samples, 0.03%)</title><rect x="59.2676%" y="3701" width="0.0269%" height="15" fill="rgb(226,6,15)" fg:x="17657" fg:w="8"/><text x="59.3576%" y="3711.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.05%)</title><rect x="59.2474%" y="3717" width="0.0537%" height="15" fill="rgb(232,22,54)" fg:x="17651" fg:w="16"/><text x="59.3375%" y="3727.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="59.3012%" y="3717" width="0.0134%" height="15" fill="rgb(229,222,32)" fg:x="17667" fg:w="4"/><text x="59.3912%" y="3727.50"></text></g><g><title>_free (4 samples, 0.01%)</title><rect x="59.3146%" y="3717" width="0.0134%" height="15" fill="rgb(228,62,29)" fg:x="17671" fg:w="4"/><text x="59.4046%" y="3727.50"></text></g><g><title>jsonrpsee_server::transport::http::call_with_service::_{{closure}}::_{{closure}} (45 samples, 0.15%)</title><rect x="59.2105%" y="3749" width="0.1510%" height="15" fill="rgb(251,103,34)" fg:x="17640" fg:w="45"/><text x="59.3005%" y="3759.50"></text></g><g><title>jsonrpsee_core::server::method_response::MethodResponse::into_result (34 samples, 0.11%)</title><rect x="59.2474%" y="3733" width="0.1141%" height="15" fill="rgb(233,12,30)" fg:x="17651" fg:w="34"/><text x="59.3375%" y="3743.50"></text></g><g><title>_nanov2_free (10 samples, 0.03%)</title><rect x="59.3280%" y="3717" width="0.0336%" height="15" fill="rgb(238,52,0)" fg:x="17675" fg:w="10"/><text x="59.4180%" y="3727.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="59.3515%" y="3701" width="0.0101%" height="15" fill="rgb(223,98,5)" fg:x="17682" fg:w="3"/><text x="59.4415%" y="3711.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (13 samples, 0.04%)</title><rect x="59.3851%" y="3701" width="0.0436%" height="15" fill="rgb(228,75,37)" fg:x="17692" fg:w="13"/><text x="59.4751%" y="3711.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.08%)</title><rect x="59.3616%" y="3733" width="0.0806%" height="15" fill="rgb(205,115,49)" fg:x="17685" fg:w="24"/><text x="59.4516%" y="3743.50"></text></g><g><title>&lt;jsonrpsee_core::http_helpers::Body as core::convert::From&lt;alloc::string::String&gt;&gt;::from (24 samples, 0.08%)</title><rect x="59.3616%" y="3717" width="0.0806%" height="15" fill="rgb(250,154,43)" fg:x="17685" fg:w="24"/><text x="59.4516%" y="3727.50"></text></g><g><title>&lt;http::response::Builder as core::default::Default&gt;::default (6 samples, 0.02%)</title><rect x="59.4421%" y="3733" width="0.0201%" height="15" fill="rgb(226,43,29)" fg:x="17709" fg:w="6"/><text x="59.5321%" y="3743.50"></text></g><g><title>http::response::Parts::new (4 samples, 0.01%)</title><rect x="59.4488%" y="3717" width="0.0134%" height="15" fill="rgb(249,228,39)" fg:x="17711" fg:w="4"/><text x="59.5389%" y="3727.50"></text></g><g><title>_free (5 samples, 0.02%)</title><rect x="59.4891%" y="3717" width="0.0168%" height="15" fill="rgb(216,79,43)" fg:x="17723" fg:w="5"/><text x="59.5791%" y="3727.50"></text></g><g><title>_nanov2_free (6 samples, 0.02%)</title><rect x="59.5059%" y="3717" width="0.0201%" height="15" fill="rgb(228,95,12)" fg:x="17728" fg:w="6"/><text x="59.5959%" y="3727.50"></text></g><g><title>_szone_free (3 samples, 0.01%)</title><rect x="59.5294%" y="3717" width="0.0101%" height="15" fill="rgb(249,221,15)" fg:x="17735" fg:w="3"/><text x="59.6194%" y="3727.50"></text></g><g><title>_nanov2_free (14 samples, 0.05%)</title><rect x="59.5495%" y="3701" width="0.0470%" height="15" fill="rgb(233,34,13)" fg:x="17741" fg:w="14"/><text x="59.6396%" y="3711.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="59.5865%" y="3685" width="0.0101%" height="15" fill="rgb(214,103,39)" fg:x="17752" fg:w="3"/><text x="59.6765%" y="3695.50"></text></g><g><title>_szone_free (7 samples, 0.02%)</title><rect x="59.6402%" y="3685" width="0.0235%" height="15" fill="rgb(251,126,39)" fg:x="17768" fg:w="7"/><text x="59.7302%" y="3695.50"></text></g><g><title>small_free_list_add_ptr (12 samples, 0.04%)</title><rect x="59.7644%" y="3669" width="0.0403%" height="15" fill="rgb(214,216,36)" fg:x="17805" fg:w="12"/><text x="59.8544%" y="3679.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (71 samples, 0.24%)</title><rect x="59.5999%" y="3701" width="0.2383%" height="15" fill="rgb(220,221,8)" fg:x="17756" fg:w="71"/><text x="59.6899%" y="3711.50"></text></g><g><title>free_small (52 samples, 0.17%)</title><rect x="59.6637%" y="3685" width="0.1745%" height="15" fill="rgb(240,216,3)" fg:x="17775" fg:w="52"/><text x="59.7537%" y="3695.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (9 samples, 0.03%)</title><rect x="59.8080%" y="3669" width="0.0302%" height="15" fill="rgb(232,218,17)" fg:x="17818" fg:w="9"/><text x="59.8980%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;[http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;]&gt; (90 samples, 0.30%)</title><rect x="59.5395%" y="3717" width="0.3021%" height="15" fill="rgb(229,163,45)" fg:x="17738" fg:w="90"/><text x="59.6295%" y="3727.50"></text></g><g><title>_platform_memset (12 samples, 0.04%)</title><rect x="59.8852%" y="3701" width="0.0403%" height="15" fill="rgb(231,110,42)" fg:x="17841" fg:w="12"/><text x="59.9752%" y="3711.50"></text></g><g><title>tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="60.0262%" y="3685" width="0.0101%" height="15" fill="rgb(208,170,48)" fg:x="17883" fg:w="3"/><text x="60.1162%" y="3695.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (177 samples, 0.59%)</title><rect x="59.4623%" y="3733" width="0.5941%" height="15" fill="rgb(239,116,25)" fg:x="17715" fg:w="177"/><text x="59.5523%" y="3743.50"></text></g><g><title>free_tiny (64 samples, 0.21%)</title><rect x="59.8416%" y="3717" width="0.2148%" height="15" fill="rgb(219,200,50)" fg:x="17828" fg:w="64"/><text x="59.9316%" y="3727.50"></text></g><g><title>tiny_free_no_lock (39 samples, 0.13%)</title><rect x="59.9255%" y="3701" width="0.1309%" height="15" fill="rgb(245,200,0)" fg:x="17853" fg:w="39"/><text x="60.0155%" y="3711.50"></text></g><g><title>tiny_free_list_remove_ptr (6 samples, 0.02%)</title><rect x="60.0363%" y="3685" width="0.0201%" height="15" fill="rgb(245,119,33)" fg:x="17886" fg:w="6"/><text x="60.1263%" y="3695.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (7 samples, 0.02%)</title><rect x="60.0564%" y="3733" width="0.0235%" height="15" fill="rgb(231,125,12)" fg:x="17892" fg:w="7"/><text x="60.1464%" y="3743.50"></text></g><g><title>bytes::bytes::static_drop (3 samples, 0.01%)</title><rect x="60.0698%" y="3717" width="0.0101%" height="15" fill="rgb(216,96,41)" fg:x="17896" fg:w="3"/><text x="60.1598%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_core::http_helpers::read_body&lt;jsonrpsee_core::http_helpers::Body&gt;::{{closure}}&gt; (3 samples, 0.01%)</title><rect x="60.0799%" y="3733" width="0.0101%" height="15" fill="rgb(248,43,45)" fg:x="17899" fg:w="3"/><text x="60.1699%" y="3743.50"></text></g><g><title>&lt;http::header::name::HeaderName as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (6 samples, 0.02%)</title><rect x="60.1067%" y="3717" width="0.0201%" height="15" fill="rgb(217,222,7)" fg:x="17907" fg:w="6"/><text x="60.1967%" y="3727.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (6 samples, 0.02%)</title><rect x="60.1067%" y="3701" width="0.0201%" height="15" fill="rgb(233,28,6)" fg:x="17907" fg:w="6"/><text x="60.1967%" y="3711.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="60.1269%" y="3701" width="0.0101%" height="15" fill="rgb(231,218,15)" fg:x="17913" fg:w="3"/><text x="60.2169%" y="3711.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="60.1571%" y="3669" width="0.0101%" height="15" fill="rgb(226,171,48)" fg:x="17922" fg:w="3"/><text x="60.2471%" y="3679.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.01%)</title><rect x="60.2175%" y="3637" width="0.0134%" height="15" fill="rgb(235,201,9)" fg:x="17940" fg:w="4"/><text x="60.3075%" y="3647.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.16%)</title><rect x="60.1571%" y="3685" width="0.1611%" height="15" fill="rgb(217,80,15)" fg:x="17922" fg:w="48"/><text x="60.2471%" y="3695.50"></text></g><g><title>szone_malloc_should_clear (43 samples, 0.14%)</title><rect x="60.1739%" y="3669" width="0.1443%" height="15" fill="rgb(219,152,8)" fg:x="17927" fg:w="43"/><text x="60.2639%" y="3679.50"></text></g><g><title>tiny_malloc_should_clear (40 samples, 0.13%)</title><rect x="60.1839%" y="3653" width="0.1343%" height="15" fill="rgb(243,107,38)" fg:x="17930" fg:w="40"/><text x="60.2740%" y="3663.50"></text></g><g><title>tiny_malloc_from_free_list (26 samples, 0.09%)</title><rect x="60.2309%" y="3637" width="0.0873%" height="15" fill="rgb(231,17,5)" fg:x="17944" fg:w="26"/><text x="60.3209%" y="3647.50"></text></g><g><title>tiny_free_list_add_ptr (4 samples, 0.01%)</title><rect x="60.3048%" y="3621" width="0.0134%" height="15" fill="rgb(209,25,54)" fg:x="17966" fg:w="4"/><text x="60.3948%" y="3631.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (3 samples, 0.01%)</title><rect x="60.3283%" y="3685" width="0.0101%" height="15" fill="rgb(219,0,2)" fg:x="17973" fg:w="3"/><text x="60.4183%" y="3695.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_append2 (63 samples, 0.21%)</title><rect x="60.1369%" y="3701" width="0.2115%" height="15" fill="rgb(246,9,5)" fg:x="17916" fg:w="63"/><text x="60.2270%" y="3711.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::try_append (70 samples, 0.23%)</title><rect x="60.1269%" y="3717" width="0.2350%" height="15" fill="rgb(226,159,4)" fg:x="17913" fg:w="70"/><text x="60.2169%" y="3727.50"></text></g><g><title>http::response::Builder::and_then (10 samples, 0.03%)</title><rect x="60.3686%" y="3717" width="0.0336%" height="15" fill="rgb(219,175,34)" fg:x="17985" fg:w="10"/><text x="60.4586%" y="3727.50"></text></g><g><title>http::response::Builder::header (95 samples, 0.32%)</title><rect x="60.1000%" y="3733" width="0.3189%" height="15" fill="rgb(236,10,46)" fg:x="17905" fg:w="95"/><text x="60.1900%" y="3743.50"></text></g><g><title>http::response::Builder::header::_{{closure}} (5 samples, 0.02%)</title><rect x="60.4021%" y="3717" width="0.0168%" height="15" fill="rgb(240,211,16)" fg:x="17995" fg:w="5"/><text x="60.4921%" y="3727.50"></text></g><g><title>jsonrpsee_server::transport::http::call_with_service::_{{closure}} (322 samples, 1.08%)</title><rect x="59.3616%" y="3749" width="1.0808%" height="15" fill="rgb(205,3,43)" fg:x="17685" fg:w="322"/><text x="59.4516%" y="3759.50">jso..</text></g><g><title>jsonrpsee_server::transport::http::response::ok_response (5 samples, 0.02%)</title><rect x="60.4256%" y="3733" width="0.0168%" height="15" fill="rgb(245,7,22)" fg:x="18002" fg:w="5"/><text x="60.5156%" y="3743.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::find (4 samples, 0.01%)</title><rect x="60.4525%" y="3733" width="0.0134%" height="15" fill="rgb(239,132,32)" fg:x="18010" fg:w="4"/><text x="60.5425%" y="3743.50"></text></g><g><title>&lt;http::header::name::Repr&lt;T&gt; as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="60.4558%" y="3717" width="0.0101%" height="15" fill="rgb(228,202,34)" fg:x="18011" fg:w="3"/><text x="60.5458%" y="3727.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11,150 samples, 37.43%)</title><rect x="23.0934%" y="3765" width="37.4262%" height="15" fill="rgb(254,200,22)" fg:x="6880" fg:w="11150"/><text x="23.1835%" y="3775.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>jsonrpsee_server::transport::http::content_type_is_json (23 samples, 0.08%)</title><rect x="60.4424%" y="3749" width="0.0772%" height="15" fill="rgb(219,10,39)" fg:x="18007" fg:w="23"/><text x="60.5324%" y="3759.50"></text></g><g><title>jsonrpsee_server::transport::http::is_json (14 samples, 0.05%)</title><rect x="60.4726%" y="3733" width="0.0470%" height="15" fill="rgb(226,210,39)" fg:x="18016" fg:w="14"/><text x="60.5626%" y="3743.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="60.5834%" y="3749" width="0.0134%" height="15" fill="rgb(208,219,16)" fg:x="18049" fg:w="4"/><text x="60.6734%" y="3759.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.01%)</title><rect x="60.6304%" y="3717" width="0.0101%" height="15" fill="rgb(216,158,51)" fg:x="18063" fg:w="3"/><text x="60.7204%" y="3727.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="60.6404%" y="3717" width="0.0201%" height="15" fill="rgb(233,14,44)" fg:x="18066" fg:w="6"/><text x="60.7304%" y="3727.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.06%)</title><rect x="60.6304%" y="3733" width="0.0604%" height="15" fill="rgb(237,97,39)" fg:x="18063" fg:w="18"/><text x="60.7204%" y="3743.50"></text></g><g><title>nanov2_malloc_type (9 samples, 0.03%)</title><rect x="60.6606%" y="3717" width="0.0302%" height="15" fill="rgb(218,198,43)" fg:x="18072" fg:w="9"/><text x="60.7506%" y="3727.50"></text></g><g><title>http::extensions::Extensions::insert (7 samples, 0.02%)</title><rect x="60.7076%" y="3733" width="0.0235%" height="15" fill="rgb(231,104,20)" fg:x="18086" fg:w="7"/><text x="60.7976%" y="3743.50"></text></g><g><title>jsonrpsee_server::future::ConnectionGuard::try_acquire (15 samples, 0.05%)</title><rect x="60.7311%" y="3733" width="0.0503%" height="15" fill="rgb(254,36,13)" fg:x="18093" fg:w="15"/><text x="60.8211%" y="3743.50"></text></g><g><title>jsonrpsee_server::server::ConnectionState::new (14 samples, 0.05%)</title><rect x="60.7814%" y="3733" width="0.0470%" height="15" fill="rgb(248,14,50)" fg:x="18108" fg:w="14"/><text x="60.8714%" y="3743.50"></text></g><g><title>nanov2_malloc_type (6 samples, 0.02%)</title><rect x="60.8083%" y="3717" width="0.0201%" height="15" fill="rgb(217,107,29)" fg:x="18116" fg:w="6"/><text x="60.8983%" y="3727.50"></text></g><g><title>core::intrinsics::likely (3 samples, 0.01%)</title><rect x="60.8418%" y="3717" width="0.0101%" height="15" fill="rgb(251,169,33)" fg:x="18126" fg:w="3"/><text x="60.9318%" y="3727.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.03%)</title><rect x="60.8519%" y="3717" width="0.0269%" height="15" fill="rgb(217,108,32)" fg:x="18129" fg:w="8"/><text x="60.9419%" y="3727.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="60.8788%" y="3701" width="0.0101%" height="15" fill="rgb(219,66,42)" fg:x="18137" fg:w="3"/><text x="60.9688%" y="3711.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="60.8788%" y="3685" width="0.0101%" height="15" fill="rgb(206,180,7)" fg:x="18137" fg:w="3"/><text x="60.9688%" y="3695.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="60.8922%" y="3685" width="0.0134%" height="15" fill="rgb(208,226,31)" fg:x="18141" fg:w="4"/><text x="60.9822%" y="3695.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (16 samples, 0.05%)</title><rect x="60.8788%" y="3717" width="0.0537%" height="15" fill="rgb(218,26,49)" fg:x="18137" fg:w="16"/><text x="60.9688%" y="3727.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.04%)</title><rect x="60.8888%" y="3701" width="0.0436%" height="15" fill="rgb(233,197,48)" fg:x="18140" fg:w="13"/><text x="60.9788%" y="3711.50"></text></g><g><title>nanov2_malloc_type (7 samples, 0.02%)</title><rect x="60.9090%" y="3685" width="0.0235%" height="15" fill="rgb(252,181,51)" fg:x="18146" fg:w="7"/><text x="60.9990%" y="3695.50"></text></g><g><title>&lt;jsonrpsee_server::server::TowerServiceNoHttp&lt;RpcMiddleware&gt; as tower_service::Service&lt;http::request::Request&lt;Body&gt;&gt;&gt;::call (101 samples, 0.34%)</title><rect x="60.5968%" y="3749" width="0.3390%" height="15" fill="rgb(253,90,19)" fg:x="18053" fg:w="101"/><text x="60.6868%" y="3759.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (32 samples, 0.11%)</title><rect x="60.8284%" y="3733" width="0.1074%" height="15" fill="rgb(215,171,30)" fg:x="18122" fg:w="32"/><text x="60.9184%" y="3743.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="60.9425%" y="3733" width="0.0134%" height="15" fill="rgb(214,222,9)" fg:x="18156" fg:w="4"/><text x="61.0325%" y="3743.50"></text></g><g><title>rack_get_thread_index (5 samples, 0.02%)</title><rect x="60.9962%" y="3701" width="0.0168%" height="15" fill="rgb(223,3,22)" fg:x="18172" fg:w="5"/><text x="61.0862%" y="3711.50"></text></g><g><title>small_free_list_remove_ptr (4 samples, 0.01%)</title><rect x="61.0332%" y="3685" width="0.0134%" height="15" fill="rgb(225,196,46)" fg:x="18183" fg:w="4"/><text x="61.1232%" y="3695.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.11%)</title><rect x="60.9425%" y="3749" width="0.1074%" height="15" fill="rgb(209,110,37)" fg:x="18156" fg:w="32"/><text x="61.0325%" y="3759.50"></text></g><g><title>szone_malloc_should_clear (25 samples, 0.08%)</title><rect x="60.9660%" y="3733" width="0.0839%" height="15" fill="rgb(249,89,12)" fg:x="18163" fg:w="25"/><text x="61.0560%" y="3743.50"></text></g><g><title>small_malloc_should_clear (24 samples, 0.08%)</title><rect x="60.9694%" y="3717" width="0.0806%" height="15" fill="rgb(226,27,33)" fg:x="18164" fg:w="24"/><text x="61.0594%" y="3727.50"></text></g><g><title>small_malloc_from_free_list (11 samples, 0.04%)</title><rect x="61.0130%" y="3701" width="0.0369%" height="15" fill="rgb(213,82,22)" fg:x="18177" fg:w="11"/><text x="61.1030%" y="3711.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (25 samples, 0.08%)</title><rect x="61.0499%" y="3749" width="0.0839%" height="15" fill="rgb(248,140,0)" fg:x="18188" fg:w="25"/><text x="61.1400%" y="3759.50"></text></g><g><title>_platform_memmove (23 samples, 0.08%)</title><rect x="61.0567%" y="3733" width="0.0772%" height="15" fill="rgb(228,106,3)" fg:x="18190" fg:w="23"/><text x="61.1467%" y="3743.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.01%)</title><rect x="61.1339%" y="3749" width="0.0101%" height="15" fill="rgb(209,23,37)" fg:x="18213" fg:w="3"/><text x="61.2239%" y="3759.50"></text></g><g><title>http::request::Request&lt;T&gt;::map (3 samples, 0.01%)</title><rect x="61.1607%" y="3749" width="0.0101%" height="15" fill="rgb(241,93,50)" fg:x="18221" fg:w="3"/><text x="61.2507%" y="3759.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (215 samples, 0.72%)</title><rect x="60.5297%" y="3765" width="0.7217%" height="15" fill="rgb(253,46,43)" fg:x="18033" fg:w="215"/><text x="60.6197%" y="3775.50">&lt;..</text></g><g><title>soketto::handshake::http::is_upgrade_request (23 samples, 0.08%)</title><rect x="61.1741%" y="3749" width="0.0772%" height="15" fill="rgb(226,206,43)" fg:x="18225" fg:w="23"/><text x="61.2641%" y="3759.50"></text></g><g><title>soketto::handshake::http::header_contains_value (22 samples, 0.07%)</title><rect x="61.1775%" y="3733" width="0.0738%" height="15" fill="rgb(217,54,7)" fg:x="18226" fg:w="22"/><text x="61.2675%" y="3743.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (15 samples, 0.05%)</title><rect x="61.2010%" y="3717" width="0.0503%" height="15" fill="rgb(223,5,52)" fg:x="18233" fg:w="15"/><text x="61.2910%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;http::request::Request&lt;jsonrpsee_core::http_helpers::Body&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="61.2715%" y="3749" width="0.0134%" height="15" fill="rgb(206,52,46)" fg:x="18254" fg:w="4"/><text x="61.3615%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;jsonrpsee_server::server::TowerServiceNoHttp&lt;tower_layer::identity::Identity&gt; as tower_service::Service&lt;http::request::Request&lt;jsonrpsee_core::http_helpers::Body&gt;&gt;&gt;::call::{{closure}}&gt; (4 samples, 0.01%)</title><rect x="61.3050%" y="3733" width="0.0134%" height="15" fill="rgb(253,136,11)" fg:x="18264" fg:w="4"/><text x="61.3951%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::oneshot::State&lt;jsonrpsee_server::server::TowerServiceNoHttp&lt;tower_layer::identity::Identity&gt;,http::request::Request&lt;jsonrpsee_core::http_helpers::Body&gt;&gt;&gt; (21 samples, 0.07%)</title><rect x="61.2883%" y="3749" width="0.0705%" height="15" fill="rgb(208,106,33)" fg:x="18259" fg:w="21"/><text x="61.3783%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonrpsee_server::server::TowerServiceNoHttp&lt;tower_layer::identity::Identity&gt;&gt; (12 samples, 0.04%)</title><rect x="61.3185%" y="3733" width="0.0403%" height="15" fill="rgb(206,54,4)" fg:x="18268" fg:w="12"/><text x="61.4085%" y="3743.50"></text></g><g><title>small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="61.4158%" y="3733" width="0.0168%" height="15" fill="rgb(213,3,15)" fg:x="18297" fg:w="5"/><text x="61.5058%" y="3743.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (57 samples, 0.19%)</title><rect x="61.2513%" y="3765" width="0.1913%" height="15" fill="rgb(252,211,39)" fg:x="18248" fg:w="57"/><text x="61.3414%" y="3775.50"></text></g><g><title>free_small (25 samples, 0.08%)</title><rect x="61.3588%" y="3749" width="0.0839%" height="15" fill="rgb(223,6,36)" fg:x="18280" fg:w="25"/><text x="61.4488%" y="3759.50"></text></g><g><title>&lt;jsonrpsee_server::utils::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll (11,429 samples, 38.36%)</title><rect x="23.0834%" y="3781" width="38.3626%" height="15" fill="rgb(252,169,45)" fg:x="6877" fg:w="11429"/><text x="23.1734%" y="3791.50">&lt;jsonrpsee_server::utils::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll</text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="61.4460%" y="3781" width="0.0168%" height="15" fill="rgb(212,48,26)" fg:x="18306" fg:w="5"/><text x="61.5360%" y="3791.50"></text></g><g><title>_nanov2_free (5 samples, 0.02%)</title><rect x="61.4460%" y="3765" width="0.0168%" height="15" fill="rgb(251,102,48)" fg:x="18306" fg:w="5"/><text x="61.5360%" y="3775.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn http_body::Body+Data = bytes::bytes::Bytes+Error = alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;+core::marker::Send&gt;&gt; (3 samples, 0.01%)</title><rect x="61.4863%" y="3781" width="0.0101%" height="15" fill="rgb(243,208,16)" fg:x="18318" fg:w="3"/><text x="61.5763%" y="3791.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_read_head (4 samples, 0.01%)</title><rect x="61.5098%" y="3781" width="0.0134%" height="15" fill="rgb(219,96,24)" fg:x="18325" fg:w="4"/><text x="61.5998%" y="3791.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="61.5602%" y="3733" width="0.0168%" height="15" fill="rgb(219,33,29)" fg:x="18340" fg:w="5"/><text x="61.6502%" y="3743.50"></text></g><g><title>rack_get_thread_index (3 samples, 0.01%)</title><rect x="61.6239%" y="3701" width="0.0101%" height="15" fill="rgb(223,176,5)" fg:x="18359" fg:w="3"/><text x="61.7139%" y="3711.50"></text></g><g><title>small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="61.6642%" y="3685" width="0.0168%" height="15" fill="rgb(228,140,14)" fg:x="18371" fg:w="5"/><text x="61.7542%" y="3695.50"></text></g><g><title>small_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="61.6810%" y="3685" width="0.0101%" height="15" fill="rgb(217,179,31)" fg:x="18376" fg:w="3"/><text x="61.7710%" y="3695.50"></text></g><g><title>szone_malloc_should_clear (47 samples, 0.16%)</title><rect x="61.5836%" y="3733" width="0.1578%" height="15" fill="rgb(230,9,30)" fg:x="18347" fg:w="47"/><text x="61.6737%" y="3743.50"></text></g><g><title>small_malloc_should_clear (42 samples, 0.14%)</title><rect x="61.6004%" y="3717" width="0.1410%" height="15" fill="rgb(230,136,20)" fg:x="18352" fg:w="42"/><text x="61.6904%" y="3727.50"></text></g><g><title>small_malloc_from_free_list (32 samples, 0.11%)</title><rect x="61.6340%" y="3701" width="0.1074%" height="15" fill="rgb(215,210,22)" fg:x="18362" fg:w="32"/><text x="61.7240%" y="3711.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (15 samples, 0.05%)</title><rect x="61.6911%" y="3685" width="0.0503%" height="15" fill="rgb(218,43,5)" fg:x="18379" fg:w="15"/><text x="61.7811%" y="3695.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (67 samples, 0.22%)</title><rect x="61.5333%" y="3765" width="0.2249%" height="15" fill="rgb(216,11,5)" fg:x="18332" fg:w="67"/><text x="61.6233%" y="3775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (67 samples, 0.22%)</title><rect x="61.5333%" y="3749" width="0.2249%" height="15" fill="rgb(209,82,29)" fg:x="18332" fg:w="67"/><text x="61.6233%" y="3759.50"></text></g><g><title>szone_malloc_type_malloc (5 samples, 0.02%)</title><rect x="61.7414%" y="3733" width="0.0168%" height="15" fill="rgb(244,115,12)" fg:x="18394" fg:w="5"/><text x="61.8314%" y="3743.50"></text></g><g><title>_tlv_get_addr (9 samples, 0.03%)</title><rect x="61.7783%" y="3685" width="0.0302%" height="15" fill="rgb(222,82,18)" fg:x="18405" fg:w="9"/><text x="61.8683%" y="3695.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (85 samples, 0.29%)</title><rect x="61.5266%" y="3781" width="0.2853%" height="15" fill="rgb(249,227,8)" fg:x="18330" fg:w="85"/><text x="61.6166%" y="3791.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (16 samples, 0.05%)</title><rect x="61.7582%" y="3765" width="0.0537%" height="15" fill="rgb(253,141,45)" fg:x="18399" fg:w="16"/><text x="61.8482%" y="3775.50"></text></g><g><title>&lt;hyper_util::common::rewind::Rewind&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (16 samples, 0.05%)</title><rect x="61.7582%" y="3749" width="0.0537%" height="15" fill="rgb(234,184,4)" fg:x="18399" fg:w="16"/><text x="61.8482%" y="3759.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (15 samples, 0.05%)</title><rect x="61.7615%" y="3733" width="0.0503%" height="15" fill="rgb(218,194,23)" fg:x="18400" fg:w="15"/><text x="61.8516%" y="3743.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (13 samples, 0.04%)</title><rect x="61.7683%" y="3717" width="0.0436%" height="15" fill="rgb(235,66,41)" fg:x="18402" fg:w="13"/><text x="61.8583%" y="3727.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (12 samples, 0.04%)</title><rect x="61.7716%" y="3701" width="0.0403%" height="15" fill="rgb(245,217,1)" fg:x="18403" fg:w="12"/><text x="61.8616%" y="3711.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="61.8488%" y="3765" width="0.0101%" height="15" fill="rgb(229,91,1)" fg:x="18426" fg:w="3"/><text x="61.9388%" y="3775.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="61.8488%" y="3749" width="0.0101%" height="15" fill="rgb(207,101,30)" fg:x="18426" fg:w="3"/><text x="61.9388%" y="3759.50"></text></g><g><title>&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.01%)</title><rect x="61.8622%" y="3749" width="0.0101%" height="15" fill="rgb(223,82,49)" fg:x="18430" fg:w="3"/><text x="61.9523%" y="3759.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::advance (5 samples, 0.02%)</title><rect x="61.8589%" y="3765" width="0.0168%" height="15" fill="rgb(218,167,17)" fg:x="18429" fg:w="5"/><text x="61.9489%" y="3775.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write_vectored (2,213 samples, 7.43%)</title><rect x="61.9327%" y="3701" width="7.4282%" height="15" fill="rgb(208,103,14)" fg:x="18451" fg:w="2213"/><text x="62.0227%" y="3711.50">&lt;&amp;std::fs::File as std::io::Writ..</text></g><g><title>writev (2,207 samples, 7.41%)</title><rect x="61.9529%" y="3685" width="7.4080%" height="15" fill="rgb(238,20,8)" fg:x="18457" fg:w="2207"/><text x="62.0429%" y="3695.50">writev</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (2,214 samples, 7.43%)</title><rect x="61.9327%" y="3717" width="7.4315%" height="15" fill="rgb(218,80,54)" fg:x="18451" fg:w="2214"/><text x="62.0227%" y="3727.50">&lt;&amp;mio::net::tcp::stream::TcpStre..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2,235 samples, 7.50%)</title><rect x="61.8790%" y="3749" width="7.5020%" height="15" fill="rgb(240,144,17)" fg:x="18435" fg:w="2235"/><text x="61.9690%" y="3759.50">&lt;tokio::net::tcp::stream::TcpStre..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (2,230 samples, 7.49%)</title><rect x="61.8958%" y="3733" width="7.4852%" height="15" fill="rgb(245,27,50)" fg:x="18440" fg:w="2230"/><text x="61.9858%" y="3743.50">tokio::runtime::io::registration:..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.01%)</title><rect x="69.3676%" y="3717" width="0.0134%" height="15" fill="rgb(251,51,7)" fg:x="20666" fg:w="4"/><text x="69.4576%" y="3727.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write_vectored (2,236 samples, 7.51%)</title><rect x="61.8790%" y="3765" width="7.5054%" height="15" fill="rgb(245,217,29)" fg:x="18435" fg:w="2236"/><text x="61.9690%" y="3775.50">&lt;hyper_util::rt::tokio::TokioIo&lt;T..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (3 samples, 0.01%)</title><rect x="69.3878%" y="3765" width="0.0101%" height="15" fill="rgb(221,176,29)" fg:x="20672" fg:w="3"/><text x="69.4778%" y="3775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3 samples, 0.01%)</title><rect x="69.4079%" y="3765" width="0.0101%" height="15" fill="rgb(212,180,24)" fg:x="20678" fg:w="3"/><text x="69.4979%" y="3775.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="69.4347%" y="3749" width="0.0134%" height="15" fill="rgb(254,24,2)" fg:x="20686" fg:w="4"/><text x="69.5248%" y="3759.50"></text></g><g><title>_nanov2_free (7 samples, 0.02%)</title><rect x="69.4683%" y="3733" width="0.0235%" height="15" fill="rgb(230,100,2)" fg:x="20696" fg:w="7"/><text x="69.5583%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::BufKind&lt;bytes::bytes::Bytes&gt;&gt; (25 samples, 0.08%)</title><rect x="69.4280%" y="3765" width="0.0839%" height="15" fill="rgb(219,142,25)" fg:x="20684" fg:w="25"/><text x="69.5180%" y="3775.50"></text></g><g><title>bytes::bytes::shared_drop (19 samples, 0.06%)</title><rect x="69.4482%" y="3749" width="0.0638%" height="15" fill="rgb(240,73,43)" fg:x="20690" fg:w="19"/><text x="69.5382%" y="3759.50"></text></g><g><title>free_small (5 samples, 0.02%)</title><rect x="69.4952%" y="3733" width="0.0168%" height="15" fill="rgb(214,114,15)" fg:x="20704" fg:w="5"/><text x="69.5852%" y="3743.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2,311 samples, 7.76%)</title><rect x="61.8186%" y="3781" width="7.7571%" height="15" fill="rgb(207,130,4)" fg:x="18417" fg:w="2311"/><text x="61.9086%" y="3791.50">hyper::proto::h1::conn::Conn&lt;I,B,T..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (19 samples, 0.06%)</title><rect x="69.5119%" y="3765" width="0.0638%" height="15" fill="rgb(221,25,40)" fg:x="20709" fg:w="19"/><text x="69.6020%" y="3775.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::name::Repr&lt;http::header::name::Custom&gt;&gt; (3 samples, 0.01%)</title><rect x="69.6630%" y="3765" width="0.0101%" height="15" fill="rgb(241,184,7)" fg:x="20754" fg:w="3"/><text x="69.7530%" y="3775.50"></text></g><g><title>&lt;http::header::name::Repr&lt;T&gt; as core::hash::Hash&gt;::hash (7 samples, 0.02%)</title><rect x="69.6798%" y="3749" width="0.0235%" height="15" fill="rgb(235,159,4)" fg:x="20759" fg:w="7"/><text x="69.7698%" y="3759.50"></text></g><g><title>&lt;http::header::name::StandardHeader as core::hash::Hash&gt;::hash (4 samples, 0.01%)</title><rect x="69.7033%" y="3749" width="0.0134%" height="15" fill="rgb(214,87,48)" fg:x="20766" fg:w="4"/><text x="69.7933%" y="3759.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::find (17 samples, 0.06%)</title><rect x="69.6731%" y="3765" width="0.0571%" height="15" fill="rgb(246,198,24)" fg:x="20757" fg:w="17"/><text x="69.7631%" y="3775.50"></text></g><g><title>http::header::map::hash_elem_using (4 samples, 0.01%)</title><rect x="69.7167%" y="3749" width="0.0134%" height="15" fill="rgb(209,66,40)" fg:x="20770" fg:w="4"/><text x="69.8067%" y="3759.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="69.7301%" y="3765" width="0.0134%" height="15" fill="rgb(233,147,39)" fg:x="20774" fg:w="4"/><text x="69.8201%" y="3775.50"></text></g><g><title>__recvfrom (2,051 samples, 6.88%)</title><rect x="70.0154%" y="3653" width="6.8844%" height="15" fill="rgb(231,145,52)" fg:x="20859" fg:w="2051"/><text x="70.1054%" y="3663.50">__recvfrom</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2,062 samples, 6.92%)</title><rect x="69.9919%" y="3669" width="6.9213%" height="15" fill="rgb(206,20,26)" fg:x="20852" fg:w="2062"/><text x="70.0820%" y="3679.50">&lt;&amp;std::net::tcp::TcpStream as ..</text></g><g><title>recv (4 samples, 0.01%)</title><rect x="76.8998%" y="3653" width="0.0134%" height="15" fill="rgb(238,220,4)" fg:x="22910" fg:w="4"/><text x="76.9898%" y="3663.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2,068 samples, 6.94%)</title><rect x="69.9752%" y="3685" width="6.9415%" height="15" fill="rgb(252,195,42)" fg:x="20847" fg:w="2068"/><text x="70.0652%" y="3695.50">&lt;&amp;mio::net::tcp::stream::TcpSt..</text></g><g><title>_tlv_get_addr (8 samples, 0.03%)</title><rect x="76.9636%" y="3669" width="0.0269%" height="15" fill="rgb(209,10,6)" fg:x="22929" fg:w="8"/><text x="77.0536%" y="3679.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2,137 samples, 7.17%)</title><rect x="69.8577%" y="3701" width="7.1731%" height="15" fill="rgb(229,3,52)" fg:x="20812" fg:w="2137"/><text x="69.9477%" y="3711.50">tokio::io::poll_evented::PollEv..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (34 samples, 0.11%)</title><rect x="76.9166%" y="3685" width="0.1141%" height="15" fill="rgb(253,49,37)" fg:x="22915" fg:w="34"/><text x="77.0066%" y="3695.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (12 samples, 0.04%)</title><rect x="76.9905%" y="3669" width="0.0403%" height="15" fill="rgb(240,103,49)" fg:x="22937" fg:w="12"/><text x="77.0805%" y="3679.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2,145 samples, 7.20%)</title><rect x="69.8375%" y="3717" width="7.1999%" height="15" fill="rgb(250,182,30)" fg:x="20806" fg:w="2145"/><text x="69.9275%" y="3727.50">&lt;hyper_util::rt::tokio::TokioIo..</text></g><g><title>&lt;hyper_util::common::rewind::Rewind&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2,155 samples, 7.23%)</title><rect x="69.8174%" y="3733" width="7.2335%" height="15" fill="rgb(248,8,30)" fg:x="20800" fg:w="2155"/><text x="69.9074%" y="3743.50">&lt;hyper_util::common::rewind::Rew..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (2,184 samples, 7.33%)</title><rect x="69.7503%" y="3765" width="7.3308%" height="15" fill="rgb(237,120,30)" fg:x="20780" fg:w="2184"/><text x="69.8403%" y="3775.50">hyper::proto::h1::io::Buffered&lt;T..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2,169 samples, 7.28%)</title><rect x="69.8006%" y="3749" width="7.2805%" height="15" fill="rgb(221,146,34)" fg:x="20795" fg:w="2169"/><text x="69.8906%" y="3759.50">hyper::proto::h1::io::Buffered&lt;T..</text></g><g><title>hyper::proto::h1::io::ReadStrategy::record (8 samples, 0.03%)</title><rect x="77.0542%" y="3733" width="0.0269%" height="15" fill="rgb(242,55,13)" fg:x="22956" fg:w="8"/><text x="77.1443%" y="3743.50"></text></g><g><title>bytes::bytes::Bytes::slice (14 samples, 0.05%)</title><rect x="77.2221%" y="3733" width="0.0470%" height="15" fill="rgb(242,112,31)" fg:x="23006" fg:w="14"/><text x="77.3121%" y="3743.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (3 samples, 0.01%)</title><rect x="77.2590%" y="3717" width="0.0101%" height="15" fill="rgb(249,192,27)" fg:x="23017" fg:w="3"/><text x="77.3490%" y="3727.50"></text></g><g><title>bytes::bytes::Bytes::slice_ref (8 samples, 0.03%)</title><rect x="77.2691%" y="3733" width="0.0269%" height="15" fill="rgb(208,204,44)" fg:x="23020" fg:w="8"/><text x="77.3591%" y="3743.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (3 samples, 0.01%)</title><rect x="77.2858%" y="3717" width="0.0101%" height="15" fill="rgb(208,93,54)" fg:x="23025" fg:w="3"/><text x="77.3759%" y="3727.50"></text></g><g><title>DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="77.3261%" y="3717" width="0.0101%" height="15" fill="rgb(242,1,31)" fg:x="23037" fg:w="3"/><text x="77.4161%" y="3727.50"></text></g><g><title>__rustc::__rust_alloc (4 samples, 0.01%)</title><rect x="77.3396%" y="3717" width="0.0134%" height="15" fill="rgb(241,83,25)" fg:x="23041" fg:w="4"/><text x="77.4296%" y="3727.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="77.3530%" y="3717" width="0.0235%" height="15" fill="rgb(205,169,50)" fg:x="23045" fg:w="7"/><text x="77.4430%" y="3727.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (6 samples, 0.02%)</title><rect x="77.3765%" y="3717" width="0.0201%" height="15" fill="rgb(239,186,37)" fg:x="23052" fg:w="6"/><text x="77.4665%" y="3727.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (40 samples, 0.13%)</title><rect x="77.2959%" y="3733" width="0.1343%" height="15" fill="rgb(205,221,10)" fg:x="23028" fg:w="40"/><text x="77.3859%" y="3743.50"></text></g><g><title>nanov2_malloc_type (9 samples, 0.03%)</title><rect x="77.4000%" y="3717" width="0.0302%" height="15" fill="rgb(218,196,15)" fg:x="23059" fg:w="9"/><text x="77.4900%" y="3727.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (6 samples, 0.02%)</title><rect x="77.4302%" y="3733" width="0.0201%" height="15" fill="rgb(218,196,35)" fg:x="23068" fg:w="6"/><text x="77.5202%" y="3743.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (20 samples, 0.07%)</title><rect x="77.5309%" y="3717" width="0.0671%" height="15" fill="rgb(233,63,24)" fg:x="23098" fg:w="20"/><text x="77.6209%" y="3727.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_append2 (47 samples, 0.16%)</title><rect x="77.4537%" y="3733" width="0.1578%" height="15" fill="rgb(225,8,4)" fg:x="23075" fg:w="47"/><text x="77.5437%" y="3743.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (3 samples, 0.01%)</title><rect x="77.6114%" y="3733" width="0.0101%" height="15" fill="rgb(234,105,35)" fg:x="23122" fg:w="3"/><text x="77.7014%" y="3743.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve (22 samples, 0.07%)</title><rect x="77.6215%" y="3733" width="0.0738%" height="15" fill="rgb(236,21,32)" fg:x="23125" fg:w="22"/><text x="77.7115%" y="3743.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (41 samples, 0.14%)</title><rect x="77.6987%" y="3733" width="0.1376%" height="15" fill="rgb(228,109,6)" fg:x="23148" fg:w="41"/><text x="77.7887%" y="3743.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (28 samples, 0.09%)</title><rect x="77.7423%" y="3717" width="0.0940%" height="15" fill="rgb(229,215,31)" fg:x="23161" fg:w="28"/><text x="77.8324%" y="3727.50"></text></g><g><title>http::method::Method::from_bytes (6 samples, 0.02%)</title><rect x="77.8363%" y="3733" width="0.0201%" height="15" fill="rgb(221,52,54)" fg:x="23189" fg:w="6"/><text x="77.9263%" y="3743.50"></text></g><g><title>http::uri::Uri::from_shared (6 samples, 0.02%)</title><rect x="77.8565%" y="3733" width="0.0201%" height="15" fill="rgb(252,129,43)" fg:x="23195" fg:w="6"/><text x="77.9465%" y="3743.50"></text></g><g><title>httparse::parse_headers_iter_uninit (71 samples, 0.24%)</title><rect x="77.9672%" y="3701" width="0.2383%" height="15" fill="rgb(248,183,27)" fg:x="23228" fg:w="71"/><text x="78.0572%" y="3711.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (339 samples, 1.14%)</title><rect x="77.0878%" y="3749" width="1.1379%" height="15" fill="rgb(250,0,22)" fg:x="22966" fg:w="339"/><text x="77.1778%" y="3759.50">&lt;hy..</text></g><g><title>httparse::Request::parse_with_uninit_headers (104 samples, 0.35%)</title><rect x="77.8766%" y="3733" width="0.3491%" height="15" fill="rgb(213,166,10)" fg:x="23201" fg:w="104"/><text x="77.9666%" y="3743.50"></text></g><g><title>httparse::Request::parse_with_config_and_uninit_headers (100 samples, 0.34%)</title><rect x="77.8900%" y="3717" width="0.3357%" height="15" fill="rgb(207,163,36)" fg:x="23205" fg:w="100"/><text x="77.9800%" y="3727.50"></text></g><g><title>httparse::parse_version (6 samples, 0.02%)</title><rect x="78.2056%" y="3701" width="0.0201%" height="15" fill="rgb(208,122,22)" fg:x="23299" fg:w="6"/><text x="78.2956%" y="3711.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_append2 (3 samples, 0.01%)</title><rect x="78.2291%" y="3749" width="0.0101%" height="15" fill="rgb(207,104,49)" fg:x="23306" fg:w="3"/><text x="78.3191%" y="3759.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (2,585 samples, 8.68%)</title><rect x="69.5757%" y="3781" width="8.6768%" height="15" fill="rgb(248,211,50)" fg:x="20728" fg:w="2585"/><text x="69.6657%" y="3791.50">hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::p..</text></g><g><title>hyper::proto::h1::role::parse_headers (348 samples, 1.17%)</title><rect x="77.0845%" y="3765" width="1.1681%" height="15" fill="rgb(217,13,45)" fg:x="22965" fg:w="348"/><text x="77.1745%" y="3775.50">hyp..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (5 samples, 0.02%)</title><rect x="78.2526%" y="3781" width="0.0168%" height="15" fill="rgb(211,216,49)" fg:x="23313" fg:w="5"/><text x="78.3426%" y="3791.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (6 samples, 0.02%)</title><rect x="78.2760%" y="3765" width="0.0201%" height="15" fill="rgb(221,58,53)" fg:x="23320" fg:w="6"/><text x="78.3661%" y="3775.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (3 samples, 0.01%)</title><rect x="78.2861%" y="3749" width="0.0101%" height="15" fill="rgb(220,112,41)" fg:x="23323" fg:w="3"/><text x="78.3761%" y="3759.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (9 samples, 0.03%)</title><rect x="78.2693%" y="3781" width="0.0302%" height="15" fill="rgb(236,38,28)" fg:x="23318" fg:w="9"/><text x="78.3593%" y="3791.50"></text></g><g><title>hyper::proto::h1::conn::State::is_write_closed (4 samples, 0.01%)</title><rect x="78.2995%" y="3781" width="0.0134%" height="15" fill="rgb(227,195,22)" fg:x="23327" fg:w="4"/><text x="78.3896%" y="3791.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (3 samples, 0.01%)</title><rect x="78.3130%" y="3781" width="0.0101%" height="15" fill="rgb(214,55,33)" fg:x="23331" fg:w="3"/><text x="78.4030%" y="3791.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::is_done (3 samples, 0.01%)</title><rect x="78.3298%" y="3781" width="0.0101%" height="15" fill="rgb(248,80,13)" fg:x="23336" fg:w="3"/><text x="78.4198%" y="3791.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::update_date (9 samples, 0.03%)</title><rect x="78.3398%" y="3765" width="0.0302%" height="15" fill="rgb(238,52,6)" fg:x="23339" fg:w="9"/><text x="78.4298%" y="3775.50"></text></g><g><title>DYLD-STUB$$__commpage_gettimeofday (5 samples, 0.02%)</title><rect x="78.4942%" y="3701" width="0.0168%" height="15" fill="rgb(224,198,47)" fg:x="23385" fg:w="5"/><text x="78.5842%" y="3711.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (78 samples, 0.26%)</title><rect x="78.4103%" y="3749" width="0.2618%" height="15" fill="rgb(233,171,20)" fg:x="23360" fg:w="78"/><text x="78.5003%" y="3759.50"></text></g><g><title>clock_gettime (75 samples, 0.25%)</title><rect x="78.4204%" y="3733" width="0.2517%" height="15" fill="rgb(241,30,25)" fg:x="23363" fg:w="75"/><text x="78.5104%" y="3743.50"></text></g><g><title>gettimeofday (65 samples, 0.22%)</title><rect x="78.4539%" y="3717" width="0.2182%" height="15" fill="rgb(207,171,38)" fg:x="23373" fg:w="65"/><text x="78.5440%" y="3727.50"></text></g><g><title>__commpage_gettimeofday_internal (46 samples, 0.15%)</title><rect x="78.5177%" y="3701" width="0.1544%" height="15" fill="rgb(234,70,1)" fg:x="23392" fg:w="46"/><text x="78.6077%" y="3711.50"></text></g><g><title>mach_absolute_time (45 samples, 0.15%)</title><rect x="78.5211%" y="3685" width="0.1510%" height="15" fill="rgb(232,178,18)" fg:x="23393" fg:w="45"/><text x="78.6111%" y="3695.50"></text></g><g><title>hyper::common::date::update (103 samples, 0.35%)</title><rect x="78.3700%" y="3765" width="0.3457%" height="15" fill="rgb(241,78,40)" fg:x="23348" fg:w="103"/><text x="78.4600%" y="3775.50"></text></g><g><title>std::time::SystemTime::now (13 samples, 0.04%)</title><rect x="78.6721%" y="3749" width="0.0436%" height="15" fill="rgb(222,35,25)" fg:x="23438" fg:w="13"/><text x="78.7621%" y="3759.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (114 samples, 0.38%)</title><rect x="78.3398%" y="3781" width="0.3827%" height="15" fill="rgb(207,92,16)" fg:x="23339" fg:w="114"/><text x="78.4298%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (8 samples, 0.03%)</title><rect x="78.9742%" y="3765" width="0.0269%" height="15" fill="rgb(216,59,51)" fg:x="23528" fg:w="8"/><text x="79.0642%" y="3775.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (3 samples, 0.01%)</title><rect x="79.0246%" y="3749" width="0.0101%" height="15" fill="rgb(213,80,28)" fg:x="23543" fg:w="3"/><text x="79.1146%" y="3759.50"></text></g><g><title>hyper::body::incoming::Sender::poll_ready (8 samples, 0.03%)</title><rect x="79.0179%" y="3765" width="0.0269%" height="15" fill="rgb(220,93,7)" fg:x="23541" fg:w="8"/><text x="79.1079%" y="3775.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (3 samples, 0.01%)</title><rect x="79.0346%" y="3749" width="0.0101%" height="15" fill="rgb(225,24,44)" fg:x="23546" fg:w="3"/><text x="79.1246%" y="3759.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (3 samples, 0.01%)</title><rect x="79.0850%" y="3733" width="0.0101%" height="15" fill="rgb(243,74,40)" fg:x="23561" fg:w="3"/><text x="79.1750%" y="3743.50"></text></g><g><title>nanov2_malloc_type (4 samples, 0.01%)</title><rect x="79.0984%" y="3733" width="0.0134%" height="15" fill="rgb(228,39,7)" fg:x="23565" fg:w="4"/><text x="79.1884%" y="3743.50"></text></g><g><title>pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="79.1118%" y="3733" width="0.0134%" height="15" fill="rgb(227,79,8)" fg:x="23569" fg:w="4"/><text x="79.2019%" y="3743.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="79.1454%" y="3717" width="0.0101%" height="15" fill="rgb(236,58,11)" fg:x="23579" fg:w="3"/><text x="79.2354%" y="3727.50"></text></g><g><title>nanov2_malloc_type (4 samples, 0.01%)</title><rect x="79.1555%" y="3717" width="0.0134%" height="15" fill="rgb(249,63,35)" fg:x="23582" fg:w="4"/><text x="79.2455%" y="3727.50"></text></g><g><title>pthread_mutex_init (13 samples, 0.04%)</title><rect x="79.2025%" y="3701" width="0.0436%" height="15" fill="rgb(252,114,16)" fg:x="23596" fg:w="13"/><text x="79.2925%" y="3711.50"></text></g><g><title>pthread_mutexattr_init (4 samples, 0.01%)</title><rect x="79.2495%" y="3701" width="0.0134%" height="15" fill="rgb(254,151,24)" fg:x="23610" fg:w="4"/><text x="79.3395%" y="3711.50"></text></g><g><title>hyper::body::incoming::Sender::try_send_data (66 samples, 0.22%)</title><rect x="79.0447%" y="3765" width="0.2215%" height="15" fill="rgb(253,54,39)" fg:x="23549" fg:w="66"/><text x="79.1347%" y="3775.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (65 samples, 0.22%)</title><rect x="79.0481%" y="3749" width="0.2182%" height="15" fill="rgb(243,25,45)" fg:x="23550" fg:w="65"/><text x="79.1381%" y="3759.50"></text></g><g><title>std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (41 samples, 0.14%)</title><rect x="79.1286%" y="3733" width="0.1376%" height="15" fill="rgb(234,134,9)" fg:x="23574" fg:w="41"/><text x="79.2186%" y="3743.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::init (29 samples, 0.10%)</title><rect x="79.1689%" y="3717" width="0.0973%" height="15" fill="rgb(227,166,31)" fg:x="23586" fg:w="29"/><text x="79.2589%" y="3727.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (30 samples, 0.10%)</title><rect x="79.2696%" y="3765" width="0.1007%" height="15" fill="rgb(245,143,41)" fg:x="23616" fg:w="30"/><text x="79.3596%" y="3775.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (13 samples, 0.04%)</title><rect x="79.3267%" y="3749" width="0.0436%" height="15" fill="rgb(238,181,32)" fg:x="23633" fg:w="13"/><text x="79.4167%" y="3759.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (8 samples, 0.03%)</title><rect x="79.3434%" y="3733" width="0.0269%" height="15" fill="rgb(224,113,18)" fg:x="23638" fg:w="8"/><text x="79.4335%" y="3743.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (6 samples, 0.02%)</title><rect x="79.3502%" y="3717" width="0.0201%" height="15" fill="rgb(240,229,28)" fg:x="23640" fg:w="6"/><text x="79.4402%" y="3727.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (196 samples, 0.66%)</title><rect x="78.7225%" y="3781" width="0.6579%" height="15" fill="rgb(250,185,3)" fg:x="23453" fg:w="196"/><text x="78.8125%" y="3791.50">h..</text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (6 samples, 0.02%)</title><rect x="79.4979%" y="3749" width="0.0201%" height="15" fill="rgb(212,59,25)" fg:x="23684" fg:w="6"/><text x="79.5879%" y="3759.50"></text></g><g><title>&lt;jsonrpsee_server::server::TowerServiceNoHttp&lt;L&gt; as core::clone::Clone&gt;::clone (19 samples, 0.06%)</title><rect x="79.5247%" y="3749" width="0.0638%" height="15" fill="rgb(221,87,20)" fg:x="23692" fg:w="19"/><text x="79.6147%" y="3759.50"></text></g><g><title>&lt;jsonrpsee_server::server::ServiceData as core::clone::Clone&gt;::clone (17 samples, 0.06%)</title><rect x="79.5314%" y="3733" width="0.0571%" height="15" fill="rgb(213,74,28)" fg:x="23694" fg:w="17"/><text x="79.6214%" y="3743.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="79.5885%" y="3749" width="0.0134%" height="15" fill="rgb(224,132,34)" fg:x="23711" fg:w="4"/><text x="79.6785%" y="3759.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="79.6053%" y="3749" width="0.0101%" height="15" fill="rgb(222,101,24)" fg:x="23716" fg:w="3"/><text x="79.6953%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (19 samples, 0.06%)</title><rect x="79.6153%" y="3749" width="0.0638%" height="15" fill="rgb(254,142,4)" fg:x="23719" fg:w="19"/><text x="79.7053%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;[http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;]&gt; (9 samples, 0.03%)</title><rect x="79.6489%" y="3733" width="0.0302%" height="15" fill="rgb(230,229,49)" fg:x="23729" fg:w="9"/><text x="79.7389%" y="3743.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::incoming::Incoming&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (70 samples, 0.23%)</title><rect x="79.4475%" y="3765" width="0.2350%" height="15" fill="rgb(238,70,47)" fg:x="23669" fg:w="70"/><text x="79.5375%" y="3775.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (6 samples, 0.02%)</title><rect x="79.6825%" y="3765" width="0.0201%" height="15" fill="rgb(231,160,17)" fg:x="23739" fg:w="6"/><text x="79.7725%" y="3775.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="79.6825%" y="3749" width="0.0201%" height="15" fill="rgb(218,68,53)" fg:x="23739" fg:w="6"/><text x="79.7725%" y="3759.50"></text></g><g><title>http::request::Request&lt;T&gt;::new (16 samples, 0.05%)</title><rect x="79.7127%" y="3765" width="0.0537%" height="15" fill="rgb(236,111,10)" fg:x="23748" fg:w="16"/><text x="79.8027%" y="3775.50"></text></g><g><title>http::request::Parts::new (14 samples, 0.05%)</title><rect x="79.7194%" y="3749" width="0.0470%" height="15" fill="rgb(224,34,41)" fg:x="23750" fg:w="14"/><text x="79.8094%" y="3759.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="79.8939%" y="3749" width="0.0134%" height="15" fill="rgb(241,118,19)" fg:x="23802" fg:w="4"/><text x="79.9839%" y="3759.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="79.9376%" y="3733" width="0.0235%" height="15" fill="rgb(238,129,25)" fg:x="23815" fg:w="7"/><text x="80.0276%" y="3743.50"></text></g><g><title>futures_channel::mpsc::channel (37 samples, 0.12%)</title><rect x="79.9074%" y="3749" width="0.1242%" height="15" fill="rgb(238,22,31)" fg:x="23806" fg:w="37"/><text x="79.9974%" y="3759.50"></text></g><g><title>nanov2_malloc_type (21 samples, 0.07%)</title><rect x="79.9611%" y="3733" width="0.0705%" height="15" fill="rgb(222,174,48)" fg:x="23822" fg:w="21"/><text x="80.0511%" y="3743.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (197 samples, 0.66%)</title><rect x="79.3804%" y="3781" width="0.6613%" height="15" fill="rgb(206,152,40)" fg:x="23649" fg:w="197"/><text x="79.4704%" y="3791.50">h..</text></g><g><title>hyper::body::incoming::Incoming::new_channel (82 samples, 0.28%)</title><rect x="79.7664%" y="3765" width="0.2752%" height="15" fill="rgb(218,99,54)" fg:x="23764" fg:w="82"/><text x="79.8564%" y="3775.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.01%)</title><rect x="80.0316%" y="3749" width="0.0101%" height="15" fill="rgb(220,174,26)" fg:x="23843" fg:w="3"/><text x="80.1216%" y="3759.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (4 samples, 0.01%)</title><rect x="80.0853%" y="3765" width="0.0134%" height="15" fill="rgb(245,116,9)" fg:x="23859" fg:w="4"/><text x="80.1753%" y="3775.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (4 samples, 0.01%)</title><rect x="80.0987%" y="3765" width="0.0134%" height="15" fill="rgb(209,72,35)" fg:x="23863" fg:w="4"/><text x="80.1887%" y="3775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.03%)</title><rect x="80.3639%" y="3733" width="0.0302%" height="15" fill="rgb(226,126,21)" fg:x="23942" fg:w="9"/><text x="80.4539%" y="3743.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="80.3773%" y="3717" width="0.0168%" height="15" fill="rgb(227,192,1)" fg:x="23946" fg:w="5"/><text x="80.4673%" y="3727.50"></text></g><g><title>&lt;http::header::map::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="80.3941%" y="3733" width="0.0235%" height="15" fill="rgb(237,180,29)" fg:x="23951" fg:w="7"/><text x="80.4841%" y="3743.50"></text></g><g><title>_platform_memmove (8 samples, 0.03%)</title><rect x="80.4176%" y="3733" width="0.0269%" height="15" fill="rgb(230,197,35)" fg:x="23958" fg:w="8"/><text x="80.5076%" y="3743.50"></text></g><g><title>bytes::bytes::static_drop (4 samples, 0.01%)</title><rect x="80.4444%" y="3733" width="0.0134%" height="15" fill="rgb(246,193,31)" fg:x="23966" fg:w="4"/><text x="80.5344%" y="3743.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (107 samples, 0.36%)</title><rect x="80.1188%" y="3749" width="0.3592%" height="15" fill="rgb(241,36,4)" fg:x="23869" fg:w="107"/><text x="80.2088%" y="3759.50"></text></g><g><title>hyper::common::date::extend (6 samples, 0.02%)</title><rect x="80.4578%" y="3733" width="0.0201%" height="15" fill="rgb(241,130,17)" fg:x="23970" fg:w="6"/><text x="80.5479%" y="3743.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (131 samples, 0.44%)</title><rect x="80.0416%" y="3781" width="0.4397%" height="15" fill="rgb(206,137,32)" fg:x="23846" fg:w="131"/><text x="80.1316%" y="3791.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (109 samples, 0.37%)</title><rect x="80.1155%" y="3765" width="0.3659%" height="15" fill="rgb(237,228,51)" fg:x="23868" fg:w="109"/><text x="80.2055%" y="3775.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.02%)</title><rect x="80.4881%" y="3749" width="0.0168%" height="15" fill="rgb(243,6,42)" fg:x="23979" fg:w="5"/><text x="80.5781%" y="3759.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.02%)</title><rect x="80.4881%" y="3765" width="0.0201%" height="15" fill="rgb(251,74,28)" fg:x="23979" fg:w="6"/><text x="80.5781%" y="3775.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_buffer (14 samples, 0.05%)</title><rect x="80.4813%" y="3781" width="0.0470%" height="15" fill="rgb(218,20,49)" fg:x="23977" fg:w="14"/><text x="80.5713%" y="3791.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::can_buffer (3 samples, 0.01%)</title><rect x="80.5183%" y="3765" width="0.0101%" height="15" fill="rgb(238,28,14)" fg:x="23988" fg:w="3"/><text x="80.6083%" y="3775.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5 samples, 0.02%)</title><rect x="80.5283%" y="3781" width="0.0168%" height="15" fill="rgb(229,40,46)" fg:x="23991" fg:w="5"/><text x="80.6183%" y="3791.50"></text></g><g><title>&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (17,163 samples, 57.61%)</title><rect x="22.9424%" y="3797" width="57.6094%" height="15" fill="rgb(244,195,20)" fg:x="6835" fg:w="17163"/><text x="23.0324%" y="3807.50">&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (17,177 samples, 57.66%)</title><rect x="22.9323%" y="3813" width="57.6564%" height="15" fill="rgb(253,56,35)" fg:x="6832" fg:w="17177"/><text x="23.0223%" y="3823.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper_util::server::conn::auto::_::_&lt;impl hyper_util::server::conn::auto::UpgradeableConnState&lt;I,S,E&gt;&gt;::project (9 samples, 0.03%)</title><rect x="80.5585%" y="3797" width="0.0302%" height="15" fill="rgb(210,149,44)" fg:x="24000" fg:w="9"/><text x="80.6485%" y="3807.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (5 samples, 0.02%)</title><rect x="80.6122%" y="3797" width="0.0168%" height="15" fill="rgb(240,135,12)" fg:x="24016" fg:w="5"/><text x="80.7023%" y="3807.50"></text></g><g><title>&lt;tokio::task::coop::Coop&lt;F&gt; as core::future::future::Future&gt;::poll (13 samples, 0.04%)</title><rect x="80.6626%" y="3781" width="0.0436%" height="15" fill="rgb(251,24,50)" fg:x="24031" fg:w="13"/><text x="80.7526%" y="3791.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="80.6827%" y="3765" width="0.0235%" height="15" fill="rgb(243,200,47)" fg:x="24037" fg:w="7"/><text x="80.7727%" y="3775.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="80.6894%" y="3749" width="0.0168%" height="15" fill="rgb(224,166,26)" fg:x="24039" fg:w="5"/><text x="80.7795%" y="3759.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.02%)</title><rect x="80.7096%" y="3781" width="0.0201%" height="15" fill="rgb(233,0,47)" fg:x="24045" fg:w="6"/><text x="80.7996%" y="3791.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.02%)</title><rect x="80.7096%" y="3765" width="0.0201%" height="15" fill="rgb(253,80,5)" fg:x="24045" fg:w="6"/><text x="80.7996%" y="3775.50"></text></g><g><title>core::mem::replace (4 samples, 0.01%)</title><rect x="80.7297%" y="3781" width="0.0134%" height="15" fill="rgb(214,133,25)" fg:x="24051" fg:w="4"/><text x="80.8197%" y="3791.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="80.7297%" y="3765" width="0.0134%" height="15" fill="rgb(209,27,14)" fg:x="24051" fg:w="4"/><text x="80.8197%" y="3775.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::future::future::Future&gt;::poll (6 samples, 0.02%)</title><rect x="80.7666%" y="3765" width="0.0201%" height="15" fill="rgb(219,102,51)" fg:x="24062" fg:w="6"/><text x="80.8567%" y="3775.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (79 samples, 0.27%)</title><rect x="80.5887%" y="3813" width="0.2652%" height="15" fill="rgb(237,18,16)" fg:x="24009" fg:w="79"/><text x="80.6788%" y="3823.50"></text></g><g><title>tokio::sync::watch::Receiver&lt;T&gt;::changed::_{{closure}} (67 samples, 0.22%)</title><rect x="80.6290%" y="3797" width="0.2249%" height="15" fill="rgb(241,85,17)" fg:x="24021" fg:w="67"/><text x="80.7190%" y="3807.50"></text></g><g><title>tokio::sync::watch::changed_impl::_{{closure}} (31 samples, 0.10%)</title><rect x="80.7499%" y="3781" width="0.1041%" height="15" fill="rgb(236,90,42)" fg:x="24057" fg:w="31"/><text x="80.8399%" y="3791.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified (20 samples, 0.07%)</title><rect x="80.7868%" y="3765" width="0.0671%" height="15" fill="rgb(249,57,21)" fg:x="24068" fg:w="20"/><text x="80.8768%" y="3775.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::io::Buffered&lt;hyper_util::common::rewind::Rewind&lt;hyper_util::rt::tokio::TokioIo&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;,hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (5 samples, 0.02%)</title><rect x="80.8640%" y="3813" width="0.0168%" height="15" fill="rgb(243,12,36)" fg:x="24091" fg:w="5"/><text x="80.9540%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::io::poll_evented::PollEvented&lt;mio::net::tcp::stream::TcpStream&gt;&gt; (5 samples, 0.02%)</title><rect x="80.8640%" y="3797" width="0.0168%" height="15" fill="rgb(253,128,47)" fg:x="24091" fg:w="5"/><text x="80.9540%" y="3807.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="80.8640%" y="3781" width="0.0168%" height="15" fill="rgb(207,33,20)" fg:x="24091" fg:w="5"/><text x="80.9540%" y="3791.50"></text></g><g><title>close (5 samples, 0.02%)</title><rect x="80.8640%" y="3765" width="0.0168%" height="15" fill="rgb(233,215,35)" fg:x="24091" fg:w="5"/><text x="80.9540%" y="3775.50"></text></g><g><title>jsonrpsee_server::server::process_connection::_{{closure}} (17,283 samples, 58.01%)</title><rect x="22.8753%" y="3829" width="58.0122%" height="15" fill="rgb(249,188,52)" fg:x="6815" fg:w="17283"/><text x="22.9653%" y="3839.50">jsonrpsee_server::server::process_connection::_{{closure}}</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (18,378 samples, 61.69%)</title><rect x="19.2401%" y="3861" width="61.6877%" height="15" fill="rgb(225,12,32)" fg:x="5732" fg:w="18378"/><text x="19.3301%" y="3871.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (17,304 samples, 58.08%)</title><rect x="22.8451%" y="3845" width="58.0827%" height="15" fill="rgb(247,98,14)" fg:x="6806" fg:w="17304"/><text x="22.9351%" y="3855.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (12 samples, 0.04%)</title><rect x="80.8875%" y="3829" width="0.0403%" height="15" fill="rgb(247,219,48)" fg:x="24098" fg:w="12"/><text x="80.9775%" y="3839.50"></text></g><g><title>_tlv_get_addr (7 samples, 0.02%)</title><rect x="80.9043%" y="3813" width="0.0235%" height="15" fill="rgb(253,60,48)" fg:x="24103" fg:w="7"/><text x="80.9943%" y="3823.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (19,415 samples, 65.17%)</title><rect x="15.7828%" y="3877" width="65.1685%" height="15" fill="rgb(245,15,52)" fg:x="4702" fg:w="19415"/><text x="15.8728%" y="3887.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (7 samples, 0.02%)</title><rect x="80.9278%" y="3861" width="0.0235%" height="15" fill="rgb(220,133,28)" fg:x="24110" fg:w="7"/><text x="81.0178%" y="3871.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (23,636 samples, 79.34%)</title><rect x="1.6917%" y="3893" width="79.3367%" height="15" fill="rgb(217,180,4)" fg:x="504" fg:w="23636"/><text x="1.7817%" y="3903.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (23 samples, 0.08%)</title><rect x="80.9513%" y="3877" width="0.0772%" height="15" fill="rgb(251,24,1)" fg:x="24117" fg:w="23"/><text x="81.0413%" y="3887.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23,640 samples, 79.35%)</title><rect x="1.6817%" y="3989" width="79.3502%" height="15" fill="rgb(212,185,49)" fg:x="501" fg:w="23640"/><text x="1.7717%" y="3999.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (23,639 samples, 79.35%)</title><rect x="1.6850%" y="3973" width="79.3468%" height="15" fill="rgb(215,175,22)" fg:x="502" fg:w="23639"/><text x="1.7750%" y="3983.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (23,639 samples, 79.35%)</title><rect x="1.6850%" y="3957" width="79.3468%" height="15" fill="rgb(250,205,14)" fg:x="502" fg:w="23639"/><text x="1.7750%" y="3967.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (23,639 samples, 79.35%)</title><rect x="1.6850%" y="3941" width="79.3468%" height="15" fill="rgb(225,211,22)" fg:x="502" fg:w="23639"/><text x="1.7750%" y="3951.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (23,639 samples, 79.35%)</title><rect x="1.6850%" y="3925" width="79.3468%" height="15" fill="rgb(251,179,42)" fg:x="502" fg:w="23639"/><text x="1.7750%" y="3935.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (23,639 samples, 79.35%)</title><rect x="1.6850%" y="3909" width="79.3468%" height="15" fill="rgb(208,216,51)" fg:x="502" fg:w="23639"/><text x="1.7750%" y="3919.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>&lt;crypto::blake2s::naive::Blake2s256 as crypto::MiniDigest&gt;::finalize (42 samples, 0.14%)</title><rect x="81.0318%" y="3877" width="0.1410%" height="15" fill="rgb(235,36,11)" fg:x="24141" fg:w="42"/><text x="81.1218%" y="3887.50"></text></g><g><title>blake2::Blake2sVarCore::compress (38 samples, 0.13%)</title><rect x="81.0452%" y="3861" width="0.1276%" height="15" fill="rgb(213,189,28)" fg:x="24145" fg:w="38"/><text x="81.1353%" y="3871.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (44 samples, 0.15%)</title><rect x="81.0318%" y="3925" width="0.1477%" height="15" fill="rgb(227,203,42)" fg:x="24141" fg:w="44"/><text x="81.1218%" y="3935.50"></text></g><g><title>&lt;forward_system::run::output::StorageWrite as core::convert::From&lt;(ruint::bit_arr::Bits&lt;160_usize,3_usize&gt;,zk_ee::utils::bytes32::Bytes32,zk_ee::utils::bytes32::Bytes32)&gt;&gt;::from (44 samples, 0.15%)</title><rect x="81.0318%" y="3909" width="0.1477%" height="15" fill="rgb(244,72,36)" fg:x="24141" fg:w="44"/><text x="81.1218%" y="3919.50"></text></g><g><title>zk_ee::common_structs::warm_storage_key::derive_flat_storage_key (44 samples, 0.15%)</title><rect x="81.0318%" y="3893" width="0.1477%" height="15" fill="rgb(213,53,17)" fg:x="24141" fg:w="44"/><text x="81.1218%" y="3903.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.01%)</title><rect x="81.1862%" y="3925" width="0.0134%" height="15" fill="rgb(207,167,3)" fg:x="24187" fg:w="4"/><text x="81.2762%" y="3935.50"></text></g><g><title>free_medium (4 samples, 0.01%)</title><rect x="81.1862%" y="3909" width="0.0134%" height="15" fill="rgb(216,98,30)" fg:x="24187" fg:w="4"/><text x="81.2762%" y="3919.50"></text></g><g><title>mvm_madvise_free_plat (3 samples, 0.01%)</title><rect x="81.1896%" y="3893" width="0.0101%" height="15" fill="rgb(236,123,15)" fg:x="24188" fg:w="3"/><text x="81.2796%" y="3903.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="81.1896%" y="3877" width="0.0101%" height="15" fill="rgb(248,81,50)" fg:x="24188" fg:w="3"/><text x="81.2796%" y="3887.50"></text></g><g><title>madvise (3 samples, 0.01%)</title><rect x="81.1896%" y="3861" width="0.0101%" height="15" fill="rgb(214,120,4)" fg:x="24188" fg:w="3"/><text x="81.2796%" y="3871.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (52 samples, 0.17%)</title><rect x="81.0318%" y="3941" width="0.1745%" height="15" fill="rgb(208,179,34)" fg:x="24141" fg:w="52"/><text x="81.1218%" y="3951.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::get_pos (9 samples, 0.03%)</title><rect x="81.2131%" y="3909" width="0.0302%" height="15" fill="rgb(227,140,7)" fg:x="24195" fg:w="9"/><text x="81.3031%" y="3919.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (13 samples, 0.04%)</title><rect x="81.2064%" y="3925" width="0.0436%" height="15" fill="rgb(214,22,6)" fg:x="24193" fg:w="13"/><text x="81.2964%" y="3935.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (6 samples, 0.02%)</title><rect x="81.2500%" y="3909" width="0.0201%" height="15" fill="rgb(207,137,27)" fg:x="24206" fg:w="6"/><text x="81.3400%" y="3919.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="81.2701%" y="3909" width="0.0168%" height="15" fill="rgb(210,8,46)" fg:x="24212" fg:w="5"/><text x="81.3601%" y="3919.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (12 samples, 0.04%)</title><rect x="81.2903%" y="3909" width="0.0403%" height="15" fill="rgb(240,16,54)" fg:x="24218" fg:w="12"/><text x="81.3803%" y="3919.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::FlatTreeWithAccountsUnderHashesStorageModel&lt;A,R,P,SC,SCC,_&gt; as storage_models::common_structs::traits::storage_model::StorageModel&gt;::finish_tx (26 samples, 0.09%)</title><rect x="81.2500%" y="3925" width="0.0873%" height="15" fill="rgb(211,209,29)" fg:x="24206" fg:w="26"/><text x="81.3400%" y="3935.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="81.3473%" y="3925" width="0.0134%" height="15" fill="rgb(226,228,24)" fg:x="24235" fg:w="4"/><text x="81.4374%" y="3935.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="81.3608%" y="3925" width="0.0201%" height="15" fill="rgb(222,84,9)" fg:x="24239" fg:w="6"/><text x="81.4508%" y="3935.50"></text></g><g><title>_free (3 samples, 0.01%)</title><rect x="81.3876%" y="3909" width="0.0101%" height="15" fill="rgb(234,203,30)" fg:x="24247" fg:w="3"/><text x="81.4776%" y="3919.50"></text></g><g><title>_nanov2_free (3 samples, 0.01%)</title><rect x="81.3977%" y="3909" width="0.0101%" height="15" fill="rgb(238,109,14)" fg:x="24250" fg:w="3"/><text x="81.4877%" y="3919.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.03%)</title><rect x="81.3843%" y="3925" width="0.0336%" height="15" fill="rgb(233,206,34)" fg:x="24246" fg:w="10"/><text x="81.4743%" y="3935.50"></text></g><g><title>alloc::boxed::iter::_&lt;impl core::iter::traits::exact_size::ExactSizeIterator for alloc::boxed::Box&lt;I,A&gt;&gt;::len (3 samples, 0.01%)</title><rect x="81.4178%" y="3925" width="0.0101%" height="15" fill="rgb(220,167,47)" fg:x="24256" fg:w="3"/><text x="81.5078%" y="3935.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (9 samples, 0.03%)</title><rect x="81.4850%" y="3893" width="0.0302%" height="15" fill="rgb(238,105,10)" fg:x="24276" fg:w="9"/><text x="81.5750%" y="3903.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.04%)</title><rect x="81.5152%" y="3893" width="0.0403%" height="15" fill="rgb(213,227,17)" fg:x="24285" fg:w="12"/><text x="81.6052%" y="3903.50"></text></g><g><title>&lt;zk_ee::oracle::usize_rw::ReadIterWrapper&lt;u8,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.07%)</title><rect x="81.5622%" y="3893" width="0.0671%" height="15" fill="rgb(217,132,38)" fg:x="24299" fg:w="20"/><text x="81.6522%" y="3903.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::next_multiple_of (3 samples, 0.01%)</title><rect x="81.6360%" y="3893" width="0.0101%" height="15" fill="rgb(242,146,4)" fg:x="24321" fg:w="3"/><text x="81.7260%" y="3903.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (18 samples, 0.06%)</title><rect x="81.6461%" y="3893" width="0.0604%" height="15" fill="rgb(212,61,9)" fg:x="24324" fg:w="18"/><text x="81.7361%" y="3903.50"></text></g><g><title>alloc::boxed::iter::_&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (85 samples, 0.29%)</title><rect x="81.4279%" y="3925" width="0.2853%" height="15" fill="rgb(247,126,22)" fg:x="24259" fg:w="85"/><text x="81.5179%" y="3935.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (77 samples, 0.26%)</title><rect x="81.4548%" y="3909" width="0.2585%" height="15" fill="rgb(220,196,2)" fg:x="24267" fg:w="77"/><text x="81.5448%" y="3919.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="81.7166%" y="3893" width="0.0101%" height="15" fill="rgb(208,46,4)" fg:x="24345" fg:w="3"/><text x="81.8066%" y="3903.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="81.7266%" y="3877" width="0.0101%" height="15" fill="rgb(252,104,46)" fg:x="24348" fg:w="3"/><text x="81.8166%" y="3887.50"></text></g><g><title>core::fmt::write (9 samples, 0.03%)</title><rect x="81.7266%" y="3893" width="0.0302%" height="15" fill="rgb(237,152,48)" fg:x="24348" fg:w="9"/><text x="81.8166%" y="3903.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (5 samples, 0.02%)</title><rect x="81.7401%" y="3877" width="0.0168%" height="15" fill="rgb(221,59,37)" fg:x="24352" fg:w="5"/><text x="81.8301%" y="3887.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (14 samples, 0.05%)</title><rect x="81.7132%" y="3925" width="0.0470%" height="15" fill="rgb(209,202,51)" fg:x="24344" fg:w="14"/><text x="81.8032%" y="3935.50"></text></g><g><title>alloc::fmt::format::format_inner (14 samples, 0.05%)</title><rect x="81.7132%" y="3909" width="0.0470%" height="15" fill="rgb(228,81,30)" fg:x="24344" fg:w="14"/><text x="81.8032%" y="3919.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="81.7871%" y="3909" width="0.0101%" height="15" fill="rgb(227,42,39)" fg:x="24366" fg:w="3"/><text x="81.8771%" y="3919.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="81.7871%" y="3893" width="0.0101%" height="15" fill="rgb(221,26,2)" fg:x="24366" fg:w="3"/><text x="81.8771%" y="3903.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="81.7871%" y="3877" width="0.0101%" height="15" fill="rgb(254,61,31)" fg:x="24366" fg:w="3"/><text x="81.8771%" y="3887.50"></text></g><g><title>_realloc (3 samples, 0.01%)</title><rect x="81.7871%" y="3861" width="0.0101%" height="15" fill="rgb(222,173,38)" fg:x="24366" fg:w="3"/><text x="81.8771%" y="3871.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (5 samples, 0.02%)</title><rect x="81.8240%" y="3893" width="0.0168%" height="15" fill="rgb(218,50,12)" fg:x="24377" fg:w="5"/><text x="81.9140%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;core::result::Result&lt;forward_system::run::result_keeper::TxProcessingOutputOwned,basic_bootloader::bootloader::errors::InvalidTransaction&gt;&gt;::send::{{closure}}&gt; (3 samples, 0.01%)</title><rect x="81.8307%" y="3877" width="0.0101%" height="15" fill="rgb(223,88,40)" fg:x="24379" fg:w="3"/><text x="81.9207%" y="3887.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::_{{closure}} (5 samples, 0.02%)</title><rect x="81.8408%" y="3893" width="0.0168%" height="15" fill="rgb(237,54,19)" fg:x="24382" fg:w="5"/><text x="81.9308%" y="3903.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (34 samples, 0.11%)</title><rect x="81.8878%" y="3845" width="0.1141%" height="15" fill="rgb(251,129,25)" fg:x="24396" fg:w="34"/><text x="81.9778%" y="3855.50"></text></g><g><title>mio::waker::Waker::wake (34 samples, 0.11%)</title><rect x="81.8878%" y="3829" width="0.1141%" height="15" fill="rgb(238,97,19)" fg:x="24396" fg:w="34"/><text x="81.9778%" y="3839.50"></text></g><g><title>kevent (34 samples, 0.11%)</title><rect x="81.8878%" y="3813" width="0.1141%" height="15" fill="rgb(240,169,18)" fg:x="24396" fg:w="34"/><text x="81.9778%" y="3823.50"></text></g><g><title>_tlv_get_addr (10 samples, 0.03%)</title><rect x="82.0019%" y="3845" width="0.0336%" height="15" fill="rgb(230,187,49)" fg:x="24430" fg:w="10"/><text x="82.0919%" y="3855.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (8 samples, 0.03%)</title><rect x="82.0388%" y="3829" width="0.0269%" height="15" fill="rgb(209,44,26)" fg:x="24441" fg:w="8"/><text x="82.1288%" y="3839.50"></text></g><g><title>_pthread_mutex_firstfit_wake (8 samples, 0.03%)</title><rect x="82.0388%" y="3813" width="0.0269%" height="15" fill="rgb(244,0,6)" fg:x="24441" fg:w="8"/><text x="82.1288%" y="3823.50"></text></g><g><title>__psynch_mutexdrop (8 samples, 0.03%)</title><rect x="82.0388%" y="3797" width="0.0269%" height="15" fill="rgb(248,18,21)" fg:x="24441" fg:w="8"/><text x="82.1288%" y="3807.50"></text></g><g><title>__psynch_cvsignal (137 samples, 0.46%)</title><rect x="82.0690%" y="3813" width="0.4599%" height="15" fill="rgb(245,180,19)" fg:x="24450" fg:w="137"/><text x="82.1590%" y="3823.50"></text></g><g><title>pthread_cond_signal (139 samples, 0.47%)</title><rect x="82.0690%" y="3829" width="0.4666%" height="15" fill="rgb(252,118,36)" fg:x="24450" fg:w="139"/><text x="82.1590%" y="3839.50"></text></g><g><title>mach_absolute_time (11 samples, 0.04%)</title><rect x="82.5423%" y="3781" width="0.0369%" height="15" fill="rgb(210,224,19)" fg:x="24591" fg:w="11"/><text x="82.6323%" y="3791.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (165 samples, 0.55%)</title><rect x="82.0354%" y="3845" width="0.5538%" height="15" fill="rgb(218,30,24)" fg:x="24440" fg:w="165"/><text x="82.1255%" y="3855.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (14 samples, 0.05%)</title><rect x="82.5423%" y="3829" width="0.0470%" height="15" fill="rgb(219,75,50)" fg:x="24591" fg:w="14"/><text x="82.6323%" y="3839.50"></text></g><g><title>clock_gettime (14 samples, 0.05%)</title><rect x="82.5423%" y="3813" width="0.0470%" height="15" fill="rgb(234,72,50)" fg:x="24591" fg:w="14"/><text x="82.6323%" y="3823.50"></text></g><g><title>clock_gettime_nsec_np (14 samples, 0.05%)</title><rect x="82.5423%" y="3797" width="0.0470%" height="15" fill="rgb(219,100,48)" fg:x="24591" fg:w="14"/><text x="82.6323%" y="3807.50"></text></g><g><title>mach_timebase_info (3 samples, 0.01%)</title><rect x="82.5792%" y="3781" width="0.0101%" height="15" fill="rgb(253,5,41)" fg:x="24602" fg:w="3"/><text x="82.6692%" y="3791.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (218 samples, 0.73%)</title><rect x="81.8710%" y="3861" width="0.7317%" height="15" fill="rgb(247,181,11)" fg:x="24391" fg:w="218"/><text x="81.9610%" y="3871.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (4 samples, 0.01%)</title><rect x="82.5893%" y="3845" width="0.0134%" height="15" fill="rgb(222,223,25)" fg:x="24605" fg:w="4"/><text x="82.6793%" y="3855.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (225 samples, 0.76%)</title><rect x="81.8609%" y="3877" width="0.7552%" height="15" fill="rgb(214,198,28)" fg:x="24388" fg:w="225"/><text x="81.9509%" y="3887.50">t..</text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (226 samples, 0.76%)</title><rect x="81.8609%" y="3893" width="0.7586%" height="15" fill="rgb(230,46,43)" fg:x="24388" fg:w="226"/><text x="81.9509%" y="3903.50">t..</text></g><g><title>basic_bootloader::bootloader::BasicBootloader&lt;S&gt;::run_prepared (262 samples, 0.88%)</title><rect x="81.7636%" y="3925" width="0.8794%" height="15" fill="rgb(233,65,53)" fg:x="24359" fg:w="262"/><text x="81.8536%" y="3935.50">ba..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::blocking_send (248 samples, 0.83%)</title><rect x="81.8106%" y="3909" width="0.8324%" height="15" fill="rgb(221,121,27)" fg:x="24373" fg:w="248"/><text x="81.9006%" y="3919.50">t..</text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (5 samples, 0.02%)</title><rect x="82.6262%" y="3893" width="0.0168%" height="15" fill="rgb(247,70,47)" fg:x="24616" fg:w="5"/><text x="82.7162%" y="3903.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (5 samples, 0.02%)</title><rect x="82.6262%" y="3877" width="0.0168%" height="15" fill="rgb(228,85,35)" fg:x="24616" fg:w="5"/><text x="82.7162%" y="3887.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (6 samples, 0.02%)</title><rect x="82.6665%" y="3909" width="0.0201%" height="15" fill="rgb(209,50,18)" fg:x="24628" fg:w="6"/><text x="82.7565%" y="3919.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="82.6766%" y="3893" width="0.0101%" height="15" fill="rgb(250,19,35)" fg:x="24631" fg:w="3"/><text x="82.7666%" y="3903.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="82.6766%" y="3877" width="0.0101%" height="15" fill="rgb(253,107,29)" fg:x="24631" fg:w="3"/><text x="82.7666%" y="3887.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (10 samples, 0.03%)</title><rect x="82.7068%" y="3877" width="0.0336%" height="15" fill="rgb(252,179,29)" fg:x="24640" fg:w="10"/><text x="82.7968%" y="3887.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="82.7470%" y="3877" width="0.0134%" height="15" fill="rgb(238,194,6)" fg:x="24652" fg:w="4"/><text x="82.8371%" y="3887.50"></text></g><g><title>&lt;zk_ee::common_structs::warm_storage_key::WarmStorageKey as core::cmp::Ord&gt;::cmp (14 samples, 0.05%)</title><rect x="82.7605%" y="3877" width="0.0470%" height="15" fill="rgb(238,164,29)" fg:x="24656" fg:w="14"/><text x="82.8505%" y="3887.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (33 samples, 0.11%)</title><rect x="82.8175%" y="3877" width="0.1108%" height="15" fill="rgb(224,25,9)" fg:x="24673" fg:w="33"/><text x="82.9075%" y="3887.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.01%)</title><rect x="82.9283%" y="3861" width="0.0134%" height="15" fill="rgb(244,153,23)" fg:x="24706" fg:w="4"/><text x="83.0183%" y="3871.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (3 samples, 0.01%)</title><rect x="82.9451%" y="3861" width="0.0101%" height="15" fill="rgb(212,203,14)" fg:x="24711" fg:w="3"/><text x="83.0351%" y="3871.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (9 samples, 0.03%)</title><rect x="82.9283%" y="3877" width="0.0302%" height="15" fill="rgb(220,164,20)" fg:x="24706" fg:w="9"/><text x="83.0183%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache_entry::AccountProperties::diff_compression_length (16 samples, 0.05%)</title><rect x="82.9585%" y="3861" width="0.0537%" height="15" fill="rgb(222,203,48)" fg:x="24715" fg:w="16"/><text x="83.0485%" y="3871.50"></text></g><g><title>zk_ee::common_structs::pubdata_compression::ValueDiffCompressionStrategy::optimal_compression_length_u256 (12 samples, 0.04%)</title><rect x="82.9719%" y="3845" width="0.0403%" height="15" fill="rgb(215,159,22)" fg:x="24719" fg:w="12"/><text x="83.0619%" y="3855.50"></text></g><g><title>zk_ee::common_structs::pubdata_compression::ValueDiffCompressionStrategy::compression_length (12 samples, 0.04%)</title><rect x="82.9719%" y="3829" width="0.0403%" height="15" fill="rgb(216,183,47)" fg:x="24719" fg:w="12"/><text x="83.0619%" y="3839.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::calculate_pubdata_used_by_tx (17 samples, 0.06%)</title><rect x="82.9585%" y="3877" width="0.0571%" height="15" fill="rgb(229,195,25)" fg:x="24715" fg:w="17"/><text x="83.0485%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;&amp;zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,alloc::collections::btree::set_val::SetValZST&gt;&gt; (4 samples, 0.01%)</title><rect x="83.0156%" y="3877" width="0.0134%" height="15" fill="rgb(224,132,51)" fg:x="24732" fg:w="4"/><text x="83.1056%" y="3887.50"></text></g><g><title>&lt;basic_system::system_implementation::system::io_subsystem::FullIO&lt;A,R,P,SC,SCC,O,_&gt; as zk_ee::system::io::IOSubsystem&gt;::net_pubdata_used (101 samples, 0.34%)</title><rect x="82.6933%" y="3909" width="0.3390%" height="15" fill="rgb(240,63,7)" fg:x="24636" fg:w="101"/><text x="82.7833%" y="3919.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::FlatTreeWithAccountsUnderHashesStorageModel&lt;A,R,P,SC,SCC,_&gt; as storage_models::common_structs::traits::storage_model::StorageModel&gt;::pubdata_used_by_tx (101 samples, 0.34%)</title><rect x="82.6933%" y="3893" width="0.3390%" height="15" fill="rgb(249,182,41)" fg:x="24636" fg:w="101"/><text x="82.7833%" y="3903.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (6 samples, 0.02%)</title><rect x="83.0424%" y="3909" width="0.0201%" height="15" fill="rgb(243,47,26)" fg:x="24740" fg:w="6"/><text x="83.1324%" y="3919.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="83.0626%" y="3909" width="0.0134%" height="15" fill="rgb(233,48,2)" fg:x="24746" fg:w="4"/><text x="83.1526%" y="3919.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.02%)</title><rect x="83.1096%" y="3877" width="0.0201%" height="15" fill="rgb(244,165,34)" fg:x="24760" fg:w="6"/><text x="83.1996%" y="3887.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.01%)</title><rect x="83.2069%" y="3813" width="0.0134%" height="15" fill="rgb(207,89,7)" fg:x="24789" fg:w="4"/><text x="83.2969%" y="3823.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="83.2069%" y="3797" width="0.0134%" height="15" fill="rgb(244,117,36)" fg:x="24789" fg:w="4"/><text x="83.2969%" y="3807.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.02%)</title><rect x="83.2640%" y="3765" width="0.0201%" height="15" fill="rgb(226,144,34)" fg:x="24806" fg:w="6"/><text x="83.3540%" y="3775.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="83.2673%" y="3749" width="0.0168%" height="15" fill="rgb(213,23,19)" fg:x="24807" fg:w="5"/><text x="83.3573%" y="3759.50"></text></g><g><title>core::fmt::write (17 samples, 0.06%)</title><rect x="83.2539%" y="3781" width="0.0571%" height="15" fill="rgb(217,75,12)" fg:x="24803" fg:w="17"/><text x="83.3439%" y="3791.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (5 samples, 0.02%)</title><rect x="83.2942%" y="3765" width="0.0168%" height="15" fill="rgb(224,159,17)" fg:x="24815" fg:w="5"/><text x="83.3842%" y="3775.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="83.3009%" y="3749" width="0.0101%" height="15" fill="rgb(217,118,1)" fg:x="24817" fg:w="3"/><text x="83.3909%" y="3759.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (28 samples, 0.09%)</title><rect x="83.2203%" y="3813" width="0.0940%" height="15" fill="rgb(232,180,48)" fg:x="24793" fg:w="28"/><text x="83.3103%" y="3823.50"></text></g><g><title>alloc::fmt::format::format_inner (28 samples, 0.09%)</title><rect x="83.2203%" y="3797" width="0.0940%" height="15" fill="rgb(230,27,33)" fg:x="24793" fg:w="28"/><text x="83.3103%" y="3807.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="83.3143%" y="3797" width="0.0101%" height="15" fill="rgb(205,31,21)" fg:x="24821" fg:w="3"/><text x="83.4043%" y="3807.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="83.3647%" y="3749" width="0.0101%" height="15" fill="rgb(253,59,4)" fg:x="24836" fg:w="3"/><text x="83.4547%" y="3759.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.02%)</title><rect x="83.3647%" y="3765" width="0.0168%" height="15" fill="rgb(224,201,9)" fg:x="24836" fg:w="5"/><text x="83.4547%" y="3775.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element::_{{closure}} (9 samples, 0.03%)</title><rect x="83.3546%" y="3781" width="0.0302%" height="15" fill="rgb(229,206,30)" fg:x="24833" fg:w="9"/><text x="83.4446%" y="3791.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="83.3915%" y="3765" width="0.0168%" height="15" fill="rgb(212,67,47)" fg:x="24844" fg:w="5"/><text x="83.4815%" y="3775.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="83.4318%" y="3717" width="0.0201%" height="15" fill="rgb(211,96,50)" fg:x="24856" fg:w="6"/><text x="83.5218%" y="3727.50"></text></g><g><title>szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="83.4385%" y="3701" width="0.0134%" height="15" fill="rgb(252,114,18)" fg:x="24858" fg:w="4"/><text x="83.5285%" y="3711.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="83.4419%" y="3685" width="0.0101%" height="15" fill="rgb(223,58,37)" fg:x="24859" fg:w="3"/><text x="83.5319%" y="3695.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="83.4419%" y="3669" width="0.0101%" height="15" fill="rgb(237,70,4)" fg:x="24859" fg:w="3"/><text x="83.5319%" y="3679.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (9 samples, 0.03%)</title><rect x="83.4284%" y="3733" width="0.0302%" height="15" fill="rgb(244,85,46)" fg:x="24855" fg:w="9"/><text x="83.5184%" y="3743.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (25 samples, 0.08%)</title><rect x="83.4083%" y="3749" width="0.0839%" height="15" fill="rgb(223,39,52)" fg:x="24849" fg:w="25"/><text x="83.4983%" y="3759.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (7 samples, 0.02%)</title><rect x="83.4687%" y="3733" width="0.0235%" height="15" fill="rgb(218,200,14)" fg:x="24867" fg:w="7"/><text x="83.5587%" y="3743.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (26 samples, 0.09%)</title><rect x="83.4083%" y="3765" width="0.0873%" height="15" fill="rgb(208,171,16)" fg:x="24849" fg:w="26"/><text x="83.4983%" y="3775.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (6 samples, 0.02%)</title><rect x="83.5056%" y="3765" width="0.0201%" height="15" fill="rgb(234,200,18)" fg:x="24878" fg:w="6"/><text x="83.5956%" y="3775.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="83.5392%" y="3717" width="0.0101%" height="15" fill="rgb(228,45,11)" fg:x="24888" fg:w="3"/><text x="83.6292%" y="3727.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="83.5325%" y="3733" width="0.0201%" height="15" fill="rgb(237,182,11)" fg:x="24886" fg:w="6"/><text x="83.6225%" y="3743.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="83.5627%" y="3733" width="0.0101%" height="15" fill="rgb(241,175,49)" fg:x="24895" fg:w="3"/><text x="83.6527%" y="3743.50"></text></g><g><title>&lt;zk_ee::kv_markers::ExactSizeChain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="83.6030%" y="3701" width="0.0134%" height="15" fill="rgb(247,38,35)" fg:x="24907" fg:w="4"/><text x="83.6930%" y="3711.50"></text></g><g><title>alloc::boxed::iter::_&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (18 samples, 0.06%)</title><rect x="83.5761%" y="3733" width="0.0604%" height="15" fill="rgb(228,39,49)" fg:x="24899" fg:w="18"/><text x="83.6661%" y="3743.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (18 samples, 0.06%)</title><rect x="83.5761%" y="3717" width="0.0604%" height="15" fill="rgb(226,101,26)" fg:x="24899" fg:w="18"/><text x="83.6661%" y="3727.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.01%)</title><rect x="83.6265%" y="3701" width="0.0101%" height="15" fill="rgb(206,141,19)" fg:x="24914" fg:w="3"/><text x="83.7165%" y="3711.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="83.6466%" y="3685" width="0.0101%" height="15" fill="rgb(211,200,13)" fg:x="24920" fg:w="3"/><text x="83.7366%" y="3695.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.01%)</title><rect x="83.6466%" y="3701" width="0.0134%" height="15" fill="rgb(241,121,6)" fg:x="24920" fg:w="4"/><text x="83.7366%" y="3711.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.01%)</title><rect x="83.6600%" y="3701" width="0.0101%" height="15" fill="rgb(234,221,29)" fg:x="24924" fg:w="3"/><text x="83.7501%" y="3711.50"></text></g><g><title>core::intrinsics::copy (8 samples, 0.03%)</title><rect x="83.6701%" y="3701" width="0.0269%" height="15" fill="rgb(229,136,5)" fg:x="24927" fg:w="8"/><text x="83.7601%" y="3711.50"></text></g><g><title>_platform_memmove (7 samples, 0.02%)</title><rect x="83.6735%" y="3685" width="0.0235%" height="15" fill="rgb(238,36,11)" fg:x="24928" fg:w="7"/><text x="83.7635%" y="3695.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (21 samples, 0.07%)</title><rect x="83.6365%" y="3733" width="0.0705%" height="15" fill="rgb(251,55,41)" fg:x="24917" fg:w="21"/><text x="83.7266%" y="3743.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (21 samples, 0.07%)</title><rect x="83.6365%" y="3717" width="0.0705%" height="15" fill="rgb(242,34,40)" fg:x="24917" fg:w="21"/><text x="83.7266%" y="3727.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (17 samples, 0.06%)</title><rect x="83.7104%" y="3733" width="0.0571%" height="15" fill="rgb(215,42,17)" fg:x="24939" fg:w="17"/><text x="83.8004%" y="3743.50"></text></g><g><title>&lt;zk_ee::common_structs::warm_storage_key::WarmStorageKey as core::cmp::Ord&gt;::cmp (7 samples, 0.02%)</title><rect x="83.7440%" y="3717" width="0.0235%" height="15" fill="rgb(207,44,46)" fg:x="24949" fg:w="7"/><text x="83.8340%" y="3727.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="83.7675%" y="3717" width="0.0168%" height="15" fill="rgb(211,206,28)" fg:x="24956" fg:w="5"/><text x="83.8575%" y="3727.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (31 samples, 0.10%)</title><rect x="83.7910%" y="3701" width="0.1041%" height="15" fill="rgb(237,167,16)" fg:x="24963" fg:w="31"/><text x="83.8810%" y="3711.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31 samples, 0.10%)</title><rect x="88.0438%" y="3685" width="0.1041%" height="15" fill="rgb(233,66,6)" fg:x="26230" fg:w="31"/><text x="88.1338%" y="3695.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.02%)</title><rect x="88.1478%" y="3685" width="0.0235%" height="15" fill="rgb(246,123,29)" fg:x="26261" fg:w="7"/><text x="88.2378%" y="3695.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.04%)</title><rect x="88.1713%" y="3685" width="0.0403%" height="15" fill="rgb(209,62,40)" fg:x="26268" fg:w="12"/><text x="88.2613%" y="3695.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (193 samples, 0.65%)</title><rect x="88.2116%" y="3685" width="0.6478%" height="15" fill="rgb(218,4,25)" fg:x="26280" fg:w="193"/><text x="88.3016%" y="3695.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (399 samples, 1.34%)</title><rect x="88.8594%" y="3685" width="1.3393%" height="15" fill="rgb(253,91,49)" fg:x="26473" fg:w="399"/><text x="88.9494%" y="3695.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (396 samples, 1.33%)</title><rect x="88.8695%" y="3669" width="1.3292%" height="15" fill="rgb(228,155,29)" fg:x="26476" fg:w="396"/><text x="88.9595%" y="3679.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.02%)</title><rect x="90.2558%" y="3669" width="0.0235%" height="15" fill="rgb(243,57,37)" fg:x="26889" fg:w="7"/><text x="90.3458%" y="3679.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (30 samples, 0.10%)</title><rect x="90.2860%" y="3669" width="0.1007%" height="15" fill="rgb(244,167,17)" fg:x="26898" fg:w="30"/><text x="90.3760%" y="3679.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (30 samples, 0.10%)</title><rect x="90.3867%" y="3669" width="0.1007%" height="15" fill="rgb(207,181,38)" fg:x="26928" fg:w="30"/><text x="90.4767%" y="3679.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (71 samples, 0.24%)</title><rect x="90.5109%" y="3653" width="0.2383%" height="15" fill="rgb(211,8,23)" fg:x="26965" fg:w="71"/><text x="90.6009%" y="3663.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (41 samples, 0.14%)</title><rect x="90.7492%" y="3653" width="0.1376%" height="15" fill="rgb(235,11,44)" fg:x="27036" fg:w="41"/><text x="90.8392%" y="3663.50"></text></g><g><title>core::hash::sip::u8to64_le (25 samples, 0.08%)</title><rect x="90.8902%" y="3653" width="0.0839%" height="15" fill="rgb(248,18,52)" fg:x="27078" fg:w="25"/><text x="90.9802%" y="3663.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (146 samples, 0.49%)</title><rect x="90.4874%" y="3669" width="0.4901%" height="15" fill="rgb(208,4,7)" fg:x="26958" fg:w="146"/><text x="90.5774%" y="3679.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (14 samples, 0.05%)</title><rect x="90.9808%" y="3669" width="0.0470%" height="15" fill="rgb(240,17,39)" fg:x="27105" fg:w="14"/><text x="91.0708%" y="3679.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (56 samples, 0.19%)</title><rect x="91.0278%" y="3669" width="0.1880%" height="15" fill="rgb(207,170,3)" fg:x="27119" fg:w="56"/><text x="91.1178%" y="3679.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (567 samples, 1.90%)</title><rect x="90.1987%" y="3685" width="1.9032%" height="15" fill="rgb(236,100,52)" fg:x="26872" fg:w="567"/><text x="90.2887%" y="3695.50">&lt;dashm..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (264 samples, 0.89%)</title><rect x="91.2158%" y="3669" width="0.8861%" height="15" fill="rgb(246,78,51)" fg:x="27175" fg:w="264"/><text x="91.3058%" y="3679.50">da..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.03%)</title><rect x="92.1019%" y="3685" width="0.0302%" height="15" fill="rgb(211,17,15)" fg:x="27439" fg:w="9"/><text x="92.1919%" y="3695.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.08%)</title><rect x="92.1321%" y="3685" width="0.0839%" height="15" fill="rgb(209,59,46)" fg:x="27448" fg:w="25"/><text x="92.2221%" y="3695.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (100 samples, 0.34%)</title><rect x="92.2160%" y="3685" width="0.3357%" height="15" fill="rgb(210,92,25)" fg:x="27473" fg:w="100"/><text x="92.3060%" y="3695.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (90 samples, 0.30%)</title><rect x="92.5584%" y="3685" width="0.3021%" height="15" fill="rgb(238,174,52)" fg:x="27575" fg:w="90"/><text x="92.6484%" y="3695.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (173 samples, 0.58%)</title><rect x="92.8605%" y="3685" width="0.5807%" height="15" fill="rgb(230,73,7)" fg:x="27665" fg:w="173"/><text x="92.9505%" y="3695.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::checked_add (22 samples, 0.07%)</title><rect x="93.4412%" y="3685" width="0.0738%" height="15" fill="rgb(243,124,40)" fg:x="27838" fg:w="22"/><text x="93.5312%" y="3695.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::to_ne_bytes (26 samples, 0.09%)</title><rect x="93.5150%" y="3685" width="0.0873%" height="15" fill="rgb(244,170,11)" fg:x="27860" fg:w="26"/><text x="93.6050%" y="3695.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (31 samples, 0.10%)</title><rect x="93.6023%" y="3685" width="0.1041%" height="15" fill="rgb(207,114,54)" fg:x="27886" fg:w="31"/><text x="93.6923%" y="3695.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (10 samples, 0.03%)</title><rect x="93.7064%" y="3685" width="0.0336%" height="15" fill="rgb(205,42,20)" fg:x="27917" fg:w="10"/><text x="93.7964%" y="3695.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.07%)</title><rect x="93.7399%" y="3685" width="0.0671%" height="15" fill="rgb(230,30,28)" fg:x="27927" fg:w="20"/><text x="93.8299%" y="3695.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (7 samples, 0.02%)</title><rect x="93.8071%" y="3685" width="0.0235%" height="15" fill="rgb(205,73,54)" fg:x="27947" fg:w="7"/><text x="93.8971%" y="3695.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (13 samples, 0.04%)</title><rect x="93.8339%" y="3685" width="0.0436%" height="15" fill="rgb(254,227,23)" fg:x="27955" fg:w="13"/><text x="93.9239%" y="3695.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::len (9 samples, 0.03%)</title><rect x="93.8776%" y="3685" width="0.0302%" height="15" fill="rgb(228,202,34)" fg:x="27968" fg:w="9"/><text x="93.9676%" y="3695.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (6 samples, 0.02%)</title><rect x="93.9078%" y="3685" width="0.0201%" height="15" fill="rgb(222,225,37)" fg:x="27977" fg:w="6"/><text x="93.9978%" y="3695.50"></text></g><g><title>&lt;zksync_os_sequencer::storage::StorageView as forward_system::run::tree::ReadStorage&gt;::read (3,008 samples, 10.10%)</title><rect x="83.8950%" y="3701" width="10.0967%" height="15" fill="rgb(221,14,54)" fg:x="24994" fg:w="3008"/><text x="83.9850%" y="3711.50">&lt;zksync_os_sequencer::storage::StorageView as..</text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (19 samples, 0.06%)</title><rect x="93.9279%" y="3685" width="0.0638%" height="15" fill="rgb(254,102,2)" fg:x="27983" fg:w="19"/><text x="94.0179%" y="3695.50"></text></g><g><title>core::hash::BuildHasher::hash_one (93 samples, 0.31%)</title><rect x="93.9917%" y="3701" width="0.3122%" height="15" fill="rgb(232,104,17)" fg:x="28002" fg:w="93"/><text x="94.0817%" y="3711.50"></text></g><g><title>&lt;crypto::blake2s::naive::Blake2s256 as crypto::MiniDigest&gt;::finalize (29 samples, 0.10%)</title><rect x="94.3173%" y="3685" width="0.0973%" height="15" fill="rgb(250,220,14)" fg:x="28099" fg:w="29"/><text x="94.4073%" y="3695.50"></text></g><g><title>blake2::Blake2sVarCore::compress (28 samples, 0.09%)</title><rect x="94.3206%" y="3669" width="0.0940%" height="15" fill="rgb(241,158,9)" fg:x="28100" fg:w="28"/><text x="94.4106%" y="3679.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::materialize_element::_{{closure}} (3,180 samples, 10.67%)</title><rect x="83.7675%" y="3733" width="10.6740%" height="15" fill="rgb(246,9,43)" fg:x="24956" fg:w="3180"/><text x="83.8575%" y="3743.50">basic_system::system_implementation::flat_storag..</text></g><g><title>forward_system::run::oracle::ForwardRunningOracle&lt;T,PS,TS&gt;::make_iter_dyn (3,174 samples, 10.65%)</title><rect x="83.7876%" y="3717" width="10.6539%" height="15" fill="rgb(206,73,33)" fg:x="24962" fg:w="3174"/><text x="83.8776%" y="3727.50">forward_system::run::oracle::ForwardRunningOracl..</text></g><g><title>zk_ee::common_structs::warm_storage_key::derive_flat_storage_key (41 samples, 0.14%)</title><rect x="94.3038%" y="3701" width="0.1376%" height="15" fill="rgb(222,79,8)" fg:x="28095" fg:w="41"/><text x="94.3938%" y="3711.50"></text></g><g><title>&lt;crypto::blake2s::naive::Blake2s256 as crypto::MiniDigest&gt;::new (8 samples, 0.03%)</title><rect x="94.4146%" y="3685" width="0.0269%" height="15" fill="rgb(234,8,54)" fg:x="28128" fg:w="8"/><text x="94.5046%" y="3695.50"></text></g><g><title>blake2::Blake2sVarCore::new_with_params (4 samples, 0.01%)</title><rect x="94.4280%" y="3669" width="0.0134%" height="15" fill="rgb(209,134,38)" fg:x="28132" fg:w="4"/><text x="94.5180%" y="3679.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::apply_read_impl (3,259 samples, 10.94%)</title><rect x="83.5291%" y="3765" width="10.9392%" height="15" fill="rgb(230,127,29)" fg:x="24885" fg:w="3259"/><text x="83.6191%" y="3775.50">basic_system::system_implementation::flat_storage..</text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::materialize_element (3,259 samples, 10.94%)</title><rect x="83.5291%" y="3749" width="10.9392%" height="15" fill="rgb(242,44,41)" fg:x="24885" fg:w="3259"/><text x="83.6191%" y="3759.50">basic_system::system_implementation::flat_storage..</text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (3,307 samples, 11.10%)</title><rect x="83.3848%" y="3781" width="11.1003%" height="15" fill="rgb(222,56,43)" fg:x="24842" fg:w="3307"/><text x="83.4748%" y="3791.50">basic_system::system_implementation::flat_storage_..</text></g><g><title>basic_bootloader::bootloader::runner::Run&lt;S&gt;::handle_requested_external_call (3,373 samples, 11.32%)</title><rect x="83.1666%" y="3845" width="11.3218%" height="15" fill="rgb(238,39,47)" fg:x="24777" fg:w="3373"/><text x="83.2566%" y="3855.50">basic_bootloader::bootloader::runner::Run&lt;S&gt;::handl..</text></g><g><title>basic_bootloader::bootloader::runner::run_call_preparation (3,367 samples, 11.30%)</title><rect x="83.1868%" y="3829" width="11.3017%" height="15" fill="rgb(226,79,43)" fg:x="24783" fg:w="3367"/><text x="83.2768%" y="3839.50">basic_bootloader::bootloader::runner::run_call_prep..</text></g><g><title>basic_bootloader::bootloader::runner::run_call_preparation::_{{closure}}::_{{closure}} (3,329 samples, 11.17%)</title><rect x="83.3143%" y="3813" width="11.1741%" height="15" fill="rgb(242,105,53)" fg:x="24821" fg:w="3329"/><text x="83.4043%" y="3823.50">basic_bootloader::bootloader::runner::run_call_pre..</text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::read_account_properties (3,324 samples, 11.16%)</title><rect x="83.3311%" y="3797" width="11.1574%" height="15" fill="rgb(251,132,46)" fg:x="24826" fg:w="3324"/><text x="83.4211%" y="3807.50">basic_system::system_implementation::flat_storage_..</text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="94.4985%" y="3813" width="0.0101%" height="15" fill="rgb(231,77,14)" fg:x="28153" fg:w="3"/><text x="94.5885%" y="3823.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="94.5086%" y="3813" width="0.0168%" height="15" fill="rgb(240,135,9)" fg:x="28156" fg:w="5"/><text x="94.5986%" y="3823.50"></text></g><g><title>nanov2_malloc_type (5 samples, 0.02%)</title><rect x="94.5086%" y="3797" width="0.0168%" height="15" fill="rgb(248,109,14)" fg:x="28156" fg:w="5"/><text x="94.5986%" y="3807.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.01%)</title><rect x="94.5254%" y="3797" width="0.0101%" height="15" fill="rgb(227,146,52)" fg:x="28161" fg:w="3"/><text x="94.6154%" y="3807.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="94.5354%" y="3797" width="0.0101%" height="15" fill="rgb(232,54,3)" fg:x="28164" fg:w="3"/><text x="94.6255%" y="3807.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (8 samples, 0.03%)</title><rect x="94.5254%" y="3813" width="0.0269%" height="15" fill="rgb(229,201,43)" fg:x="28161" fg:w="8"/><text x="94.6154%" y="3823.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::transfer_nominal_token_value (20 samples, 0.07%)</title><rect x="94.4885%" y="3845" width="0.0671%" height="15" fill="rgb(252,161,33)" fg:x="28150" fg:w="20"/><text x="94.5785%" y="3855.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::update_nominal_token_value_inner (19 samples, 0.06%)</title><rect x="94.4918%" y="3829" width="0.0638%" height="15" fill="rgb(226,146,40)" fg:x="28151" fg:w="19"/><text x="94.5818%" y="3839.50"></text></g><g><title>basic_bootloader::bootloader::runner::run_till_completion (3,402 samples, 11.42%)</title><rect x="83.1465%" y="3861" width="11.4192%" height="15" fill="rgb(219,47,25)" fg:x="24771" fg:w="3402"/><text x="83.2365%" y="3871.50">basic_bootloader::bootloader::runner::run_till_comp..</text></g><g><title>zk_ee::system::System&lt;S&gt;::finish_global_frame (3 samples, 0.01%)</title><rect x="94.5556%" y="3845" width="0.0101%" height="15" fill="rgb(250,135,13)" fg:x="28170" fg:w="3"/><text x="94.6456%" y="3855.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.01%)</title><rect x="94.5556%" y="3829" width="0.0101%" height="15" fill="rgb(219,229,18)" fg:x="28170" fg:w="3"/><text x="94.6456%" y="3839.50"></text></g><g><title>basic_bootloader::bootloader::run_single_interaction::_&lt;impl basic_bootloader::bootloader::BasicBootloader&lt;S&gt;&gt;::run_single_interaction (3,409 samples, 11.44%)</title><rect x="83.1331%" y="3877" width="11.4427%" height="15" fill="rgb(217,152,27)" fg:x="24767" fg:w="3409"/><text x="83.2231%" y="3887.50">basic_bootloader::bootloader::run_single_interactio..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="94.5657%" y="3861" width="0.0101%" height="15" fill="rgb(225,71,47)" fg:x="28173" fg:w="3"/><text x="94.6557%" y="3871.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (4 samples, 0.01%)</title><rect x="94.5791%" y="3861" width="0.0134%" height="15" fill="rgb(220,139,14)" fg:x="28177" fg:w="4"/><text x="94.6691%" y="3871.50"></text></g><g><title>&lt;basic_bootloader::bootloader::account_models::eoa::EOA as basic_bootloader::bootloader::account_models::AccountModel&lt;S&gt;&gt;::execute (3,427 samples, 11.50%)</title><rect x="83.0928%" y="3893" width="11.5031%" height="15" fill="rgb(247,54,32)" fg:x="24755" fg:w="3427"/><text x="83.1828%" y="3903.50">&lt;basic_bootloader::bootloader::account_models::eoa::..</text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::read_account_properties (6 samples, 0.02%)</title><rect x="94.5757%" y="3877" width="0.0201%" height="15" fill="rgb(252,131,39)" fg:x="28176" fg:w="6"/><text x="94.6657%" y="3887.50"></text></g><g><title>basic_bootloader::bootloader::account_models::abstract_account::AA&lt;S&gt;::execute (3,429 samples, 11.51%)</title><rect x="83.0928%" y="3909" width="11.5098%" height="15" fill="rgb(210,108,39)" fg:x="24755" fg:w="3429"/><text x="83.1828%" y="3919.50">basic_bootloader::bootloader::account_models::abstra..</text></g><g><title>&lt;basic_bootloader::bootloader::account_models::eoa::EOA as basic_bootloader::bootloader::account_models::AccountModel&lt;S&gt;&gt;::validate (5 samples, 0.02%)</title><rect x="94.6026%" y="3893" width="0.0168%" height="15" fill="rgb(205,23,29)" fg:x="28184" fg:w="5"/><text x="94.6926%" y="3903.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::FlatTreeWithAccountsUnderHashesStorageModel&lt;A,R,P,SC,SCC,_&gt; as storage_models::common_structs::traits::storage_model::StorageModel&gt;::increment_nonce (8 samples, 0.03%)</title><rect x="94.6194%" y="3893" width="0.0269%" height="15" fill="rgb(246,139,46)" fg:x="28189" fg:w="8"/><text x="94.7094%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::increment_nonce (6 samples, 0.02%)</title><rect x="94.6261%" y="3877" width="0.0201%" height="15" fill="rgb(250,81,26)" fg:x="28191" fg:w="6"/><text x="94.7161%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (5 samples, 0.02%)</title><rect x="94.6294%" y="3861" width="0.0168%" height="15" fill="rgb(214,104,7)" fg:x="28192" fg:w="5"/><text x="94.7194%" y="3871.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.01%)</title><rect x="94.6361%" y="3845" width="0.0101%" height="15" fill="rgb(233,189,8)" fg:x="28194" fg:w="3"/><text x="94.7262%" y="3855.50"></text></g><g><title>basic_bootloader::bootloader::account_models::abstract_account::AA&lt;S&gt;::validate (17 samples, 0.06%)</title><rect x="94.6026%" y="3909" width="0.0571%" height="15" fill="rgb(228,141,17)" fg:x="28184" fg:w="17"/><text x="94.6926%" y="3919.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::read_account_properties (3 samples, 0.01%)</title><rect x="94.6496%" y="3893" width="0.0101%" height="15" fill="rgb(247,157,1)" fg:x="28198" fg:w="3"/><text x="94.7396%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::read_account_properties (3 samples, 0.01%)</title><rect x="94.6831%" y="3893" width="0.0101%" height="15" fill="rgb(249,225,5)" fg:x="28208" fg:w="3"/><text x="94.7731%" y="3903.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="94.7033%" y="3861" width="0.0134%" height="15" fill="rgb(242,55,13)" fg:x="28214" fg:w="4"/><text x="94.7933%" y="3871.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (5 samples, 0.02%)</title><rect x="94.7201%" y="3861" width="0.0168%" height="15" fill="rgb(230,49,50)" fg:x="28219" fg:w="5"/><text x="94.8101%" y="3871.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::transfer_nominal_token_value (16 samples, 0.05%)</title><rect x="94.6932%" y="3893" width="0.0537%" height="15" fill="rgb(241,111,38)" fg:x="28211" fg:w="16"/><text x="94.7832%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::update_nominal_token_value_inner (14 samples, 0.05%)</title><rect x="94.6999%" y="3877" width="0.0470%" height="15" fill="rgb(252,155,4)" fg:x="28213" fg:w="14"/><text x="94.7899%" y="3887.50"></text></g><g><title>basic_bootloader::bootloader::process_transaction::_&lt;impl basic_bootloader::bootloader::BasicBootloader&lt;S&gt;&gt;::ensure_payment (25 samples, 0.08%)</title><rect x="94.6664%" y="3909" width="0.0839%" height="15" fill="rgb(212,69,32)" fg:x="28203" fg:w="25"/><text x="94.7564%" y="3919.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.01%)</title><rect x="94.7738%" y="3861" width="0.0101%" height="15" fill="rgb(243,107,47)" fg:x="28235" fg:w="3"/><text x="94.8638%" y="3871.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (5 samples, 0.02%)</title><rect x="94.7838%" y="3861" width="0.0168%" height="15" fill="rgb(247,130,12)" fg:x="28238" fg:w="5"/><text x="94.8738%" y="3871.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (4 samples, 0.01%)</title><rect x="94.7872%" y="3845" width="0.0134%" height="15" fill="rgb(233,74,16)" fg:x="28239" fg:w="4"/><text x="94.8772%" y="3855.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::calculate_pubdata_used_by_tx (25 samples, 0.08%)</title><rect x="94.8006%" y="3861" width="0.0839%" height="15" fill="rgb(208,58,18)" fg:x="28243" fg:w="25"/><text x="94.8906%" y="3871.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache_entry::AccountProperties::diff_compression_length (24 samples, 0.08%)</title><rect x="94.8040%" y="3845" width="0.0806%" height="15" fill="rgb(242,225,1)" fg:x="28244" fg:w="24"/><text x="94.8940%" y="3855.50"></text></g><g><title>zk_ee::common_structs::pubdata_compression::ValueDiffCompressionStrategy::optimal_compression_length_u256 (18 samples, 0.06%)</title><rect x="94.8241%" y="3829" width="0.0604%" height="15" fill="rgb(249,39,40)" fg:x="28250" fg:w="18"/><text x="94.9141%" y="3839.50"></text></g><g><title>zk_ee::common_structs::pubdata_compression::ValueDiffCompressionStrategy::compression_length (17 samples, 0.06%)</title><rect x="94.8275%" y="3813" width="0.0571%" height="15" fill="rgb(207,72,44)" fg:x="28251" fg:w="17"/><text x="94.9175%" y="3823.50"></text></g><g><title>_nanov2_free (3 samples, 0.01%)</title><rect x="94.8845%" y="3845" width="0.0101%" height="15" fill="rgb(215,193,12)" fg:x="28268" fg:w="3"/><text x="94.9745%" y="3855.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::FlatTreeWithAccountsUnderHashesStorageModel&lt;A,R,P,SC,SCC,_&gt; as storage_models::common_structs::traits::storage_model::StorageModel&gt;::pubdata_used_by_tx (41 samples, 0.14%)</title><rect x="94.7603%" y="3877" width="0.1376%" height="15" fill="rgb(248,41,39)" fg:x="28231" fg:w="41"/><text x="94.8503%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;&amp;zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,alloc::collections::btree::set_val::SetValZST&gt;&gt; (4 samples, 0.01%)</title><rect x="94.8845%" y="3861" width="0.0134%" height="15" fill="rgb(253,85,4)" fg:x="28268" fg:w="4"/><text x="94.9745%" y="3871.50"></text></g><g><title>&lt;basic_system::system_implementation::system::io_subsystem::FullIO&lt;A,R,P,SC,SCC,O,_&gt; as zk_ee::system::io::IOSubsystem&gt;::net_pubdata_used (42 samples, 0.14%)</title><rect x="94.7603%" y="3893" width="0.1410%" height="15" fill="rgb(243,70,31)" fg:x="28231" fg:w="42"/><text x="94.8503%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::process_transaction::_&lt;impl basic_bootloader::bootloader::BasicBootloader&lt;S&gt;&gt;::transaction_validation (43 samples, 0.14%)</title><rect x="94.7603%" y="3909" width="0.1443%" height="15" fill="rgb(253,195,26)" fg:x="28231" fg:w="43"/><text x="94.8503%" y="3919.50"></text></g><g><title>basic_bootloader::bootloader::rlp::apply_bytes_encoding_to_hash (6 samples, 0.02%)</title><rect x="94.9047%" y="3909" width="0.0201%" height="15" fill="rgb(243,42,11)" fg:x="28274" fg:w="6"/><text x="94.9947%" y="3919.50"></text></g><g><title>basic_bootloader::bootloader::rlp::apply_length_encoding_to_hash (3 samples, 0.01%)</title><rect x="94.9147%" y="3893" width="0.0101%" height="15" fill="rgb(239,66,17)" fg:x="28277" fg:w="3"/><text x="95.0048%" y="3903.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (3 samples, 0.01%)</title><rect x="94.9248%" y="3877" width="0.0101%" height="15" fill="rgb(217,132,21)" fg:x="28280" fg:w="3"/><text x="95.0148%" y="3887.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (6 samples, 0.02%)</title><rect x="94.9248%" y="3893" width="0.0201%" height="15" fill="rgb(252,202,21)" fg:x="28280" fg:w="6"/><text x="95.0148%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::rlp::apply_list_length_encoding_to_hash (13 samples, 0.04%)</title><rect x="94.9248%" y="3909" width="0.0436%" height="15" fill="rgb(233,98,36)" fg:x="28280" fg:w="13"/><text x="95.0148%" y="3919.50"></text></g><g><title>basic_bootloader::bootloader::rlp::apply_length_encoding_to_hash::_{{closure}} (3 samples, 0.01%)</title><rect x="94.9584%" y="3893" width="0.0101%" height="15" fill="rgb(216,153,54)" fg:x="28290" fg:w="3"/><text x="95.0484%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::ParsedValue&lt;T&gt;::read (4 samples, 0.01%)</title><rect x="94.9752%" y="3909" width="0.0134%" height="15" fill="rgb(250,99,7)" fg:x="28295" fg:w="4"/><text x="95.0652%" y="3919.50"></text></g><g><title>basic_bootloader::bootloader::transaction::ZkSyncTransaction::calculate_signed_hash (3 samples, 0.01%)</title><rect x="94.9886%" y="3909" width="0.0101%" height="15" fill="rgb(207,56,50)" fg:x="28299" fg:w="3"/><text x="95.0786%" y="3919.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (14 samples, 0.05%)</title><rect x="95.0188%" y="3893" width="0.0470%" height="15" fill="rgb(244,61,34)" fg:x="28308" fg:w="14"/><text x="95.1088%" y="3903.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (7 samples, 0.02%)</title><rect x="95.0826%" y="3877" width="0.0235%" height="15" fill="rgb(241,50,38)" fg:x="28327" fg:w="7"/><text x="95.1726%" y="3887.50"></text></g><g><title>basic_bootloader::bootloader::rlp::apply_bytes_encoding_to_hash (18 samples, 0.06%)</title><rect x="95.0759%" y="3893" width="0.0604%" height="15" fill="rgb(212,166,30)" fg:x="28325" fg:w="18"/><text x="95.1659%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::rlp::apply_length_encoding_to_hash (9 samples, 0.03%)</title><rect x="95.1061%" y="3877" width="0.0302%" height="15" fill="rgb(249,127,32)" fg:x="28334" fg:w="9"/><text x="95.1961%" y="3887.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.01%)</title><rect x="95.1229%" y="3861" width="0.0134%" height="15" fill="rgb(209,103,0)" fg:x="28339" fg:w="4"/><text x="95.2129%" y="3871.50"></text></g><g><title>basic_bootloader::bootloader::rlp::estimate_number_encoding_len (29 samples, 0.10%)</title><rect x="95.1430%" y="3893" width="0.0973%" height="15" fill="rgb(238,209,51)" fg:x="28345" fg:w="29"/><text x="95.2330%" y="3903.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.02%)</title><rect x="95.2437%" y="3893" width="0.0168%" height="15" fill="rgb(237,56,23)" fg:x="28375" fg:w="5"/><text x="95.3337%" y="3903.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="95.2437%" y="3877" width="0.0168%" height="15" fill="rgb(215,153,46)" fg:x="28375" fg:w="5"/><text x="95.3337%" y="3887.50"></text></g><g><title>basic_bootloader::bootloader::transaction::ZkSyncTransaction::legacy_tx_calculate_hash (78 samples, 0.26%)</title><rect x="95.0054%" y="3909" width="0.2618%" height="15" fill="rgb(224,49,31)" fg:x="28304" fg:w="78"/><text x="95.0954%" y="3919.50"></text></g><g><title>&lt;basic_bootloader::bootloader::transaction::access_list_parser::AccessListIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="95.2672%" y="3893" width="0.0101%" height="15" fill="rgb(250,18,42)" fg:x="28382" fg:w="3"/><text x="95.3572%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::ZkSyncTransaction::parse_and_warm_up_access_list (5 samples, 0.02%)</title><rect x="95.2672%" y="3909" width="0.0168%" height="15" fill="rgb(215,176,39)" fg:x="28382" fg:w="5"/><text x="95.3572%" y="3919.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element::_{{closure}} (3 samples, 0.01%)</title><rect x="95.2873%" y="3893" width="0.0101%" height="15" fill="rgb(223,77,29)" fg:x="28388" fg:w="3"/><text x="95.3773%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::read_account_properties (16 samples, 0.05%)</title><rect x="95.2840%" y="3909" width="0.0537%" height="15" fill="rgb(234,94,52)" fg:x="28387" fg:w="16"/><text x="95.3740%" y="3919.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (12 samples, 0.04%)</title><rect x="95.2974%" y="3893" width="0.0403%" height="15" fill="rgb(220,154,50)" fg:x="28391" fg:w="12"/><text x="95.3874%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::apply_read_impl (8 samples, 0.03%)</title><rect x="95.3108%" y="3877" width="0.0269%" height="15" fill="rgb(212,11,10)" fg:x="28395" fg:w="8"/><text x="95.4008%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::materialize_element (8 samples, 0.03%)</title><rect x="95.3108%" y="3861" width="0.0269%" height="15" fill="rgb(205,166,19)" fg:x="28395" fg:w="8"/><text x="95.4008%" y="3871.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::materialize_element::_{{closure}} (8 samples, 0.03%)</title><rect x="95.3108%" y="3845" width="0.0269%" height="15" fill="rgb(244,198,16)" fg:x="28395" fg:w="8"/><text x="95.4008%" y="3855.50"></text></g><g><title>forward_system::run::oracle::ForwardRunningOracle&lt;T,PS,TS&gt;::make_iter_dyn (8 samples, 0.03%)</title><rect x="95.3108%" y="3829" width="0.0269%" height="15" fill="rgb(219,69,12)" fg:x="28395" fg:w="8"/><text x="95.4008%" y="3839.50"></text></g><g><title>&lt;zksync_os_sequencer::storage::StorageView as forward_system::run::tree::ReadStorage&gt;::read (8 samples, 0.03%)</title><rect x="95.3108%" y="3813" width="0.0269%" height="15" fill="rgb(245,30,7)" fg:x="28395" fg:w="8"/><text x="95.4008%" y="3823.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="95.3477%" y="3877" width="0.0101%" height="15" fill="rgb(218,221,48)" fg:x="28406" fg:w="3"/><text x="95.4378%" y="3887.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="95.3645%" y="3861" width="0.0168%" height="15" fill="rgb(216,66,15)" fg:x="28411" fg:w="5"/><text x="95.4545%" y="3871.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (9 samples, 0.03%)</title><rect x="95.3578%" y="3877" width="0.0302%" height="15" fill="rgb(226,122,50)" fg:x="28409" fg:w="9"/><text x="95.4478%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::transfer_nominal_token_value (16 samples, 0.05%)</title><rect x="95.3377%" y="3909" width="0.0537%" height="15" fill="rgb(239,156,16)" fg:x="28403" fg:w="16"/><text x="95.4277%" y="3919.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::update_nominal_token_value_inner (15 samples, 0.05%)</title><rect x="95.3410%" y="3893" width="0.0503%" height="15" fill="rgb(224,27,38)" fg:x="28404" fg:w="15"/><text x="95.4310%" y="3903.50"></text></g><g><title>DYLD-STUB$$bzero (3 samples, 0.01%)</title><rect x="95.3914%" y="3893" width="0.0101%" height="15" fill="rgb(224,39,27)" fg:x="28419" fg:w="3"/><text x="95.4814%" y="3903.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::pad_with_zeros::_{{closure}} (4 samples, 0.01%)</title><rect x="95.3914%" y="3909" width="0.0134%" height="15" fill="rgb(215,92,29)" fg:x="28419" fg:w="4"/><text x="95.4814%" y="3919.50"></text></g><g><title>core::slice::index::get_noubcheck (3 samples, 0.01%)</title><rect x="95.4216%" y="3909" width="0.0101%" height="15" fill="rgb(207,159,16)" fg:x="28428" fg:w="3"/><text x="95.5116%" y="3919.50"></text></g><g><title>ruint::add::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_sub (5 samples, 0.02%)</title><rect x="95.4317%" y="3909" width="0.0168%" height="15" fill="rgb(238,163,47)" fg:x="28431" fg:w="5"/><text x="95.5217%" y="3919.50"></text></g><g><title>ruint::add::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (4 samples, 0.01%)</title><rect x="95.4350%" y="3893" width="0.0134%" height="15" fill="rgb(219,91,49)" fg:x="28432" fg:w="4"/><text x="95.5250%" y="3903.50"></text></g><g><title>ruint::div::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_ceil (4 samples, 0.01%)</title><rect x="95.4552%" y="3909" width="0.0134%" height="15" fill="rgb(227,167,31)" fg:x="28438" fg:w="4"/><text x="95.5452%" y="3919.50"></text></g><g><title>ruint::algorithms::mul::addmul (6 samples, 0.02%)</title><rect x="95.4753%" y="3893" width="0.0201%" height="15" fill="rgb(234,80,54)" fg:x="28444" fg:w="6"/><text x="95.5653%" y="3903.50"></text></g><g><title>ruint::mul::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (9 samples, 0.03%)</title><rect x="95.4686%" y="3909" width="0.0302%" height="15" fill="rgb(212,114,2)" fg:x="28442" fg:w="9"/><text x="95.5586%" y="3919.50"></text></g><g><title>keccak::keccak_p (68 samples, 0.23%)</title><rect x="95.4988%" y="3893" width="0.2282%" height="15" fill="rgb(234,50,24)" fg:x="28451" fg:w="68"/><text x="95.5888%" y="3903.50"></text></g><g><title>sha3::state::Sha3State::absorb_block (69 samples, 0.23%)</title><rect x="95.4988%" y="3909" width="0.2316%" height="15" fill="rgb(221,68,8)" fg:x="28451" fg:w="69"/><text x="95.5888%" y="3919.50"></text></g><g><title>basic_bootloader::bootloader::process_transaction::_&lt;impl basic_bootloader::bootloader::BasicBootloader&lt;S&gt;&gt;::process_l2_transaction (3,901 samples, 13.09%)</title><rect x="82.6497%" y="3925" width="13.0941%" height="15" fill="rgb(254,180,31)" fg:x="24623" fg:w="3901"/><text x="82.7397%" y="3935.50">basic_bootloader::bootloader::process_transaction::_&lt;impl b..</text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="95.8009%" y="3893" width="0.0134%" height="15" fill="rgb(247,130,50)" fg:x="28541" fg:w="4"/><text x="95.8909%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::Parser::parse_bytes (6 samples, 0.02%)</title><rect x="95.8210%" y="3893" width="0.0201%" height="15" fill="rgb(211,109,4)" fg:x="28547" fg:w="6"/><text x="95.9110%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::Parser::parse_bytes (4 samples, 0.01%)</title><rect x="95.8445%" y="3893" width="0.0134%" height="15" fill="rgb(238,50,21)" fg:x="28554" fg:w="4"/><text x="95.9345%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::u256be_ptr::U256BEPtr::validate_u32 (4 samples, 0.01%)</title><rect x="95.8445%" y="3877" width="0.0134%" height="15" fill="rgb(225,57,45)" fg:x="28554" fg:w="4"/><text x="95.9345%" y="3887.50"></text></g><g><title>basic_bootloader::bootloader::transaction::Parser::parse_u32 (12 samples, 0.04%)</title><rect x="95.8613%" y="3893" width="0.0403%" height="15" fill="rgb(209,196,50)" fg:x="28559" fg:w="12"/><text x="95.9513%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::u256be_ptr::U256BEPtr::validate_u32 (9 samples, 0.03%)</title><rect x="95.8714%" y="3877" width="0.0302%" height="15" fill="rgb(242,140,13)" fg:x="28562" fg:w="9"/><text x="95.9614%" y="3887.50"></text></g><g><title>basic_bootloader::bootloader::transaction::ZkSyncTransaction::validate_structure (5 samples, 0.02%)</title><rect x="95.9016%" y="3893" width="0.0168%" height="15" fill="rgb(217,111,7)" fg:x="28571" fg:w="5"/><text x="95.9916%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::u256be_ptr::U256BEPtr::validate_address (5 samples, 0.02%)</title><rect x="95.9184%" y="3893" width="0.0168%" height="15" fill="rgb(253,193,51)" fg:x="28576" fg:w="5"/><text x="96.0084%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::transaction::u256be_ptr::U256BEPtr::validate_u64 (3 samples, 0.01%)</title><rect x="95.9352%" y="3893" width="0.0101%" height="15" fill="rgb(252,70,29)" fg:x="28581" fg:w="3"/><text x="96.0252%" y="3903.50"></text></g><g><title>basic_bootloader::bootloader::process_transaction::_&lt;impl basic_bootloader::bootloader::BasicBootloader&lt;S&gt;&gt;::process_transaction (65 samples, 0.22%)</title><rect x="95.7438%" y="3925" width="0.2182%" height="15" fill="rgb(232,127,12)" fg:x="28524" fg:w="65"/><text x="95.8338%" y="3935.50"></text></g><g><title>basic_bootloader::bootloader::transaction::ZkSyncTransaction::try_from_slice (64 samples, 0.21%)</title><rect x="95.7472%" y="3909" width="0.2148%" height="15" fill="rgb(211,180,21)" fg:x="28525" fg:w="64"/><text x="95.8372%" y="3919.50"></text></g><g><title>basic_bootloader::bootloader::transaction::u256be_ptr::U256BEPtr::validate_u8 (5 samples, 0.02%)</title><rect x="95.9452%" y="3893" width="0.0168%" height="15" fill="rgb(229,72,13)" fg:x="28584" fg:w="5"/><text x="96.0352%" y="3903.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="95.9687%" y="3909" width="0.0101%" height="15" fill="rgb(240,211,49)" fg:x="28591" fg:w="3"/><text x="96.0587%" y="3919.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.01%)</title><rect x="96.0056%" y="3877" width="0.0134%" height="15" fill="rgb(219,149,40)" fg:x="28602" fg:w="4"/><text x="96.0956%" y="3887.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.01%)</title><rect x="96.0090%" y="3861" width="0.0101%" height="15" fill="rgb(210,127,46)" fg:x="28603" fg:w="3"/><text x="96.0990%" y="3871.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.03%)</title><rect x="96.0023%" y="3893" width="0.0269%" height="15" fill="rgb(220,106,7)" fg:x="28601" fg:w="8"/><text x="96.0923%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element::_{{closure}} (15 samples, 0.05%)</title><rect x="95.9821%" y="3909" width="0.0503%" height="15" fill="rgb(249,31,22)" fg:x="28595" fg:w="15"/><text x="96.0722%" y="3919.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.01%)</title><rect x="96.0325%" y="3893" width="0.0101%" height="15" fill="rgb(253,1,49)" fg:x="28610" fg:w="3"/><text x="96.1225%" y="3903.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="96.0459%" y="3893" width="0.0101%" height="15" fill="rgb(227,144,33)" fg:x="28614" fg:w="3"/><text x="96.1359%" y="3903.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.01%)</title><rect x="96.0593%" y="3893" width="0.0134%" height="15" fill="rgb(249,163,44)" fg:x="28618" fg:w="4"/><text x="96.1494%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::materialize_element (17 samples, 0.06%)</title><rect x="96.0325%" y="3909" width="0.0571%" height="15" fill="rgb(234,15,39)" fg:x="28610" fg:w="17"/><text x="96.1225%" y="3919.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::apply_read_impl (4 samples, 0.01%)</title><rect x="96.0761%" y="3893" width="0.0134%" height="15" fill="rgb(207,66,16)" fg:x="28623" fg:w="4"/><text x="96.1661%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::materialize_element (4 samples, 0.01%)</title><rect x="96.0761%" y="3877" width="0.0134%" height="15" fill="rgb(233,112,24)" fg:x="28623" fg:w="4"/><text x="96.1661%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::read_account_properties (39 samples, 0.13%)</title><rect x="95.9654%" y="3925" width="0.1309%" height="15" fill="rgb(230,90,22)" fg:x="28590" fg:w="39"/><text x="96.0554%" y="3935.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::get_pos (4 samples, 0.01%)</title><rect x="96.0963%" y="3925" width="0.0134%" height="15" fill="rgb(229,61,13)" fg:x="28629" fg:w="4"/><text x="96.1863%" y="3935.50"></text></g><g><title>_os_unfair_lock_unlock_slow (3 samples, 0.01%)</title><rect x="96.1433%" y="3893" width="0.0101%" height="15" fill="rgb(225,57,24)" fg:x="28643" fg:w="3"/><text x="96.2333%" y="3903.50"></text></g><g><title>__ulock_wake (3 samples, 0.01%)</title><rect x="96.1433%" y="3877" width="0.0101%" height="15" fill="rgb(208,169,48)" fg:x="28643" fg:w="3"/><text x="96.2333%" y="3887.50"></text></g><g><title>_platform_memset (4 samples, 0.01%)</title><rect x="96.1835%" y="3877" width="0.0134%" height="15" fill="rgb(244,218,51)" fg:x="28655" fg:w="4"/><text x="96.2735%" y="3887.50"></text></g><g><title>free_tiny (21 samples, 0.07%)</title><rect x="96.1567%" y="3893" width="0.0705%" height="15" fill="rgb(214,148,10)" fg:x="28647" fg:w="21"/><text x="96.2467%" y="3903.50"></text></g><g><title>tiny_free_no_lock (9 samples, 0.03%)</title><rect x="96.1970%" y="3877" width="0.0302%" height="15" fill="rgb(225,174,27)" fg:x="28659" fg:w="9"/><text x="96.2870%" y="3887.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="96.2171%" y="3861" width="0.0101%" height="15" fill="rgb(230,96,26)" fg:x="28665" fg:w="3"/><text x="96.3071%" y="3871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::exact_size::ExactSizeIterator+Item = usize&gt;&gt; (36 samples, 0.12%)</title><rect x="96.1164%" y="3925" width="0.1208%" height="15" fill="rgb(232,10,30)" fg:x="28635" fg:w="36"/><text x="96.2064%" y="3935.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::system_io_oracle::dyn_usize_iterator::DynUsizeIterator&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (34 samples, 0.11%)</title><rect x="96.1231%" y="3909" width="0.1141%" height="15" fill="rgb(222,8,50)" fg:x="28637" fg:w="34"/><text x="96.2131%" y="3919.50"></text></g><g><title>ruint::algorithms::mul::addmul (6 samples, 0.02%)</title><rect x="96.2507%" y="3909" width="0.0201%" height="15" fill="rgb(213,81,27)" fg:x="28675" fg:w="6"/><text x="96.3407%" y="3919.50"></text></g><g><title>ruint::mul::_&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_mul (8 samples, 0.03%)</title><rect x="96.2507%" y="3925" width="0.0269%" height="15" fill="rgb(245,50,10)" fg:x="28675" fg:w="8"/><text x="96.3407%" y="3935.50"></text></g><g><title>keccak::keccak_p (25 samples, 0.08%)</title><rect x="96.2809%" y="3909" width="0.0839%" height="15" fill="rgb(216,100,18)" fg:x="28684" fg:w="25"/><text x="96.3709%" y="3919.50"></text></g><g><title>sha3::state::Sha3State::absorb_block (27 samples, 0.09%)</title><rect x="96.2775%" y="3925" width="0.0906%" height="15" fill="rgb(236,147,54)" fg:x="28683" fg:w="27"/><text x="96.3675%" y="3935.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache_entry::AccountProperties::diff_compression (6 samples, 0.02%)</title><rect x="96.3816%" y="3877" width="0.0201%" height="15" fill="rgb(205,143,26)" fg:x="28714" fg:w="6"/><text x="96.4716%" y="3887.50"></text></g><g><title>zk_ee::common_structs::pubdata_compression::ValueDiffCompressionStrategy::optimal_compression_u256 (6 samples, 0.02%)</title><rect x="96.3816%" y="3861" width="0.0201%" height="15" fill="rgb(236,26,9)" fg:x="28714" fg:w="6"/><text x="96.4716%" y="3871.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::FlatTreeWithAccountsUnderHashesStorageModel&lt;A,R,P,SC,SCC,_&gt; as storage_models::common_structs::traits::storage_model::StorageModel&gt;::finish::_{{closure}} (13 samples, 0.04%)</title><rect x="96.3782%" y="3893" width="0.0436%" height="15" fill="rgb(221,165,53)" fg:x="28713" fg:w="13"/><text x="96.4682%" y="3903.50"></text></g><g><title>zk_ee::common_structs::warm_storage_key::derive_flat_storage_key (5 samples, 0.02%)</title><rect x="96.4051%" y="3877" width="0.0168%" height="15" fill="rgb(214,110,17)" fg:x="28721" fg:w="5"/><text x="96.4951%" y="3887.50"></text></g><g><title>&lt;crypto::blake2s::naive::Blake2s256 as crypto::MiniDigest&gt;::finalize (5 samples, 0.02%)</title><rect x="96.4051%" y="3861" width="0.0168%" height="15" fill="rgb(237,197,12)" fg:x="28721" fg:w="5"/><text x="96.4951%" y="3871.50"></text></g><g><title>blake2::Blake2sVarCore::compress (5 samples, 0.02%)</title><rect x="96.4051%" y="3845" width="0.0168%" height="15" fill="rgb(205,84,17)" fg:x="28721" fg:w="5"/><text x="96.4951%" y="3855.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="96.4521%" y="3877" width="0.0101%" height="15" fill="rgb(237,18,45)" fg:x="28735" fg:w="3"/><text x="96.5421%" y="3887.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="96.4521%" y="3861" width="0.0101%" height="15" fill="rgb(221,87,14)" fg:x="28735" fg:w="3"/><text x="96.5421%" y="3871.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="96.4655%" y="3877" width="0.0201%" height="15" fill="rgb(238,186,15)" fg:x="28739" fg:w="6"/><text x="96.5555%" y="3887.50"></text></g><g><title>nanov2_madvise_block (3 samples, 0.01%)</title><rect x="96.4756%" y="3861" width="0.0101%" height="15" fill="rgb(208,115,11)" fg:x="28742" fg:w="3"/><text x="96.5656%" y="3871.50"></text></g><g><title>nanov2_madvise_block_locked (3 samples, 0.01%)</title><rect x="96.4756%" y="3845" width="0.0101%" height="15" fill="rgb(254,175,0)" fg:x="28742" fg:w="3"/><text x="96.5656%" y="3855.50"></text></g><g><title>mvm_madvise_free_plat (3 samples, 0.01%)</title><rect x="96.4756%" y="3829" width="0.0101%" height="15" fill="rgb(227,24,42)" fg:x="28742" fg:w="3"/><text x="96.5656%" y="3839.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="96.4756%" y="3813" width="0.0101%" height="15" fill="rgb(223,211,37)" fg:x="28742" fg:w="3"/><text x="96.5656%" y="3823.50"></text></g><g><title>madvise (3 samples, 0.01%)</title><rect x="96.4756%" y="3797" width="0.0101%" height="15" fill="rgb(235,49,27)" fg:x="28742" fg:w="3"/><text x="96.5656%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;alloc::alloc::Global,zk_ee::reference_implementations::BaseResources&lt;zk_ee::reference_implementations::IncreasingNative&gt;,basic_system::system_implementation::system::EthereumLikeStorageAccessCostModel,zk_ee::memory::stack_trait::VecStackCtor,zk_ee::memory::stack_trait::VecStackCtor&gt;&gt; (11 samples, 0.04%)</title><rect x="96.4521%" y="3893" width="0.0369%" height="15" fill="rgb(254,97,51)" fg:x="28735" fg:w="11"/><text x="96.5421%" y="3903.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="96.4890%" y="3877" width="0.0201%" height="15" fill="rgb(249,51,40)" fg:x="28746" fg:w="6"/><text x="96.5790%" y="3887.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="96.4890%" y="3861" width="0.0201%" height="15" fill="rgb(210,128,45)" fg:x="28746" fg:w="6"/><text x="96.5790%" y="3871.50"></text></g><g><title>free_tiny (5 samples, 0.02%)</title><rect x="96.4923%" y="3845" width="0.0168%" height="15" fill="rgb(224,137,50)" fg:x="28747" fg:w="5"/><text x="96.5824%" y="3855.50"></text></g><g><title>tiny_free_no_lock (4 samples, 0.01%)</title><rect x="96.4957%" y="3829" width="0.0134%" height="15" fill="rgb(242,15,9)" fg:x="28748" fg:w="4"/><text x="96.5857%" y="3839.50"></text></g><g><title>_free (4 samples, 0.01%)</title><rect x="96.5158%" y="3861" width="0.0134%" height="15" fill="rgb(233,187,41)" fg:x="28754" fg:w="4"/><text x="96.6059%" y="3871.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.06%)</title><rect x="96.5091%" y="3877" width="0.0604%" height="15" fill="rgb(227,2,29)" fg:x="28752" fg:w="18"/><text x="96.5991%" y="3887.50"></text></g><g><title>_nanov2_free (12 samples, 0.04%)</title><rect x="96.5293%" y="3861" width="0.0403%" height="15" fill="rgb(222,70,3)" fg:x="28758" fg:w="12"/><text x="96.6193%" y="3871.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="96.5595%" y="3845" width="0.0101%" height="15" fill="rgb(213,11,42)" fg:x="28767" fg:w="3"/><text x="96.6495%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;basic_system::system_implementation::flat_storage_model::storage_cache::NewStorageWithAccountPropertiesUnderHash&lt;alloc::alloc::Global,zk_ee::memory::stack_trait::VecStackCtor,zk_ee::memory::stack_trait::VecStackCtor,zk_ee::reference_implementations::BaseResources&lt;zk_ee::reference_implementations::IncreasingNative&gt;,basic_system::system_implementation::system::EthereumLikeStorageAccessCostModel&gt;&gt; (27 samples, 0.09%)</title><rect x="96.4890%" y="3893" width="0.0906%" height="15" fill="rgb(225,150,9)" fg:x="28746" fg:w="27"/><text x="96.5790%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3877" width="0.0101%" height="15" fill="rgb(230,162,45)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3861" width="0.0101%" height="15" fill="rgb(222,14,52)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3871.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3845" width="0.0101%" height="15" fill="rgb(254,198,14)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3829" width="0.0101%" height="15" fill="rgb(220,217,30)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3813" width="0.0101%" height="15" fill="rgb(215,146,41)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3797" width="0.0101%" height="15" fill="rgb(217,27,36)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3781" width="0.0101%" height="15" fill="rgb(219,218,39)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3765" width="0.0101%" height="15" fill="rgb(219,4,42)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3775.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3749" width="0.0101%" height="15" fill="rgb(249,119,36)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3759.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3733" width="0.0101%" height="15" fill="rgb(209,23,33)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3717" width="0.0101%" height="15" fill="rgb(211,10,0)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3701" width="0.0101%" height="15" fill="rgb(208,99,37)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3711.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3685" width="0.0101%" height="15" fill="rgb(213,132,31)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3695.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3669" width="0.0101%" height="15" fill="rgb(243,129,40)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3653" width="0.0101%" height="15" fill="rgb(210,66,33)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3663.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3637" width="0.0101%" height="15" fill="rgb(209,189,4)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3647.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3621" width="0.0101%" height="15" fill="rgb(214,107,37)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3631.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3605" width="0.0101%" height="15" fill="rgb(245,88,54)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3615.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3589" width="0.0101%" height="15" fill="rgb(205,146,20)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3599.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3573" width="0.0101%" height="15" fill="rgb(220,161,25)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3583.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3557" width="0.0101%" height="15" fill="rgb(215,152,15)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3567.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3541" width="0.0101%" height="15" fill="rgb(233,192,44)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3551.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3525" width="0.0101%" height="15" fill="rgb(240,170,46)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3535.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3509" width="0.0101%" height="15" fill="rgb(207,104,33)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3519.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3493" width="0.0101%" height="15" fill="rgb(219,21,39)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3503.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3477" width="0.0101%" height="15" fill="rgb(214,133,29)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3487.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3461" width="0.0101%" height="15" fill="rgb(226,93,6)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3471.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3445" width="0.0101%" height="15" fill="rgb(252,222,34)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3455.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3429" width="0.0101%" height="15" fill="rgb(252,92,48)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3439.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3413" width="0.0101%" height="15" fill="rgb(245,223,24)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3423.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3397" width="0.0101%" height="15" fill="rgb(205,176,3)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3407.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3381" width="0.0101%" height="15" fill="rgb(235,151,15)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3391.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3365" width="0.0101%" height="15" fill="rgb(237,209,11)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3375.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3349" width="0.0101%" height="15" fill="rgb(243,227,24)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3359.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3333" width="0.0101%" height="15" fill="rgb(239,193,16)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3343.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3317" width="0.0101%" height="15" fill="rgb(231,27,9)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3327.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3301" width="0.0101%" height="15" fill="rgb(219,169,10)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3311.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3285" width="0.0101%" height="15" fill="rgb(244,229,43)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3295.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3269" width="0.0101%" height="15" fill="rgb(254,38,20)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3279.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3253" width="0.0101%" height="15" fill="rgb(250,47,30)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3263.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3237" width="0.0101%" height="15" fill="rgb(224,124,36)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3247.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3221" width="0.0101%" height="15" fill="rgb(246,68,51)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3231.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3205" width="0.0101%" height="15" fill="rgb(253,43,49)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3215.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3189" width="0.0101%" height="15" fill="rgb(219,54,36)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3199.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3173" width="0.0101%" height="15" fill="rgb(227,133,34)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3183.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3157" width="0.0101%" height="15" fill="rgb(247,227,15)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3167.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3141" width="0.0101%" height="15" fill="rgb(229,96,14)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3151.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3125" width="0.0101%" height="15" fill="rgb(220,79,17)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3135.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3109" width="0.0101%" height="15" fill="rgb(205,131,53)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3119.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3093" width="0.0101%" height="15" fill="rgb(209,50,29)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3103.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3077" width="0.0101%" height="15" fill="rgb(245,86,46)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3087.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3061" width="0.0101%" height="15" fill="rgb(235,66,46)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3071.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3045" width="0.0101%" height="15" fill="rgb(232,148,31)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3055.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3029" width="0.0101%" height="15" fill="rgb(217,149,8)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3039.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="3013" width="0.0101%" height="15" fill="rgb(209,183,11)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3023.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2997" width="0.0101%" height="15" fill="rgb(208,55,20)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="3007.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2981" width="0.0101%" height="15" fill="rgb(218,39,14)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2991.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2965" width="0.0101%" height="15" fill="rgb(216,169,33)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2975.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2949" width="0.0101%" height="15" fill="rgb(233,80,24)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2959.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2933" width="0.0101%" height="15" fill="rgb(213,179,31)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2943.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2917" width="0.0101%" height="15" fill="rgb(209,19,5)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2927.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2901" width="0.0101%" height="15" fill="rgb(219,18,35)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2911.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2885" width="0.0101%" height="15" fill="rgb(209,169,16)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2895.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2869" width="0.0101%" height="15" fill="rgb(245,90,51)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2879.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2853" width="0.0101%" height="15" fill="rgb(220,99,45)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2863.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2837" width="0.0101%" height="15" fill="rgb(249,89,25)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2847.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2821" width="0.0101%" height="15" fill="rgb(239,193,0)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2831.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2805" width="0.0101%" height="15" fill="rgb(231,126,1)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2815.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2789" width="0.0101%" height="15" fill="rgb(243,166,3)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2799.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2773" width="0.0101%" height="15" fill="rgb(223,22,34)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2783.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2757" width="0.0101%" height="15" fill="rgb(251,52,51)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2767.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2741" width="0.0101%" height="15" fill="rgb(221,165,28)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2751.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2725" width="0.0101%" height="15" fill="rgb(218,121,47)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2735.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2709" width="0.0101%" height="15" fill="rgb(209,120,9)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2719.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2693" width="0.0101%" height="15" fill="rgb(236,68,12)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2703.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2677" width="0.0101%" height="15" fill="rgb(225,194,26)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2687.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2661" width="0.0101%" height="15" fill="rgb(231,84,39)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2671.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2645" width="0.0101%" height="15" fill="rgb(210,11,45)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2655.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2629" width="0.0101%" height="15" fill="rgb(224,54,52)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2639.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2613" width="0.0101%" height="15" fill="rgb(238,102,14)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2623.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2597" width="0.0101%" height="15" fill="rgb(243,160,52)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2607.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2581" width="0.0101%" height="15" fill="rgb(216,114,19)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2591.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2565" width="0.0101%" height="15" fill="rgb(244,166,37)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2575.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2549" width="0.0101%" height="15" fill="rgb(246,29,44)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2559.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2533" width="0.0101%" height="15" fill="rgb(215,56,53)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2543.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2517" width="0.0101%" height="15" fill="rgb(217,60,2)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2527.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2501" width="0.0101%" height="15" fill="rgb(207,26,24)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2511.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2485" width="0.0101%" height="15" fill="rgb(252,210,15)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2495.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2469" width="0.0101%" height="15" fill="rgb(253,209,26)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2479.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2453" width="0.0101%" height="15" fill="rgb(238,170,14)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2463.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2437" width="0.0101%" height="15" fill="rgb(216,178,15)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2447.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2421" width="0.0101%" height="15" fill="rgb(250,197,2)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2431.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2405" width="0.0101%" height="15" fill="rgb(212,70,42)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2415.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2389" width="0.0101%" height="15" fill="rgb(227,213,9)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2399.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2373" width="0.0101%" height="15" fill="rgb(245,99,25)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2383.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5695%" y="2357" width="0.0101%" height="15" fill="rgb(250,82,29)" fg:x="28770" fg:w="3"/><text x="96.6596%" y="2367.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::FlatTreeWithAccountsUnderHashesStorageModel&lt;A,R,P,SC,SCC,_&gt; as storage_models::common_structs::traits::storage_model::StorageModel&gt;::finish (66 samples, 0.22%)</title><rect x="96.3682%" y="3909" width="0.2215%" height="15" fill="rgb(241,226,54)" fg:x="28710" fg:w="66"/><text x="96.4582%" y="3919.50"></text></g><g><title>&lt;basic_system::system_implementation::flat_storage_model::storage_cache::NewStorageWithAccountPropertiesUnderHash&lt;A,SC,SCC,R,P&gt; as storage_models::common_structs::traits::storage_cache_model::StorageCacheModel&gt;::write_special_account_property (12 samples, 0.04%)</title><rect x="96.5964%" y="3893" width="0.0403%" height="15" fill="rgb(221,99,41)" fg:x="28778" fg:w="12"/><text x="96.6864%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::apply_write_impl (11 samples, 0.04%)</title><rect x="96.5998%" y="3877" width="0.0369%" height="15" fill="rgb(213,90,21)" fg:x="28779" fg:w="11"/><text x="96.6898%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::materialize_element (6 samples, 0.02%)</title><rect x="96.6165%" y="3861" width="0.0201%" height="15" fill="rgb(205,208,24)" fg:x="28784" fg:w="6"/><text x="96.7066%" y="3871.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.02%)</title><rect x="96.6199%" y="3845" width="0.0168%" height="15" fill="rgb(246,31,12)" fg:x="28785" fg:w="5"/><text x="96.7099%" y="3855.50"></text></g><g><title>&lt;zk_ee::common_structs::warm_storage_key::WarmStorageKey as core::cmp::Ord&gt;::cmp (4 samples, 0.01%)</title><rect x="96.6233%" y="3829" width="0.0134%" height="15" fill="rgb(213,154,6)" fg:x="28786" fg:w="4"/><text x="96.7133%" y="3839.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache_entry::AccountProperties::compute_hash (4 samples, 0.01%)</title><rect x="96.6400%" y="3877" width="0.0134%" height="15" fill="rgb(222,163,29)" fg:x="28791" fg:w="4"/><text x="96.7300%" y="3887.50"></text></g><g><title>&lt;crypto::blake2s::naive::Blake2s256 as crypto::MiniDigest&gt;::finalize (4 samples, 0.01%)</title><rect x="96.6400%" y="3861" width="0.0134%" height="15" fill="rgb(227,201,8)" fg:x="28791" fg:w="4"/><text x="96.7300%" y="3871.50"></text></g><g><title>blake2::Blake2sVarCore::compress (4 samples, 0.01%)</title><rect x="96.6400%" y="3845" width="0.0134%" height="15" fill="rgb(233,9,32)" fg:x="28791" fg:w="4"/><text x="96.7300%" y="3855.50"></text></g><g><title>blake2::Blake2sVarCore::compress (12 samples, 0.04%)</title><rect x="96.6635%" y="3877" width="0.0403%" height="15" fill="rgb(217,54,24)" fg:x="28798" fg:w="12"/><text x="96.7535%" y="3887.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::persist_changes::_{{closure}} (22 samples, 0.07%)</title><rect x="96.6367%" y="3893" width="0.0738%" height="15" fill="rgb(235,192,0)" fg:x="28790" fg:w="22"/><text x="96.7267%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::persist_changes (36 samples, 0.12%)</title><rect x="96.5964%" y="3909" width="0.1208%" height="15" fill="rgb(235,45,9)" fg:x="28778" fg:w="36"/><text x="96.6864%" y="3919.50"></text></g><g><title>zk_ee::system::System&lt;S&gt;::finish (105 samples, 0.35%)</title><rect x="96.3682%" y="3925" width="0.3524%" height="15" fill="rgb(246,42,40)" fg:x="28710" fg:w="105"/><text x="96.4582%" y="3935.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.01%)</title><rect x="96.7307%" y="3845" width="0.0134%" height="15" fill="rgb(248,111,24)" fg:x="28818" fg:w="4"/><text x="96.8207%" y="3855.50"></text></g><g><title>&lt;zk_ee::kv_markers::ExactSizeChainN&lt;A,B,_&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (4 samples, 0.01%)</title><rect x="96.7542%" y="3845" width="0.0134%" height="15" fill="rgb(249,65,22)" fg:x="28825" fg:w="4"/><text x="96.8442%" y="3855.50"></text></g><g><title>zk_ee::system::System&lt;S&gt;::init_from_oracle (20 samples, 0.07%)</title><rect x="96.7240%" y="3925" width="0.0671%" height="15" fill="rgb(238,111,51)" fg:x="28816" fg:w="20"/><text x="96.8140%" y="3935.50"></text></g><g><title>zk_ee::system_io_oracle::IOOracle::get_block_level_metadata (19 samples, 0.06%)</title><rect x="96.7273%" y="3909" width="0.0638%" height="15" fill="rgb(250,118,22)" fg:x="28817" fg:w="19"/><text x="96.8173%" y="3919.50"></text></g><g><title>core::array::from_fn (18 samples, 0.06%)</title><rect x="96.7307%" y="3893" width="0.0604%" height="15" fill="rgb(234,84,26)" fg:x="28818" fg:w="18"/><text x="96.8207%" y="3903.50"></text></g><g><title>alloc::boxed::iter::_&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (18 samples, 0.06%)</title><rect x="96.7307%" y="3877" width="0.0604%" height="15" fill="rgb(243,172,12)" fg:x="28818" fg:w="18"/><text x="96.8207%" y="3887.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (18 samples, 0.06%)</title><rect x="96.7307%" y="3861" width="0.0604%" height="15" fill="rgb(236,150,49)" fg:x="28818" fg:w="18"/><text x="96.8207%" y="3871.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (7 samples, 0.02%)</title><rect x="96.7676%" y="3845" width="0.0235%" height="15" fill="rgb(225,197,26)" fg:x="28829" fg:w="7"/><text x="96.8576%" y="3855.50"></text></g><g><title>&lt;basic_bootloader::bootloader::TxDataBufferWriter as zk_ee::oracle::usize_rw::UsizeWriteable&gt;::write_usize (13 samples, 0.04%)</title><rect x="96.8213%" y="3909" width="0.0436%" height="15" fill="rgb(214,17,42)" fg:x="28845" fg:w="13"/><text x="96.9113%" y="3919.50"></text></g><g><title>&lt;forward_system::run::oracle::ForwardRunningOracle&lt;T,PS,TS&gt; as zk_ee::system_io_oracle::IOOracle&gt;::create_oracle_access_iterator (3 samples, 0.01%)</title><rect x="96.8649%" y="3909" width="0.0101%" height="15" fill="rgb(224,165,40)" fg:x="28858" fg:w="3"/><text x="96.9549%" y="3919.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="96.8851%" y="3893" width="0.0168%" height="15" fill="rgb(246,100,4)" fg:x="28864" fg:w="5"/><text x="96.9751%" y="3903.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.07%)</title><rect x="96.8750%" y="3909" width="0.0705%" height="15" fill="rgb(222,103,0)" fg:x="28861" fg:w="21"/><text x="96.9650%" y="3919.50"></text></g><g><title>nanov2_malloc_type (12 samples, 0.04%)</title><rect x="96.9052%" y="3893" width="0.0403%" height="15" fill="rgb(227,189,26)" fg:x="28870" fg:w="12"/><text x="96.9952%" y="3903.50"></text></g><g><title>_nanov2_free (6 samples, 0.02%)</title><rect x="96.9589%" y="3893" width="0.0201%" height="15" fill="rgb(214,202,17)" fg:x="28886" fg:w="6"/><text x="97.0489%" y="3903.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.04%)</title><rect x="96.9455%" y="3909" width="0.0369%" height="15" fill="rgb(229,111,3)" fg:x="28882" fg:w="11"/><text x="97.0355%" y="3919.50"></text></g><g><title>alloc::boxed::iter::_&lt;impl core::iter::traits::exact_size::ExactSizeIterator for alloc::boxed::Box&lt;I,A&gt;&gt;::len (3 samples, 0.01%)</title><rect x="96.9858%" y="3909" width="0.0101%" height="15" fill="rgb(229,172,15)" fg:x="28894" fg:w="3"/><text x="97.0758%" y="3919.50"></text></g><g><title>&lt;core::iter::sources::once::Once&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (3 samples, 0.01%)</title><rect x="96.9858%" y="3893" width="0.0101%" height="15" fill="rgb(230,224,35)" fg:x="28894" fg:w="3"/><text x="97.0758%" y="3903.50"></text></g><g><title>alloc::boxed::iter::_&lt;impl core::iter::traits::iterator::Iterator for alloc::boxed::Box&lt;I,A&gt;&gt;::next (5 samples, 0.02%)</title><rect x="96.9958%" y="3909" width="0.0168%" height="15" fill="rgb(251,141,6)" fg:x="28897" fg:w="5"/><text x="97.0858%" y="3919.50"></text></g><g><title>core::mem::replace (4 samples, 0.01%)</title><rect x="96.9992%" y="3893" width="0.0134%" height="15" fill="rgb(225,208,6)" fg:x="28898" fg:w="4"/><text x="97.0892%" y="3903.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (11 samples, 0.04%)</title><rect x="97.0126%" y="3893" width="0.0369%" height="15" fill="rgb(246,181,16)" fg:x="28902" fg:w="11"/><text x="97.1026%" y="3903.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="97.0563%" y="3893" width="0.0336%" height="15" fill="rgb(227,129,36)" fg:x="28915" fg:w="10"/><text x="97.1463%" y="3903.50"></text></g><g><title>&lt;zk_ee::utils::stack_linked_list::StackLinkedListIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="97.0898%" y="3893" width="0.0168%" height="15" fill="rgb(248,117,24)" fg:x="28925" fg:w="5"/><text x="97.1798%" y="3903.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (26 samples, 0.09%)</title><rect x="97.1066%" y="3893" width="0.0873%" height="15" fill="rgb(214,185,35)" fg:x="28930" fg:w="26"/><text x="97.1966%" y="3903.50"></text></g><g><title>_nanov2_free (3 samples, 0.01%)</title><rect x="97.1972%" y="3877" width="0.0101%" height="15" fill="rgb(236,150,34)" fg:x="28957" fg:w="3"/><text x="97.2872%" y="3887.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="97.2073%" y="3861" width="0.0101%" height="15" fill="rgb(243,228,27)" fg:x="28960" fg:w="3"/><text x="97.2973%" y="3871.50"></text></g><g><title>_nanov2_free (5 samples, 0.02%)</title><rect x="97.2409%" y="3829" width="0.0168%" height="15" fill="rgb(245,77,44)" fg:x="28970" fg:w="5"/><text x="97.3309%" y="3839.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="97.2476%" y="3813" width="0.0101%" height="15" fill="rgb(235,214,42)" fg:x="28972" fg:w="3"/><text x="97.3376%" y="3823.50"></text></g><g><title>_nanov2_free (4 samples, 0.01%)</title><rect x="97.2644%" y="3797" width="0.0134%" height="15" fill="rgb(221,74,3)" fg:x="28977" fg:w="4"/><text x="97.3544%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt;&gt; (25 samples, 0.08%)</title><rect x="97.1972%" y="3893" width="0.0839%" height="15" fill="rgb(206,121,29)" fg:x="28957" fg:w="25"/><text x="97.2872%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (22 samples, 0.07%)</title><rect x="97.2073%" y="3877" width="0.0738%" height="15" fill="rgb(249,131,53)" fg:x="28960" fg:w="22"/><text x="97.2973%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (16 samples, 0.05%)</title><rect x="97.2274%" y="3861" width="0.0537%" height="15" fill="rgb(236,170,29)" fg:x="28966" fg:w="16"/><text x="97.3175%" y="3871.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (13 samples, 0.04%)</title><rect x="97.2375%" y="3845" width="0.0436%" height="15" fill="rgb(247,96,15)" fg:x="28969" fg:w="13"/><text x="97.3275%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (7 samples, 0.02%)</title><rect x="97.2577%" y="3829" width="0.0235%" height="15" fill="rgb(211,210,7)" fg:x="28975" fg:w="7"/><text x="97.3477%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::utils::stack_linked_list::Node&lt;(zk_ee::utils::integer_utils::BitsOrd&lt;160_usize,3_usize&gt;,zk_ee::common_structs::history_map::CacheSnapshotId),alloc::alloc::Global&gt;&gt; (5 samples, 0.02%)</title><rect x="97.2644%" y="3813" width="0.0168%" height="15" fill="rgb(240,88,50)" fg:x="28977" fg:w="5"/><text x="97.3544%" y="3823.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::account_cache::NewModelAccountCache&lt;A,R,P,SC,SCC&gt;::begin_new_tx (84 samples, 0.28%)</title><rect x="97.0126%" y="3909" width="0.2820%" height="15" fill="rgb(209,229,26)" fg:x="28902" fg:w="84"/><text x="97.1026%" y="3919.50"></text></g><g><title>zk_ee::common_structs::history_map::HistoryMap&lt;K,V,A&gt;::commit (3 samples, 0.01%)</title><rect x="97.2845%" y="3893" width="0.0101%" height="15" fill="rgb(210,68,23)" fg:x="28983" fg:w="3"/><text x="97.3745%" y="3903.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="97.2979%" y="3893" width="0.0134%" height="15" fill="rgb(229,180,13)" fg:x="28987" fg:w="4"/><text x="97.3879%" y="3903.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (15 samples, 0.05%)</title><rect x="97.3114%" y="3893" width="0.0503%" height="15" fill="rgb(236,53,44)" fg:x="28991" fg:w="15"/><text x="97.4014%" y="3903.50"></text></g><g><title>&lt;zk_ee::common_structs::warm_storage_key::WarmStorageKey as core::cmp::Ord&gt;::cmp (10 samples, 0.03%)</title><rect x="97.3281%" y="3877" width="0.0336%" height="15" fill="rgb(244,214,29)" fg:x="28996" fg:w="10"/><text x="97.4182%" y="3887.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.01%)</title><rect x="97.3684%" y="3893" width="0.0101%" height="15" fill="rgb(220,75,29)" fg:x="29008" fg:w="3"/><text x="97.4584%" y="3903.50"></text></g><g><title>basic_system::system_implementation::flat_storage_model::storage_cache::GenericPubdataAwarePlainStorage&lt;K,V,A,SC,SCC,R,P&gt;::begin_new_tx (26 samples, 0.09%)</title><rect x="97.2946%" y="3909" width="0.0873%" height="15" fill="rgb(214,183,37)" fg:x="28986" fg:w="26"/><text x="97.3846%" y="3919.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (9 samples, 0.03%)</title><rect x="97.3818%" y="3909" width="0.0302%" height="15" fill="rgb(239,117,29)" fg:x="29012" fg:w="9"/><text x="97.4719%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::iter::traits::exact_size::ExactSizeIterator+Item = usize&gt;&gt; (5 samples, 0.02%)</title><rect x="97.4121%" y="3909" width="0.0168%" height="15" fill="rgb(237,171,35)" fg:x="29021" fg:w="5"/><text x="97.5021%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::system_io_oracle::dyn_usize_iterator::DynUsizeIterator&lt;u32&gt;&gt; (3 samples, 0.01%)</title><rect x="97.4188%" y="3893" width="0.0101%" height="15" fill="rgb(229,178,53)" fg:x="29023" fg:w="3"/><text x="97.5088%" y="3903.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="97.4389%" y="3877" width="0.0101%" height="15" fill="rgb(210,102,19)" fg:x="29029" fg:w="3"/><text x="97.5289%" y="3887.50"></text></g><g><title>storage_models::common_structs::generic_transient_storage::GenericTransientStorage&lt;K,V,SC,SCC,A&gt;::begin_new_tx (5 samples, 0.02%)</title><rect x="97.4356%" y="3909" width="0.0168%" height="15" fill="rgb(235,127,22)" fg:x="29028" fg:w="5"/><text x="97.5256%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;zk_ee::common_structs::history_map::HistoryMap&lt;zk_ee::common_structs::warm_storage_key::WarmStorageKey,zk_ee::utils::bytes32::Bytes32,alloc::alloc::Global&gt;&gt; (5 samples, 0.02%)</title><rect x="97.4356%" y="3893" width="0.0168%" height="15" fill="rgb(244,31,31)" fg:x="29028" fg:w="5"/><text x="97.5256%" y="3903.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.01%)</title><rect x="97.4590%" y="3893" width="0.0101%" height="15" fill="rgb(231,43,21)" fg:x="29035" fg:w="3"/><text x="97.5491%" y="3903.50"></text></g><g><title>__psynch_cvwait (429 samples, 1.44%)</title><rect x="97.5900%" y="3829" width="1.4400%" height="15" fill="rgb(217,131,35)" fg:x="29074" fg:w="429"/><text x="97.6800%" y="3839.50">__ps..</text></g><g><title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.03%)</title><rect x="99.0299%" y="3829" width="0.0336%" height="15" fill="rgb(221,149,4)" fg:x="29503" fg:w="10"/><text x="99.1199%" y="3839.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (10 samples, 0.03%)</title><rect x="99.0299%" y="3813" width="0.0336%" height="15" fill="rgb(232,170,28)" fg:x="29503" fg:w="10"/><text x="99.1199%" y="3823.50"></text></g><g><title>__psynch_mutexwait (10 samples, 0.03%)</title><rect x="99.0299%" y="3797" width="0.0336%" height="15" fill="rgb(238,56,10)" fg:x="29503" fg:w="10"/><text x="99.1199%" y="3807.50"></text></g><g><title>_pthread_cond_wait (445 samples, 1.49%)</title><rect x="97.5732%" y="3845" width="1.4937%" height="15" fill="rgb(235,196,14)" fg:x="29069" fg:w="445"/><text x="97.6632%" y="3855.50">_pthr..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (473 samples, 1.59%)</title><rect x="97.4825%" y="3893" width="1.5877%" height="15" fill="rgb(216,45,48)" fg:x="29042" fg:w="473"/><text x="97.5726%" y="3903.50">tokio..</text></g><g><title>tokio::runtime::park::Inner::park (470 samples, 1.58%)</title><rect x="97.4926%" y="3877" width="1.5776%" height="15" fill="rgb(238,213,17)" fg:x="29045" fg:w="470"/><text x="97.5826%" y="3887.50">tokio..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (456 samples, 1.53%)</title><rect x="97.5396%" y="3861" width="1.5306%" height="15" fill="rgb(212,13,2)" fg:x="29059" fg:w="456"/><text x="97.6296%" y="3871.50">parki..</text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="99.0769%" y="3877" width="0.0134%" height="15" fill="rgb(240,114,20)" fg:x="29517" fg:w="4"/><text x="99.1669%" y="3887.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.01%)</title><rect x="99.1071%" y="3861" width="0.0134%" height="15" fill="rgb(228,41,40)" fg:x="29526" fg:w="4"/><text x="99.1972%" y="3871.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (6 samples, 0.02%)</title><rect x="99.1407%" y="3861" width="0.0201%" height="15" fill="rgb(244,132,35)" fg:x="29536" fg:w="6"/><text x="99.2307%" y="3871.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::_{{closure}} (21 samples, 0.07%)</title><rect x="99.1004%" y="3877" width="0.0705%" height="15" fill="rgb(253,189,4)" fg:x="29524" fg:w="21"/><text x="99.1904%" y="3887.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.01%)</title><rect x="99.1608%" y="3861" width="0.0101%" height="15" fill="rgb(224,37,19)" fg:x="29542" fg:w="3"/><text x="99.2509%" y="3871.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::blocking_recv (513 samples, 1.72%)</title><rect x="97.4523%" y="3909" width="1.7219%" height="15" fill="rgb(235,223,18)" fg:x="29033" fg:w="513"/><text x="97.5423%" y="3919.50">tokio:..</text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::_{{closure}} (31 samples, 0.10%)</title><rect x="99.0702%" y="3893" width="0.1041%" height="15" fill="rgb(235,163,25)" fg:x="29515" fg:w="31"/><text x="99.1602%" y="3903.50"></text></g><g><title>zk_ee::common_structs::new_preimages_publication_storage::NewPreimagesPublicationStorage&lt;A&gt;::begin_new_tx (3 samples, 0.01%)</title><rect x="99.1810%" y="3909" width="0.0101%" height="15" fill="rgb(217,145,28)" fg:x="29548" fg:w="3"/><text x="99.2710%" y="3919.50"></text></g><g><title>zk_ee::common_structs::history_map::HistoryMap&lt;K,V,A&gt;::commit (3 samples, 0.01%)</title><rect x="99.1810%" y="3893" width="0.0101%" height="15" fill="rgb(223,223,32)" fg:x="29548" fg:w="3"/><text x="99.2710%" y="3903.50"></text></g><g><title>forward_system::system::bootloader::run_forward (5,359 samples, 17.99%)</title><rect x="81.2064%" y="3941" width="17.9881%" height="15" fill="rgb(227,189,39)" fg:x="24193" fg:w="5359"/><text x="81.2964%" y="3951.50">forward_system::system::bootloader::run_forward</text></g><g><title>zk_ee::system::System&lt;S&gt;::try_begin_next_tx (716 samples, 2.40%)</title><rect x="96.7911%" y="3925" width="2.4033%" height="15" fill="rgb(248,10,22)" fg:x="28836" fg:w="716"/><text x="96.8811%" y="3935.50">zk_ee::sy..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (5,412 samples, 18.17%)</title><rect x="81.0318%" y="3973" width="18.1660%" height="15" fill="rgb(248,46,39)" fg:x="24141" fg:w="5412"/><text x="81.1218%" y="3983.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::..</text></g><g><title>zksync_os_sequencer::execution::vm_wrapper::VmWrapper::new::_{{closure}} (5,412 samples, 18.17%)</title><rect x="81.0318%" y="3957" width="18.1660%" height="15" fill="rgb(248,113,48)" fg:x="24141" fg:w="5412"/><text x="81.1218%" y="3967.50">zksync_os_sequencer::execution::vm_wrapper::VmWrapper::new::_{{closure}}</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (29,055 samples, 97.53%)</title><rect x="1.6749%" y="4053" width="97.5262%" height="15" fill="rgb(245,16,25)" fg:x="499" fg:w="29055"/><text x="1.7650%" y="4063.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (29,055 samples, 97.53%)</title><rect x="1.6749%" y="4037" width="97.5262%" height="15" fill="rgb(249,152,16)" fg:x="499" fg:w="29055"/><text x="1.7650%" y="4047.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (29,055 samples, 97.53%)</title><rect x="1.6749%" y="4021" width="97.5262%" height="15" fill="rgb(250,16,1)" fg:x="499" fg:w="29055"/><text x="1.7650%" y="4031.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (29,055 samples, 97.53%)</title><rect x="1.6749%" y="4005" width="97.5262%" height="15" fill="rgb(249,138,3)" fg:x="499" fg:w="29055"/><text x="1.7650%" y="4015.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (5,413 samples, 18.17%)</title><rect x="81.0318%" y="3989" width="18.1693%" height="15" fill="rgb(227,71,41)" fg:x="24141" fg:w="5413"/><text x="81.1218%" y="3999.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>free_medium (4 samples, 0.01%)</title><rect x="99.2078%" y="3845" width="0.0134%" height="15" fill="rgb(209,184,23)" fg:x="29556" fg:w="4"/><text x="99.2979%" y="3855.50"></text></g><g><title>mvm_madvise_free_plat (4 samples, 0.01%)</title><rect x="99.2078%" y="3829" width="0.0134%" height="15" fill="rgb(223,215,31)" fg:x="29556" fg:w="4"/><text x="99.2979%" y="3839.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="99.2078%" y="3813" width="0.0134%" height="15" fill="rgb(210,146,28)" fg:x="29556" fg:w="4"/><text x="99.2979%" y="3823.50"></text></g><g><title>madvise (4 samples, 0.01%)</title><rect x="99.2078%" y="3797" width="0.0134%" height="15" fill="rgb(209,183,41)" fg:x="29556" fg:w="4"/><text x="99.2979%" y="3807.50"></text></g><g><title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (176 samples, 0.59%)</title><rect x="99.2213%" y="3781" width="0.5908%" height="15" fill="rgb(209,224,45)" fg:x="29560" fg:w="176"/><text x="99.3113%" y="3791.50"></text></g><g><title>snappy::Compress(snappy::Source*, snappy::Sink*) (176 samples, 0.59%)</title><rect x="99.2213%" y="3765" width="0.5908%" height="15" fill="rgb(224,209,51)" fg:x="29560" fg:w="176"/><text x="99.3113%" y="3775.50"></text></g><g><title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (173 samples, 0.58%)</title><rect x="99.2313%" y="3749" width="0.5807%" height="15" fill="rgb(223,17,39)" fg:x="29563" fg:w="173"/><text x="99.3213%" y="3759.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="99.8020%" y="3733" width="0.0101%" height="15" fill="rgb(234,204,37)" fg:x="29733" fg:w="3"/><text x="99.8920%" y="3743.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext const&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (179 samples, 0.60%)</title><rect x="99.2213%" y="3829" width="0.6008%" height="15" fill="rgb(236,120,5)" fg:x="29560" fg:w="179"/><text x="99.3113%" y="3839.50"></text></g><g><title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*) (179 samples, 0.60%)</title><rect x="99.2213%" y="3813" width="0.6008%" height="15" fill="rgb(248,97,27)" fg:x="29560" fg:w="179"/><text x="99.3113%" y="3823.50"></text></g><g><title>rocksdb::CompressData(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, unsigned int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*) (179 samples, 0.60%)</title><rect x="99.2213%" y="3797" width="0.6008%" height="15" fill="rgb(240,66,17)" fg:x="29560" fg:w="179"/><text x="99.3113%" y="3807.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append(unsigned long, char) (3 samples, 0.01%)</title><rect x="99.8120%" y="3781" width="0.0101%" height="15" fill="rgb(210,79,3)" fg:x="29736" fg:w="3"/><text x="99.9020%" y="3791.50"></text></g><g><title>__bzero (3 samples, 0.01%)</title><rect x="99.8120%" y="3765" width="0.0101%" height="15" fill="rgb(214,176,27)" fg:x="29736" fg:w="3"/><text x="99.9020%" y="3775.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, rocksdb::BlockType) (188 samples, 0.63%)</title><rect x="99.2213%" y="3845" width="0.6310%" height="15" fill="rgb(235,185,3)" fg:x="29560" fg:w="188"/><text x="99.3113%" y="3855.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::WriteMaybeCompressedBlock(rocksdb::Slice const&amp;, rocksdb::CompressionType, rocksdb::BlockHandle*, rocksdb::BlockType, rocksdb::Slice const*) (9 samples, 0.03%)</title><rect x="99.8221%" y="3829" width="0.0302%" height="15" fill="rgb(227,24,12)" fg:x="29739" fg:w="9"/><text x="99.9121%" y="3839.50"></text></g><g><title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;, unsigned int, rocksdb::Env::IOPriority) (8 samples, 0.03%)</title><rect x="99.8255%" y="3813" width="0.0269%" height="15" fill="rgb(252,169,48)" fg:x="29740" fg:w="8"/><text x="99.9155%" y="3823.50"></text></g><g><title>rocksdb::WritableFileWriter::Flush(rocksdb::Env::IOPriority) (6 samples, 0.02%)</title><rect x="99.8322%" y="3797" width="0.0201%" height="15" fill="rgb(212,65,1)" fg:x="29742" fg:w="6"/><text x="99.9222%" y="3807.50"></text></g><g><title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long, rocksdb::Env::IOPriority) (6 samples, 0.02%)</title><rect x="99.8322%" y="3781" width="0.0201%" height="15" fill="rgb(242,39,24)" fg:x="29742" fg:w="6"/><text x="99.9222%" y="3791.50"></text></g><g><title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (6 samples, 0.02%)</title><rect x="99.8322%" y="3765" width="0.0201%" height="15" fill="rgb(249,32,23)" fg:x="29742" fg:w="6"/><text x="99.9222%" y="3775.50"></text></g><g><title>write (6 samples, 0.02%)</title><rect x="99.8322%" y="3749" width="0.0201%" height="15" fill="rgb(251,195,23)" fg:x="29742" fg:w="6"/><text x="99.9222%" y="3759.50"></text></g><g><title>_platform_memmove (10 samples, 0.03%)</title><rect x="99.8523%" y="3797" width="0.0336%" height="15" fill="rgb(236,174,8)" fg:x="29748" fg:w="10"/><text x="99.9423%" y="3807.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::Flush() (203 samples, 0.68%)</title><rect x="99.2078%" y="3877" width="0.6814%" height="15" fill="rgb(220,197,8)" fg:x="29556" fg:w="203"/><text x="99.2979%" y="3887.50">r..</text></g><g><title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::BlockBuilder*, rocksdb::BlockHandle*, rocksdb::BlockType) (203 samples, 0.68%)</title><rect x="99.2078%" y="3861" width="0.6814%" height="15" fill="rgb(240,108,37)" fg:x="29556" fg:w="203"/><text x="99.2979%" y="3871.50">r..</text></g><g><title>rocksdb::BlockBuilder::Finish() (11 samples, 0.04%)</title><rect x="99.8523%" y="3845" width="0.0369%" height="15" fill="rgb(232,176,24)" fg:x="29748" fg:w="11"/><text x="99.9423%" y="3855.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append(char const*, unsigned long) (11 samples, 0.04%)</title><rect x="99.8523%" y="3829" width="0.0369%" height="15" fill="rgb(243,35,29)" fg:x="29748" fg:w="11"/><text x="99.9423%" y="3839.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (11 samples, 0.04%)</title><rect x="99.8523%" y="3813" width="0.0369%" height="15" fill="rgb(210,37,18)" fg:x="29748" fg:w="11"/><text x="99.9423%" y="3823.50"></text></g><g><title>rocksdb::BlockBuilder::AddWithLastKey(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*) (25 samples, 0.08%)</title><rect x="99.8892%" y="3877" width="0.0839%" height="15" fill="rgb(224,184,40)" fg:x="29759" fg:w="25"/><text x="99.9792%" y="3887.50"></text></g><g><title>rocksdb::BlockBuilder::AddWithLastKeyImpl(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*, unsigned long) (25 samples, 0.08%)</title><rect x="99.8892%" y="3861" width="0.0839%" height="15" fill="rgb(236,39,29)" fg:x="29759" fg:w="25"/><text x="99.9792%" y="3871.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append(char const*, unsigned long) (25 samples, 0.08%)</title><rect x="99.8892%" y="3845" width="0.0839%" height="15" fill="rgb(232,48,39)" fg:x="29759" fg:w="25"/><text x="99.9792%" y="3855.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) (25 samples, 0.08%)</title><rect x="99.8892%" y="3829" width="0.0839%" height="15" fill="rgb(236,34,42)" fg:x="29759" fg:w="25"/><text x="99.9792%" y="3839.50"></text></g><g><title>_platform_memmove (25 samples, 0.08%)</title><rect x="99.8892%" y="3813" width="0.0839%" height="15" fill="rgb(243,106,37)" fg:x="29759" fg:w="25"/><text x="99.9792%" y="3823.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (229 samples, 0.77%)</title><rect x="99.2078%" y="3893" width="0.7687%" height="15" fill="rgb(218,96,6)" fg:x="29556" fg:w="229"/><text x="99.2979%" y="3903.50">r..</text></g><g><title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext const&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (3 samples, 0.01%)</title><rect x="99.9765%" y="3829" width="0.0101%" height="15" fill="rgb(235,130,12)" fg:x="29785" fg:w="3"/><text x="100.0665%" y="3839.50"></text></g><g><title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*) (3 samples, 0.01%)</title><rect x="99.9765%" y="3813" width="0.0101%" height="15" fill="rgb(231,95,0)" fg:x="29785" fg:w="3"/><text x="100.0665%" y="3823.50"></text></g><g><title>rocksdb::CompressData(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, unsigned int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*) (3 samples, 0.01%)</title><rect x="99.9765%" y="3797" width="0.0101%" height="15" fill="rgb(228,12,23)" fg:x="29785" fg:w="3"/><text x="100.0665%" y="3807.50"></text></g><g><title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (3 samples, 0.01%)</title><rect x="99.9765%" y="3781" width="0.0101%" height="15" fill="rgb(216,12,1)" fg:x="29785" fg:w="3"/><text x="100.0665%" y="3791.50"></text></g><g><title>snappy::Compress(snappy::Source*, snappy::Sink*) (3 samples, 0.01%)</title><rect x="99.9765%" y="3765" width="0.0101%" height="15" fill="rgb(219,59,3)" fg:x="29785" fg:w="3"/><text x="100.0665%" y="3775.50"></text></g><g><title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (3 samples, 0.01%)</title><rect x="99.9765%" y="3749" width="0.0101%" height="15" fill="rgb(215,208,46)" fg:x="29785" fg:w="3"/><text x="100.0665%" y="3759.50"></text></g><g><title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (235 samples, 0.79%)</title><rect x="99.2011%" y="3989" width="0.7888%" height="15" fill="rgb(254,224,29)" fg:x="29554" fg:w="235"/><text x="99.2911%" y="3999.50">r..</text></g><g><title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (235 samples, 0.79%)</title><rect x="99.2011%" y="3973" width="0.7888%" height="15" fill="rgb(232,14,29)" fg:x="29554" fg:w="235"/><text x="99.2911%" y="3983.50">r..</text></g><g><title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::FlushReason, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (235 samples, 0.79%)</title><rect x="99.2011%" y="3957" width="0.7888%" height="15" fill="rgb(208,45,52)" fg:x="29554" fg:w="235"/><text x="99.2911%" y="3967.50">r..</text></g><g><title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*, bool*) (234 samples, 0.79%)</title><rect x="99.2045%" y="3941" width="0.7854%" height="15" fill="rgb(234,191,28)" fg:x="29555" fg:w="234"/><text x="99.2945%" y="3951.50">r..</text></g><g><title>rocksdb::FlushJob::WriteLevel0Table() (234 samples, 0.79%)</title><rect x="99.2045%" y="3925" width="0.7854%" height="15" fill="rgb(244,67,43)" fg:x="29555" fg:w="234"/><text x="99.2945%" y="3935.50">r..</text></g><g><title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::VersionSet*, rocksdb::ImmutableDBOptions const&amp;, rocksdb::TableBuilderOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt;&gt;&gt;&gt;, rocksdb::FileMetaData*, std::__1::vector&lt;rocksdb::BlobFileAddition, std::__1::allocator&lt;rocksdb::BlobFileAddition&gt;&gt;*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt;, unsigned long long, unsigned long long, rocksdb::SnapshotChecker*, bool, rocksdb::InternalStats*, rocksdb::IOStatus*, std::__1::shared_ptr&lt;rocksdb::IOTracer&gt; const&amp;, rocksdb::BlobFileCreationReason, rocksdb::SeqnoToTimeMapping const&amp;, rocksdb::EventLogger*, int, rocksdb::Env::IOPriority, rocksdb::TableProperties*, rocksdb::Env::WriteLifeTimeHint, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const*, rocksdb::BlobFileCompletionCallback*, rocksdb::Version*, unsigned long long*, unsigned long long*, unsigned long long*) (234 samples, 0.79%)</title><rect x="99.2045%" y="3909" width="0.7854%" height="15" fill="rgb(236,189,24)" fg:x="29555" fg:w="234"/><text x="99.2945%" y="3919.50">r..</text></g><g><title>rocksdb::BlockBasedTableBuilder::Finish() (4 samples, 0.01%)</title><rect x="99.9765%" y="3893" width="0.0134%" height="15" fill="rgb(239,214,33)" fg:x="29785" fg:w="4"/><text x="100.0665%" y="3903.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::Flush() (4 samples, 0.01%)</title><rect x="99.9765%" y="3877" width="0.0134%" height="15" fill="rgb(226,176,41)" fg:x="29785" fg:w="4"/><text x="100.0665%" y="3887.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::BlockBuilder*, rocksdb::BlockHandle*, rocksdb::BlockType) (4 samples, 0.01%)</title><rect x="99.9765%" y="3861" width="0.0134%" height="15" fill="rgb(248,47,8)" fg:x="29785" fg:w="4"/><text x="100.0665%" y="3871.50"></text></g><g><title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, rocksdb::BlockType) (4 samples, 0.01%)</title><rect x="99.9765%" y="3845" width="0.0134%" height="15" fill="rgb(218,81,44)" fg:x="29785" fg:w="4"/><text x="100.0665%" y="3855.50"></text></g><g><title>all (29,792 samples, 100%)</title><rect x="0.0000%" y="4101" width="100.0000%" height="15" fill="rgb(213,98,6)" fg:x="0" fg:w="29792"/><text x="0.0900%" y="4111.50"></text></g><g><title>thread_start (29,293 samples, 98.33%)</title><rect x="1.6749%" y="4085" width="98.3251%" height="15" fill="rgb(222,85,22)" fg:x="499" fg:w="29293"/><text x="1.7650%" y="4095.50">thread_start</text></g><g><title>_pthread_start (29,293 samples, 98.33%)</title><rect x="1.6749%" y="4069" width="98.3251%" height="15" fill="rgb(239,46,39)" fg:x="499" fg:w="29293"/><text x="1.7650%" y="4079.50">_pthread_start</text></g><g><title>void* std::__1::__thread_proxy[abi:ne190102]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt;&gt;, void (*)(void*), rocksdb::BGThreadMetadata*&gt;&gt;(void*) (238 samples, 0.80%)</title><rect x="99.2011%" y="4053" width="0.7989%" height="15" fill="rgb(237,12,29)" fg:x="29554" fg:w="238"/><text x="99.2911%" y="4063.50">v..</text></g><g><title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (238 samples, 0.80%)</title><rect x="99.2011%" y="4037" width="0.7989%" height="15" fill="rgb(214,77,8)" fg:x="29554" fg:w="238"/><text x="99.2911%" y="4047.50">r..</text></g><g><title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (238 samples, 0.80%)</title><rect x="99.2011%" y="4021" width="0.7989%" height="15" fill="rgb(217,168,37)" fg:x="29554" fg:w="238"/><text x="99.2911%" y="4031.50">r..</text></g><g><title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (238 samples, 0.80%)</title><rect x="99.2011%" y="4005" width="0.7989%" height="15" fill="rgb(221,217,23)" fg:x="29554" fg:w="238"/><text x="99.2911%" y="4015.50">r..</text></g><g><title>rocksdb::JobContext::Clean() (3 samples, 0.01%)</title><rect x="99.9899%" y="3989" width="0.0101%" height="15" fill="rgb(243,229,36)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3999.50"></text></g><g><title>rocksdb::SuperVersionContext::Clean() (3 samples, 0.01%)</title><rect x="99.9899%" y="3973" width="0.0101%" height="15" fill="rgb(251,163,40)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3983.50"></text></g><g><title>rocksdb::SuperVersion::~SuperVersion() (3 samples, 0.01%)</title><rect x="99.9899%" y="3957" width="0.0101%" height="15" fill="rgb(237,222,12)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3967.50"></text></g><g><title>rocksdb::MemTable::~MemTable() (3 samples, 0.01%)</title><rect x="99.9899%" y="3941" width="0.0101%" height="15" fill="rgb(248,132,6)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3951.50"></text></g><g><title>rocksdb::Arena::~Arena() (3 samples, 0.01%)</title><rect x="99.9899%" y="3925" width="0.0101%" height="15" fill="rgb(227,167,50)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3935.50"></text></g><g><title>std::__1::deque&lt;std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt;&gt;&gt;&gt;::~deque[abi:ne190102]() (3 samples, 0.01%)</title><rect x="99.9899%" y="3909" width="0.0101%" height="15" fill="rgb(242,84,37)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3919.50"></text></g><g><title>free_medium (3 samples, 0.01%)</title><rect x="99.9899%" y="3893" width="0.0101%" height="15" fill="rgb(212,4,50)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3903.50"></text></g><g><title>mvm_madvise_free_plat (3 samples, 0.01%)</title><rect x="99.9899%" y="3877" width="0.0101%" height="15" fill="rgb(230,228,32)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3887.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.01%)</title><rect x="99.9899%" y="3861" width="0.0101%" height="15" fill="rgb(248,217,23)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3871.50"></text></g><g><title>madvise (3 samples, 0.01%)</title><rect x="99.9899%" y="3845" width="0.0101%" height="15" fill="rgb(238,197,32)" fg:x="29789" fg:w="3"/><text x="100.0799%" y="3855.50"></text></g></svg></svg>